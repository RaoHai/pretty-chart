/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				var _m = moreModules[moduleId];
/******/
/******/ 				// Check if module is deduplicated
/******/ 				switch(typeof _m) {
/******/ 				case "object":
/******/ 					// Module can be created from a template
/******/ 					modules[moduleId] = (function(_m) {
/******/ 						var args = _m.slice(1), templateId = _m[0];
/******/ 						return function (a,b,c) {
/******/ 							modules[templateId].apply(this, [a,b,c].concat(args));
/******/ 						};
/******/ 					}(_m));
/******/ 					break;
/******/ 				case "function":
/******/ 					// Normal module
/******/ 					modules[moduleId] = _m;
/******/ 					break;
/******/ 				default:
/******/ 					// Module is a copy of another module
/******/ 					modules[moduleId] = modules[_m];
/******/ 					break;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		4:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/
/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"card","1":"components","2":"default","3":"simple"}[chunkId]||chunkId) + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(5);


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(6);
	var ReactDOMServer = __webpack_require__(151);
	var ReactIsomorphic = __webpack_require__(155);
	
	var assign = __webpack_require__(42);
	var deprecated = __webpack_require__(160);
	
	// `version` will be added here by ReactIsomorphic.
	var React = {};
	
	assign(React, ReactIsomorphic);
	
	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
	
	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});
	
	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
	
	module.exports = React;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactDOMTextComponent = __webpack_require__(9);
	var ReactDefaultInjection = __webpack_require__(74);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(31);
	var ReactPerf = __webpack_require__(21);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(57);
	var ReactVersion = __webpack_require__(149);
	
	var findDOMNode = __webpack_require__(94);
	var renderSubtreeIntoContainer = __webpack_require__(150);
	var warning = __webpack_require__(28);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(12);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
	
	    // shams
	    Object.create, Object.freeze];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(10);
	var DOMPropertyOperations = __webpack_require__(25);
	var ReactComponentBrowserEnvironment = __webpack_require__(29);
	var ReactMount = __webpack_require__(31);
	
	var assign = __webpack_require__(42);
	var escapeTextContentForBrowser = __webpack_require__(24);
	var setTextContent = __webpack_require__(23);
	var validateDOMNesting = __webpack_require__(73);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },
	
	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(11);
	var ReactMultiChildUpdateTypes = __webpack_require__(19);
	var ReactPerf = __webpack_require__(21);
	
	var setInnerHTML = __webpack_require__(22);
	var setTextContent = __webpack_require__(23);
	var invariant = __webpack_require__(16);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	
	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
	
	  parentNode.insertBefore(childNode, beforeChild);
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var createNodesFromMarkup = __webpack_require__(13);
	var emptyFunction = __webpack_require__(18);
	var getMarkupWrap = __webpack_require__(17);
	var invariant = __webpack_require__(16);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
	
	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var createArrayFromMixed = __webpack_require__(14);
	var getMarkupWrap = __webpack_require__(17);
	var invariant = __webpack_require__(16);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	'use strict';
	
	var toArray = __webpack_require__(15);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	"use strict";
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(20);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(24);
	var setInnerHTML = __webpack_require__(22);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	var ReactPerf = __webpack_require__(21);
	
	var quoteAttributeValueForBrowser = __webpack_require__(27);
	var warning = __webpack_require__(28);
	
	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(24);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(30);
	var ReactMount = __webpack_require__(31);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(10);
	var DOMPropertyOperations = __webpack_require__(25);
	var ReactMount = __webpack_require__(31);
	var ReactPerf = __webpack_require__(21);
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	var ReactBrowserEventEmitter = __webpack_require__(32);
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactDOMFeatureFlags = __webpack_require__(44);
	var ReactElement = __webpack_require__(45);
	var ReactEmptyComponentRegistry = __webpack_require__(47);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMarkupChecksum = __webpack_require__(51);
	var ReactPerf = __webpack_require__(21);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdateQueue = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var emptyObject = __webpack_require__(61);
	var containsNode = __webpack_require__(62);
	var instantiateReactComponent = __webpack_require__(65);
	var invariant = __webpack_require__(16);
	var setInnerHTML = __webpack_require__(22);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var validateDOMNesting = __webpack_require__(73);
	var warning = __webpack_require__(28);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}
	
	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	
	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);
	
	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
	
	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }
	
	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },
	
	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },
	
	  ownerDocumentContextKey: ownerDocumentContextKey,
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  isValid: isValid,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPluginHub = __webpack_require__(34);
	var EventPluginRegistry = __webpack_require__(35);
	var ReactEventEmitterMixin = __webpack_require__(40);
	var ReactPerf = __webpack_require__(21);
	var ViewportMetrics = __webpack_require__(41);
	
	var assign = __webpack_require__(42);
	var isEventSupported = __webpack_require__(43);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(20);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var EventPluginRegistry = __webpack_require__(35);
	var EventPluginUtils = __webpack_require__(36);
	var ReactErrorUtils = __webpack_require__(37);
	
	var accumulateInto = __webpack_require__(38);
	var forEachAccumulated = __webpack_require__(39);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }
	
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(37);
	
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(34);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(8);
	
	var assign = __webpack_require__(42);
	var canDefineProperty = __webpack_require__(46);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
	
	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
	
	'use strict';
	
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};
	
	module.exports = ReactEmptyComponentRegistry;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(49);
	
	var invariant = __webpack_require__(16);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(52);
	
	var TAG_END = /\/?>/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(54);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(55);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactElement = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },
	
	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },
	
	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(59);
	var ReactPerf = __webpack_require__(21);
	var ReactReconciler = __webpack_require__(53);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}
	
	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(59);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isTextNode = __webpack_require__(63);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;
	
	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;
	
	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}
	
	module.exports = containsNode;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isNode = __webpack_require__(64);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';
	
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCompositeComponent = __webpack_require__(66);
	var ReactEmptyComponent = __webpack_require__(71);
	var ReactNativeComponent = __webpack_require__(72);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactElement = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactPerf = __webpack_require__(21);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdateQueue = __webpack_require__(56);
	
	var assign = __webpack_require__(42);
	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(16);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var warning = __webpack_require__(28);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst;
	    var renderedElement;
	
	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);
	
	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }
	
	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	
	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(16);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(20);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(45);
	var ReactEmptyComponentRegistry = __webpack_require__(47);
	var ReactReconciler = __webpack_require__(53);
	
	var assign = __webpack_require__(42);
	
	var placeholderElement;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};
	
	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}
	
	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var assign = __webpack_require__(42);
	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(28);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    parentTag: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.parentTag = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };
	
	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(75);
	var ChangeEventPlugin = __webpack_require__(83);
	var ClientReactRootIndex = __webpack_require__(86);
	var DefaultEventPluginOrder = __webpack_require__(87);
	var EnterLeaveEventPlugin = __webpack_require__(88);
	var ExecutionEnvironment = __webpack_require__(12);
	var HTMLDOMPropertyConfig = __webpack_require__(92);
	var ReactBrowserComponentMixin = __webpack_require__(93);
	var ReactComponentBrowserEnvironment = __webpack_require__(29);
	var ReactDefaultBatchingStrategy = __webpack_require__(95);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMTextComponent = __webpack_require__(9);
	var ReactEventListener = __webpack_require__(121);
	var ReactInjection = __webpack_require__(124);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(31);
	var ReactReconcileTransaction = __webpack_require__(128);
	var SelectEventPlugin = __webpack_require__(133);
	var ServerReactRootIndex = __webpack_require__(134);
	var SimpleEventPlugin = __webpack_require__(135);
	var SVGDOMPropertyConfig = __webpack_require__(144);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(145);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(12);
	var FallbackCompositionState = __webpack_require__(77);
	var SyntheticCompositionEvent = __webpack_require__(79);
	var SyntheticInputEvent = __webpack_require__(81);
	
	var keyOf = __webpack_require__(82);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPluginHub = __webpack_require__(34);
	
	var warning = __webpack_require__(28);
	
	var accumulateInto = __webpack_require__(38);
	var forEachAccumulated = __webpack_require__(39);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(59);
	
	var assign = __webpack_require__(42);
	var getTextContentAccessor = __webpack_require__(78);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(80);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(59);
	
	var assign = __webpack_require__(42);
	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(28);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(80);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";
	
	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPluginHub = __webpack_require__(34);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(12);
	var ReactUpdates = __webpack_require__(57);
	var SyntheticEvent = __webpack_require__(80);
	
	var getEventTarget = __webpack_require__(84);
	var isEventSupported = __webpack_require__(43);
	var isTextInputElement = __webpack_require__(85);
	var keyOf = __webpack_require__(82);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(82);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPropagators = __webpack_require__(76);
	var SyntheticMouseEvent = __webpack_require__(89);
	
	var ReactMount = __webpack_require__(31);
	var keyOf = __webpack_require__(82);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(90);
	var ViewportMetrics = __webpack_require__(41);
	
	var getEventModifierState = __webpack_require__(91);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(80);
	
	var getEventTarget = __webpack_require__(84);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(12);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,
	
	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var ReactInstanceMap = __webpack_require__(50);
	
	var findDOMNode = __webpack_require__(94);
	var warning = __webpack_require__(28);
	
	var didWarnKey = '_getDOMNodeDidWarn';
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMount = __webpack_require__(31);
	
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(57);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(42);
	var emptyFunction = __webpack_require__(18);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMProperty = __webpack_require__(26);
	var DOMPropertyOperations = __webpack_require__(25);
	var EventConstants = __webpack_require__(33);
	var ReactBrowserEventEmitter = __webpack_require__(32);
	var ReactComponentBrowserEnvironment = __webpack_require__(29);
	var ReactDOMButton = __webpack_require__(107);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(112);
	var ReactDOMSelect = __webpack_require__(115);
	var ReactDOMTextarea = __webpack_require__(116);
	var ReactMount = __webpack_require__(31);
	var ReactMultiChild = __webpack_require__(117);
	var ReactPerf = __webpack_require__(21);
	var ReactUpdateQueue = __webpack_require__(56);
	
	var assign = __webpack_require__(42);
	var canDefineProperty = __webpack_require__(46);
	var escapeTextContentForBrowser = __webpack_require__(24);
	var invariant = __webpack_require__(16);
	var isEventSupported = __webpack_require__(43);
	var keyOf = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(22);
	var setTextContent = __webpack_require__(23);
	var shallowEqual = __webpack_require__(120);
	var validateDOMNesting = __webpack_require__(73);
	var warning = __webpack_require__(28);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	
	var ELEMENT_NODE_TYPE = 1;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}
	
	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}
	
	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}
	
	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}
	
	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}
	
	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
	
	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}
	
	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function (element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }
	
	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }
	
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },
	
	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);
	
	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }
	
	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(31);
	
	var findDOMNode = __webpack_require__(94);
	var focusNode = __webpack_require__(98);
	
	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};
	
	var AutoFocusUtils = {
	  Mixin: Mixin,
	
	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(12);
	var ReactPerf = __webpack_require__(21);
	
	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(28);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };
	
	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(102);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	"use strict";
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(105);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	'use strict';
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = ReactDOMButton;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(30);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactMount = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },
	
	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(110);
	var ReactPropTypeLocations = __webpack_require__(68);
	
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(45);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	
	var emptyFunction = __webpack_require__(18);
	var getIteratorFn = __webpack_require__(111);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(113);
	var ReactDOMSelect = __webpack_require__(115);
	
	var assign = __webpack_require__(42);
	var warning = __webpack_require__(28);
	
	var valueContextKey = ReactDOMSelect.valueContextKey;
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }
	
	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];
	
	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });
	
	    if (content) {
	      nativeProps.children = content;
	    }
	
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(59);
	var ReactElement = __webpack_require__(45);
	
	var emptyFunction = __webpack_require__(18);
	var traverseAllChildren = __webpack_require__(114);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactElement = __webpack_require__(45);
	var ReactInstanceHandles = __webpack_require__(48);
	
	var getIteratorFn = __webpack_require__(111);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(109);
	var ReactMount = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var warning = __webpack_require__(28);
	
	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,
	
	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },
	
	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMIDOperations = __webpack_require__(30);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactMultiChildUpdateTypes = __webpack_require__(19);
	
	var ReactCurrentOwner = __webpack_require__(8);
	var ReactReconciler = __webpack_require__(53);
	var ReactChildReconciler = __webpack_require__(118);
	
	var flattenChildren = __webpack_require__(119);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(53);
	
	var instantiateReactComponent = __webpack_require__(65);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var traverseAllChildren = __webpack_require__(114);
	var warning = __webpack_require__(28);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(114);
	var warning = __webpack_require__(28);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(122);
	var ExecutionEnvironment = __webpack_require__(12);
	var PooledClass = __webpack_require__(59);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(57);
	
	var assign = __webpack_require__(42);
	var getEventTarget = __webpack_require__(84);
	var getUnboundedScrollPosition = __webpack_require__(123);
	
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }
	
	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}
	
	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);
	
	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
	
	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function () {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 123 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	var EventPluginHub = __webpack_require__(34);
	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactClass = __webpack_require__(125);
	var ReactEmptyComponent = __webpack_require__(71);
	var ReactBrowserEventEmitter = __webpack_require__(32);
	var ReactNativeComponent = __webpack_require__(72);
	var ReactPerf = __webpack_require__(21);
	var ReactRootIndex = __webpack_require__(49);
	var ReactUpdates = __webpack_require__(57);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var ReactComponent = __webpack_require__(126);
	var ReactElement = __webpack_require__(45);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactNoopUpdateQueue = __webpack_require__(127);
	
	var assign = __webpack_require__(42);
	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(16);
	var keyMirror = __webpack_require__(20);
	var keyOf = __webpack_require__(82);
	var warning = __webpack_require__(28);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
	
	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var ReactNoopUpdateQueue = __webpack_require__(127);
	
	var canDefineProperty = __webpack_require__(46);
	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(28);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }
	
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(59);
	var ReactBrowserEventEmitter = __webpack_require__(32);
	var ReactDOMFeatureFlags = __webpack_require__(44);
	var ReactInputSelection = __webpack_require__(129);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(42);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(130);
	
	var containsNode = __webpack_require__(62);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(132);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var getNodeForCharacterOffset = __webpack_require__(131);
	var getTextContentAccessor = __webpack_require__(78);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';
	
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(12);
	var ReactInputSelection = __webpack_require__(129);
	var SyntheticEvent = __webpack_require__(80);
	
	var getActiveElement = __webpack_require__(132);
	var isTextInputElement = __webpack_require__(85);
	var keyOf = __webpack_require__(82);
	var shallowEqual = __webpack_require__(120);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ }),
/* 134 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(33);
	var EventListener = __webpack_require__(122);
	var EventPropagators = __webpack_require__(76);
	var ReactMount = __webpack_require__(31);
	var SyntheticClipboardEvent = __webpack_require__(136);
	var SyntheticEvent = __webpack_require__(80);
	var SyntheticFocusEvent = __webpack_require__(137);
	var SyntheticKeyboardEvent = __webpack_require__(138);
	var SyntheticMouseEvent = __webpack_require__(89);
	var SyntheticDragEvent = __webpack_require__(141);
	var SyntheticTouchEvent = __webpack_require__(142);
	var SyntheticUIEvent = __webpack_require__(90);
	var SyntheticWheelEvent = __webpack_require__(143);
	
	var emptyFunction = __webpack_require__(18);
	var getEventCharCode = __webpack_require__(139);
	var invariant = __webpack_require__(16);
	var keyOf = __webpack_require__(82);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(80);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(90);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(90);
	
	var getEventCharCode = __webpack_require__(139);
	var getEventKey = __webpack_require__(140);
	var getEventModifierState = __webpack_require__(91);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(139);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(89);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(90);
	
	var getEventModifierState = __webpack_require__(91);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(89);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(26);
	var ReactDefaultPerfAnalysis = __webpack_require__(146);
	var ReactMount = __webpack_require__(31);
	var ReactPerf = __webpack_require__(21);
	
	var performanceNow = __webpack_require__(147);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	var assign = __webpack_require__(42);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	'use strict';
	
	var performance = __webpack_require__(148);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(12);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '0.14.9';

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(31);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(74);
	var ReactServerRendering = __webpack_require__(152);
	var ReactVersion = __webpack_require__(149);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactDefaultBatchingStrategy = __webpack_require__(95);
	var ReactElement = __webpack_require__(45);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMarkupChecksum = __webpack_require__(51);
	var ReactServerBatchingStrategy = __webpack_require__(153);
	var ReactServerRenderingTransaction = __webpack_require__(154);
	var ReactUpdates = __webpack_require__(57);
	
	var emptyObject = __webpack_require__(61);
	var instantiateReactComponent = __webpack_require__(65);
	var invariant = __webpack_require__(16);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 153 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(59);
	var CallbackQueue = __webpack_require__(58);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(42);
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(113);
	var ReactComponent = __webpack_require__(126);
	var ReactClass = __webpack_require__(125);
	var ReactDOMFactories = __webpack_require__(156);
	var ReactElement = __webpack_require__(45);
	var ReactElementValidator = __webpack_require__(157);
	var ReactPropTypes = __webpack_require__(110);
	var ReactVersion = __webpack_require__(149);
	
	var assign = __webpack_require__(42);
	var onlyChild = __webpack_require__(159);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(45);
	var ReactElementValidator = __webpack_require__(157);
	
	var mapObject = __webpack_require__(158);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(45);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactCurrentOwner = __webpack_require__(8);
	
	var canDefineProperty = __webpack_require__(46);
	var getIteratorFn = __webpack_require__(111);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(28);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 158 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(45);
	
	var invariant = __webpack_require__(16);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	'use strict';
	
	var assign = __webpack_require__(42);
	var warning = __webpack_require__(28);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(6);


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _src = __webpack_require__(163);
	
	var _src2 = _interopRequireDefault(_src);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _src2.default; // export this package's api
	
	module.exports = exports['default'];

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Card = __webpack_require__(164);
	
	var _Card2 = _interopRequireDefault(_Card);
	
	var _Charts = __webpack_require__(503);
	
	var Charts = _interopRequireWildcard(_Charts);
	
	var _Meta = __webpack_require__(506);
	
	var _Meta2 = _interopRequireDefault(_Meta);
	
	var _Title = __webpack_require__(507);
	
	var _Title2 = _interopRequireDefault(_Title);
	
	var _Footer = __webpack_require__(508);
	
	var _Footer2 = _interopRequireDefault(_Footer);
	
	var _Percent = __webpack_require__(509);
	
	var _Percent2 = _interopRequireDefault(_Percent);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// export this package's api
	_Card2.default.Charts = Charts;
	_Card2.default.Meta = _Meta2.default;
	_Card2.default.Title = _Title2.default;
	_Card2.default.Percent = _Percent2.default;
	_Card2.default.Footer = _Footer2.default;
	
	exports.default = _Card2.default;
	module.exports = exports['default'];

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Card = __webpack_require__(165);
	
	var _Card2 = _interopRequireDefault(_Card);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var testData = [];
	for (var i = 0; i < 10; i++) {
	  var y = Math.round(Math.random() * 10);
	  testData.push({
	    x: i * 10,
	    y: y,
	    type: y > 5 ? 1 : 0
	  });
	}
	
	var DefaultCard = function (_Component) {
	  _inherits(DefaultCard, _Component);
	
	  function DefaultCard() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, DefaultCard);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {}, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  DefaultCard.prototype.render = function render() {
	    var props = this.props;
	
	    var id = 'default-chart-container-' + Math.random();
	    return _react2.default.createElement(
	      _Card2.default,
	      _extends({}, props, { data: testData, id: id }),
	      props.children ? props.children : _react2.default.createElement('div', { id: id })
	    );
	  };
	
	  return DefaultCard;
	}(_react.Component);
	
	exports.default = DefaultCard;
	module.exports = exports['default'];

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	__webpack_require__(166);
	
	var _prefixCls = __webpack_require__(501);
	
	var _prefixCls2 = _interopRequireDefault(_prefixCls);
	
	var _constants = __webpack_require__(502);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var cls = (0, _prefixCls2.default)('deer-card');
	
	var CardBase = function (_Component) {
	  _inherits(CardBase, _Component);
	
	  function CardBase() {
	    _classCallCheck(this, CardBase);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this));
	
	    _this.chartInst = null;
	    return _this;
	  }
	
	  CardBase.prototype.getChildContext = function getChildContext() {
	    return {
	      size: this.props.size,
	      title: this.props.title,
	      colorSet: this.props.colorSet || _constants.defaultColorSet
	    };
	  };
	
	  CardBase.prototype.componentDidMount = function componentDidMount() {};
	
	  CardBase.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.chartInst) {
	      this.chartInst.destroy();
	      this.chartInst = null;
	    }
	  };
	
	  CardBase.prototype.render = function render() {
	    var _props = this.props,
	        title = _props.title,
	        children = _props.children,
	        theme = _props.theme,
	        className = _props.className,
	        size = _props.size,
	        footer = _props.footer,
	        colorSet = _props.colorSet;
	
	    return _react2.default.createElement(
	      'div',
	      { className: cls('', _defineProperty({
	          dark: theme === 'dark'
	        }, '' + size, true)),
	        style: { background: colorSet.background }
	      },
	      title ? _react2.default.createElement(
	        'h3',
	        { className: cls('title'), style: { color: colorSet.highlightText } },
	        title
	      ) : null,
	      _react2.default.createElement(
	        'div',
	        { className: cls('content') },
	        children
	      ),
	      footer ? _react2.default.createElement(
	        'div',
	        { className: cls('footer') },
	        footer
	      ) : null
	    );
	  };
	
	  return CardBase;
	}(_react.Component);
	
	CardBase.childContextTypes = {
	  size: _react2.default.PropTypes.string,
	  title: _react2.default.PropTypes.any,
	  colorSet: _react2.default.PropTypes.object
	};
	exports.default = CardBase;
	module.exports = exports['default'];

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _g = __webpack_require__(167);
	
	var _g2 = _interopRequireDefault(_g);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Shape = _g2.default.Shape;
	var Util = _g2.default.Util;
	
	function getFillAttrs(cfg) {
	  var attrs = Util.mix({
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}
	
	function _getActiveCfg(type) {
	  if (!type || type.indexOf('line') === -1) {
	    return Global.activeShape.area;
	  }
	  return Global.activeShape.hollowArea;
	}
	
	function getRectPath(points) {
	  var collapse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	  var path = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    if (point) {
	      var action = i === 0 ? 'M' : 'L';
	      path.push([action, point.x, point.y]);
	    }
	  }
	  var first = points[0];
	  path.push(['L', first.x, first.y]);
	  if (collapse) {
	    path.push(['z']);
	  }
	  return path;
	}
	
	// type = 'top' | 'bottom' | 'both'
	function addRadius(r, path) {
	  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'both';
	
	  var result = [];
	  var length = path[1][2] - path[0][2];
	  var radius = Math.min(length, r);
	  result.push(path[0]);
	  result.push(path[1]);
	
	  if (type === 'bottom' || type === 'both') {
	    result.push(['A', r, r, 1, 0, 1, path[2][1], path[2][2]]);
	  } else {
	    result.push(path[2]);
	  }
	
	  result.push(path[3]);
	
	  if (type === 'top' || type === 'both') {
	    result.push(['A', r, r, 1, 0, 1, path[4][1], path[4][2]]);
	  } else {
	    result.push(path[4]);
	  }
	  return result;
	}
	
	function curryChain() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  return function () {
	    var result = null;
	    for (var i = 0; i < funcs.length; i++) {
	      if (i === 0) {
	        result = funcs[i].apply(funcs, arguments);
	      } else {
	        result = funcs[i](result);
	      }
	    }
	    return result;
	  };
	}
	
	Shape.registShape('interval', 'radiusInterval', {
	  getActiveCfg: function getActiveCfg(type) {
	    return _getActiveCfg(type);
	  },
	  getShapePoints: function getShapePoints(cfg) {
	    var width = cfg.size / 2;
	    var x = cfg.x,
	        y = cfg.y,
	        y0 = cfg.y0;
	
	    return [{ x: x - width, y: y[0] }, { x: x - width, y: y0 }, { x: x - width, y: y[1] }, { x: x + width, y: y[1] }, { x: x + width, y: y0 }, { x: x + width, y: y[0] }];
	  },
	  drawShape: function drawShape(cfg, container) {
	    var points = cfg.points;
	    var colors = cfg.color;
	    var attrs = getFillAttrs(cfg);
	    var path = getRectPath([cfg.points[0], cfg.points[2], cfg.points[3], cfg.points[5]]);
	    path = this.parsePath(path, false); // 将 0 - 1 的值转换为画布坐标
	
	    var processUpperPath = curryChain(getRectPath, this.parsePath.bind(this), function (paths) {
	      return addRadius(cfg.size / 2, paths, 'top');
	    });
	
	    var upperPath = processUpperPath([cfg.points[0], cfg.points[1], cfg.points[4], cfg.points[5]]);
	
	    var processLowerPath = curryChain(getRectPath, this.parsePath.bind(this), function (paths) {
	      return addRadius(cfg.size / 2, paths, 'bottom');
	    });
	
	    var upperShape = container.addShape('path', {
	      attrs: _extends({}, attrs, { path: upperPath, fill: colors[0] })
	    });
	
	    var lowerPath = processLowerPath([cfg.points[1], cfg.points[2], cfg.points[3], cfg.points[4]]);
	
	    var lowerShape = container.addShape('path', {
	      attrs: _extends({}, attrs, { path: lowerPath, fill: colors[1] })
	    });
	
	    return container.addShape('path', {
	      attrs: {
	        path: addRadius(cfg.size / 2, path),
	        stroke: colors[2],
	        lineWidth: 0
	      }
	    });
	  }
	});

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var g2 = {};
	
	g2.Chart = __webpack_require__(168);
	g2.Util = __webpack_require__(169);
	g2.Global = __webpack_require__(264);
	g2.Stat = __webpack_require__(422);
	g2.Stat.map = __webpack_require__(474);
	g2.Stat.tree = __webpack_require__(480);
	g2.Stat.treemap = __webpack_require__(484);
	__webpack_require__(489);
	g2.Scale = __webpack_require__(298);
	g2.Shape = __webpack_require__(317); // TODO
	g2.Frame = __webpack_require__(270);
	g2.Theme = __webpack_require__(266);
	g2.Canvas = __webpack_require__(173);
	g2.Coord = __webpack_require__(279);
	g2.Base = __webpack_require__(197);
	g2.ColorCalculate = __webpack_require__(374);
	g2.Layout = __webpack_require__(493);
	g2.Animate = __webpack_require__(412);
	
	g2.Plugin = {}; // G2 插件
	var Monitor = __webpack_require__(499);
	Monitor.tracking = true;
	g2.track = function (enable) {
	  Monitor.tracking = enable;
	};
	g2.version = '2.3.1';
	__webpack_require__(500);
	
	module.exports = g2;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Canvas = __webpack_require__(173);
	var Components = __webpack_require__(244);
	var Plot = Components.Plot;
	var Global = __webpack_require__(264);
	var View = __webpack_require__(269);
	var Assists = __webpack_require__(277);
	
	function _isScaleExist(scales, compareScale) {
	  var flag = false;
	  Util.each(scales, function(scale) {
	    var scaleValues = [].concat(scale.values);
	    var compareScaleValues = [].concat(compareScale.values);
	    if (scale.type === compareScale.type && scale.dim === compareScale.dim && scaleValues.sort().toString() === compareScaleValues.sort().toString()) {
	      flag = true;
	      return;
	    }
	  });
	
	  return flag;
	}
	
	function _styleCanvas(canvas) {
	  var node = canvas.get('el');
	  node.style.position = 'absolute';
	  node.style.top = 0;
	  node.style.left = 0;
	}
	
	function _createCanvas(cfg, hasStyle) {
	  var canvas = new Canvas(cfg);
	  if (hasStyle) {
	    _styleCanvas(canvas);
	  }
	  canvas.set('fontFamily', Global.fontFamily);
	  return canvas;
	}
	
	// 初始化 container
	function _initDomContainer(cfg) {
	  var id = cfg.id;
	  var element = document.getElementById(id);
	  var container = cfg.container; // 用户也可以将 dom 元素直接传入
	
	  if (!element && !container) {
	    throw new Error('please specify the canvas container Id !');
	  }
	
	  if (element && container) {
	    throw new Error('"container" and "id" can not be declared at the same time!');
	  }
	
	  if (!container) {
	    var chartId = Util.guid('g-chart');
	    container = Util.createDom('<div></div>');
	    container.id = chartId;
	    element.appendChild(container);
	  }
	
	  return container;
	}
	
	// 初始化自适应宽度
	function _initForceFit(cfg) {
	  var container = cfg.container;
	  var width = Util.getWidth(container);
	  cfg.width = width;
	  return cfg;
	}
	
	// 初始化 canvas
	function _initCanvas(cfg) {
	  var width = cfg.width;
	  var height = cfg.height;
	  var container = cfg.container;
	
	  var canvasCfg = {
	    width: width,
	    height: height,
	    containerDOM: container,
	    capture: false
	  };
	  var backCanvas = _createCanvas(canvasCfg, false); // 用于绘制坐标轴 axis
	  var canvas = _createCanvas(canvasCfg, true); // 用于绘制 geom 图层
	  var frontCanvas = _createCanvas(canvasCfg, true); // 用于绘制 tooltip guide legend
	  canvas.set('capture', true);
	  cfg.backCanvas = backCanvas;
	  cfg.canvas = canvas;
	  cfg.frontCanvas = frontCanvas;
	
	  return cfg;
	}
	
	function initContainer(cfg) {
	  var plotCfg = Util.mix({}, Global.plotCfg, cfg.plotCfg);
	  var domContainer = _initDomContainer(cfg);
	  cfg.plotCfg = plotCfg;
	  cfg.container = domContainer;
	
	  if (cfg.forceFit) {
	    cfg = _initForceFit(cfg);
	  }
	
	  cfg = _initCanvas(cfg);
	
	  var backCanvas = cfg.backCanvas;
	  var backPlotBg = backCanvas.addGroup(Plot.Back, plotCfg); // 用于整个图表的背景绘制
	  cfg.backPlotBg = backPlotBg;
	  cfg.plotRange = backPlotBg.get('plotRange'); // geom 图层绘制区域
	
	  return cfg;
	}
	
	var Chart = function(cfg) {
	  cfg = initContainer(cfg); // 创建图表容器以及 canvas
	  Chart.superclass.constructor.call(this, cfg);
	  this.init();
	};
	
	Chart.ATTRS = {
	  id: null,
	  width: null,
	  height: null,
	  plotCfg: null,
	  forceFit: false
	};
	
	Util.extend(Chart, View);
	
	Util.augment(Chart, {
	  init: function() {
	    var plotRange = this.get('plotRange');
	    this.set('region', {
	      start: plotRange.start,
	      end: plotRange.end
	    });
	    this.set('viewId', 'chart');
	
	    if (this.get('forceFit')) {
	      window.addEventListener('resize', Util.wrapBehavior(this, '_initForceFitEvent'));
	    }
	
	    Assists.initEvent(this);
	    Assists.initLegend(this);
	    Assists.initTooltip(this);
	  },
	  // 自适应宽度事件
	  _initForceFitEvent: function() {
	    var timer = setTimeout(Util.wrapBehavior(this, 'forceFit'), 200);
	    clearTimeout(this.get('resizeTimer'));
	    this.set('resizeTimer', timer);
	  },
	  // 获取整体y轴对应的scale,如果有多个则是数组
	  _getAllYScales: function() {
	    var rst = [];
	    var views = this.get('views');
	
	    rst = rst.concat(this.getYScales());
	    Util.each(views, function(view) {
	      rst = rst.concat(view.getYScales());
	    });
	
	    return rst;
	  },
	  // 渲染图例
	  _renderLegends: function(options) {
	    var legendAssist = this.get('legendAssist');
	    var geoms = this.getAllGeoms();
	    var yScales = this._getAllYScales();
	    var scales = [];
	    Util.mix(legendAssist.legendCfg, options);
	    Util.each(geoms, function(geom) {
	      var attrs = geom.getLegendAttr();
	      Util.each(attrs, function(attr) {
	        var type = attr.type;
	        var scale = attr.getScale(type);
	        if (scale.type !== 'identity' && !_isScaleExist(scales, scale)) {
	          scales.push(scale);
	          var filterVals;
	          var attrScales = attr.scales;
	          var dim = attrScales.length === 1 ? scale.dim : scale.dim + '*' + attrScales[1].dim;
	          var geomView = geom.get('chart');
	          var filters = geomView.get('options').filters;
	          if (filters && filters[dim]) {
	            filterVals = filters[dim];
	          }
	          legendAssist.addLegend(scale, attr, geom, filterVals);
	        }
	      });
	    });
	
	    // 如果没有生成图例的图形属性映射，但是同时存在多个轴，则渲染混合图例
	    if (!scales.length && yScales.length > 1) {
	      var items = [];
	      Util.each(yScales, function(yScale) {
	        Util.each(geoms, function(geom) {
	          if (geom.getYScale() === yScale && yScale.values && yScale.values.length > 0) {
	            var item = {
	              name: yScale.alias || yScale.dim,
	              color: geom.getDefaultValue('color'),
	              geom: geom
	            };
	            items.push(item);
	            return false;
	          }
	        });
	      });
	      legendAssist.addMixedLegend(items);
	    }
	
	    legendAssist.alignLegends();
	  },
	  // 渲染tooltip
	  _renderTooltip: function() {
	    var options = this.get('options');
	    var tooltipAssist = this.get('tooltipAssist');
	    Util.mix(tooltipAssist.cfg, options.tooltip);
	    if (tooltipAssist.cfg.visible) {
	      tooltipAssist.renderTooltip();
	    }
	  },
	
	  /**
	   * 设置图例，一个图表可能有多个图例
	   * @param  {String} dim 对应的字段
	   * @param  {Object} cfg 配置项
	   */
	  legend: function(dim, cfg) {
	    var visible = true;
	    var legendCfg = {};
	    if (Util.isBoolean(dim)) {
	      visible = dim;
	    }
	    if (Util.isObject(dim)) {
	      legendCfg = dim;
	    } else {
	      legendCfg[dim] = cfg;
	    }
	    legendCfg.visible = visible;
	    this._setOptions('legends', legendCfg);
	    return this;
	  },
	  /**
	   * 配置 tooltip
	   * @param  {boolean|object} enable 为布尔值表示是否开启tooltip，对象则表示配置项
	   * @param  {object} cfg 配置项
	   */
	  tooltip: function(visible, cfg) {
	    if (Util.isObject(visible)) {
	      cfg = visible;
	      cfg.visible = true;
	    } else {
	      if (!cfg) {
	        cfg = {};
	      }
	      cfg.visible = visible;
	    }
	    this._setOptions('tooltip', cfg);
	    return this;
	  },
	  /**
	   * 设置分面
	   * @param  {string|Array} dims 产生分面的字段集合
	   * @param  {Object} cfg  分面的配置信息
	   */
	  facet: function(dims, cfg) {
	    var facetDims = Util.isString(dims) ? [dims] : dims;
	    if (!cfg) {
	      cfg = {};
	    }
	    cfg.dims = facetDims;
	    this._setOptions('facet', cfg);
	    return this;
	  },
	  /**
	   * 更改图表的大小
	   * @param  {Number} width  宽度
	   * @param  {Number} height 高度
	   */
	  changeSize: function(width, height) {
	    var self = this;
	    var backCanvas = self.get('backCanvas');
	    var canvas = self.get('canvas');
	    var frontCanvas = self.get('frontCanvas');
	    backCanvas.changeSize(width, height);
	    canvas.changeSize(width, height);
	    frontCanvas.changeSize(width, height);
	    self.set('width', width);
	    self.set('height', height);
	
	    var backPlotBg = self.get('backPlotBg');
	    backPlotBg.repaint();
	
	    var plotRange = backPlotBg.get('plotRange'); // geom 图层绘制区域
	    self.set('region', {
	      start: plotRange.start,
	      end: plotRange.end
	    });
	    var views = self.get('views');
	    Util.each(views, function(view) {
	      var region = self._getRegion(view);
	      view.set('region', region);
	    });
	
	    self.repaint();
	
	    return self;
	  },
	  /**
	   * 销毁图表，删除生成的图表
	   */
	  destroy: function() {
	    if (this.destroyed) {
	      return;
	    }
	    var container = this.get('container');
	    this.fire('destroy');
	    this.clear();
	    this.get('backCanvas').destroy();
	    this.get('canvas').destroy();
	    this.get('frontCanvas').destroy();
	    this.events = {};
	    this.destroyed = true;
	    container.parentNode.removeChild(container);
	    window.removeEventListener('resize', Util.getWrapBehavior(this, '_initForceFitEvent'));
	  },
	  /**
	   * 根据坐标点显示对应的tooltip
	   * @param  {Object} point 画布上的点
	   */
	  showTooltip: function(point) {
	    var self = this;
	    var views = self.getViewsByPoint(point);
	    if (views.length) {
	      var tooltipAssist = self.get('tooltipAssist');
	      tooltipAssist.showTooltip(point, views);
	    }
	    return self;
	  },
	  hideTooltip: function() {
	    var tooltipAssist = this.get('tooltipAssist');
	    tooltipAssist.hideTooltip();
	  },
	  getTooltipItems: function(point) {
	    var self = this;
	    var views = self.getViewsByPoint(point);
	    var rst = [];
	    Util.each(views, function(view) {
	      var geoms = view.getGeoms();
	      var tooltipAssist = self.get('tooltipAssist');
	      var tooltipMap = tooltipAssist.cfg && tooltipAssist.cfg.map;
	      Util.each(geoms, function(geom) {
	        var frames = geom.get('frames');
	        var items = [];
	        Util.each(frames, function(frame) {
	          var tmpPoint = geom.findPoint(point, frame);
	          if (tmpPoint) {
	            var subItems = geom.getTipItems(tmpPoint, tooltipMap);
	            items = items.concat(subItems);
	          }
	        });
	        rst = rst.concat(items);
	      });
	    });
	    return rst;
	  },
	  // 自适应宽度
	  forceFit: function() {
	    var container = this.get('container');
	    var width = Util.getWidth(container);
	    var height = this.get('height');
	    (width !== this.get('width')) && this.changeSize(width, height);
	  },
	  setMode: function(type) {
	    var eventAssist = this.get('eventAssist');
	    if (type === false) {
	      eventAssist.selectable = false;
	    } else if (type === 'select') {
	      eventAssist.selectable = true;
	    }
	    return this;
	  },
	  select: function(type) {
	    var eventAssist = this.get('eventAssist');
	    eventAssist.selectMode = type;
	    return this;
	  },
	  // 图表导出功能
	  downloadImage: function() {
	    var frontCanvas = this.get('frontCanvas');
	    var canvas = this.get('canvas');
	    var backCanvas = this.get('backCanvas');
	
	    var backCanvasDom = backCanvas.get('el');
	    var backCanvasCtx = backCanvasDom.getContext('2d');
	    backCanvasCtx.drawImage(canvas.get('el'), 0, 0);
	    backCanvasCtx.drawImage(frontCanvas.get('el'), 0, 0);
	
	    var dataURL = backCanvasDom.toDataURL('image/png');
	    backCanvas.draw();
	    var link = document.createElement('a');
	    link.download = 'chart.png';
	    link.href = dataURL.replace('image/png', 'image/octet-stream');
	    link.click();
	    return dataURL;
	  }
	});
	
	module.exports = Chart;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	var gUtil = __webpack_require__(170);
	
	module.exports = gUtil;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 基础工具类
	 * @author hankaiai@126.com
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(171);
	
	// 将数值逼近到指定的数
	function tryFixed(v, base) {
	  var str = base.toString();
	  var index = str.indexOf('.');
	  if (index === -1) {
	    return Math.round(v);
	  }
	  var length = str.substr(index + 1).length;
	  return parseFloat(v.toFixed(length));
	}
	
	function _mix(dist, obj) {
	  for (var k in obj) {
	    if (obj.hasOwnProperty(k) && k !== 'constructor' && obj[k] !== undefined) {
	      dist[k] = obj[k];
	    }
	  }
	}
	
	
	/**
	 * @class Util
	 * @singleton
	 * 绘图的工具类
	 */
	Util.mix(Util, {
	
	  mixin: function(c, mixins) {
	    if (c && mixins) {
	      c._mixins = mixins;
	      c.ATTRS = c.ATTRS || {};
	      var temp = {};
	      Util.each(mixins, function(mixin) {
	        Util.augment(c, mixin);
	        var attrs = mixin.ATTRS;
	        if (attrs) {
	          Util.mix(temp, attrs);
	        }
	      });
	
	      c.ATTRS = Util.mix(temp, c.ATTRS);
	    }
	  },
	  /**
	   * map 数组
	   * @param  {Array} arr 数组
	   * @return {Array} map后的数组
	   */
	  map: function(arr, func) {
	    var result = [];
	    Util.each(arr, function(value, index) {
	      result.push(func(value, index));
	    });
	    return result;
	  },
	  /**
	   * 过滤数组
	   * @param {Object|Array} element/Object 数组中的元素或者对象的值
	   * @param {Function} func 遍历的函数 function(elememt,index){} 或者 function(value,key){},如果返回true则添加到结果集
	   * @return {Array} 过滤的结果集
	   */
	  filter: function(array, func) {
	    var result = [];
	    Util.each(array, function(value, index) {
	      if (func(value, index)) {
	        result.push(value);
	      }
	    });
	    return result;
	  },
	  /**
	   * 生成唯一的Id
	   * @method
	   * @param {String} prefix 前缀
	   * @return {String} 唯一的编号
	   */
	  guid: (function() {
	    var map = {};
	    return function(prefix) {
	      prefix = prefix || 'g';
	      if (!map[prefix]) {
	        map[prefix] = 1;
	      } else {
	        map[prefix] += 1;
	      }
	      return prefix + map[prefix];
	    };
	  })(),
	  /**
	   * 数组中是否存在元素
	   * @param  {Array} arr 数组
	   * @param  {*} obj 查找的元素
	   * @return {Boolean} 是否存在
	   */
	  inArray: function(arr, value) {
	    return Util.indexOf(arr, value) !== -1;
	  },
	  /**
	   * 查找元素在数组中的位置，如果不存在则返回-1
	   * @param  {Array} arr 数组
	   * @param  {*} obj 查找的元素
	   * @return {Number} 位置
	   */
	  indexOf: function(arr, obj) {
	    var m = Array.prototype.indexOf;
	    if (m) {
	      return m.call(arr, obj);
	    }
	    var index = -1;
	
	    for (var i = 0; i < arr.length; i++) {
	      if (arr[i] === obj) {
	        index = i;
	        break;
	      }
	    }
	    return index;
	  },
	  /**
	   * 删除
	   */
	  remove: function(arr, obj) {
	    var index = Util.indexOf(arr, obj);
	    if (index !== -1) {
	      arr.splice(index, 1);
	    }
	  },
	  /**
	   * 清空
	   * @param  {Array} array 数组
	   */
	  empty: function(array) {
	    if (!(array instanceof(Array))) {
	      for (var i = array.length - 1; i >= 0; i--) {
	        delete array[i];
	      }
	    }
	    array.length = 0;
	  },
	  /**
	   * 2个数组是否等同
	   * @param  {Array} a1 数组1
	   * @param  {Array} a2 数组2
	   * @return {Boolean} 2个数组相等或者内部元素是否相等
	   */
	  equalsArray: function(a1, a2) {
	    if (a1 === a2) {
	      return true;
	    }
	    if (!a1 || !a2) {
	      return false;
	    }
	
	    if (a1.length !== a2.length) {
	      return false;
	    }
	    var rst = true;
	    for (var i = 0; i < a1.length; i++) {
	      if (a1[i] !== a2[i]) {
	        rst = false;
	        break;
	      }
	    }
	    return rst;
	  },
	  /**
	   * 封装事件，便于使用上下文this,和便于解除事件时使用
	   * @protected
	   * @param  {Object} self   对象
	   * @param  {String} action 事件名称
	   */
	  wrapBehavior: function(self, action) {
	    var method = function(e) {
	      self[action](e);
	    };
	    self['_wrap_' + action] = method;
	    return method;
	  },
	  /**
	   * 获取封装的事件
	   * @protected
	   * @param  {Object} self   对象
	   * @param  {String} action 事件名称
	   */
	  getWrapBehavior: function(self, action) {
	    return self['_wrap_' + action];
	  },
	  /**
	   * 将value的小数位长度和base保持一致
	   * @param  {Number} value 值
	   * @param  {Number} base  基准值
	   * @return {Number}  fixed后的数字
	   */
	  fixedBase: function(value, base) {
	    return tryFixed(value, base);
	  },
	  /**
	   * 返回集合对象的长度，如果是数组则返回数组的长度，如果是对象则返回对象中的属性个数
	   * @param {Array or Object} set 集合对象
	   * @return {Number} 集合对象的长度
	   */
	  length: function(set) {
	    if (Util.isArray(set)) {
	      return set.length;
	    }
	    if (Util.isObject(set)) {
	      var length = 0;
	      Util.each(set, function() {
	        length++;
	      });
	      return length;
	    }
	    return 0;
	  },
	  clone: function(obj) {
	    if (typeof obj !== 'object' || obj === null) {
	      return obj;
	    }
	    var rst;
	    if (Util.isArray(obj)) {
	      rst = [];
	      for (var i = 0, l = obj.length; i < l; i++) {
	        if (typeof obj[i] === 'object' && obj[i] != null) {
	          rst[i] = Util.clone(obj[i]);
	        } else {
	          rst[i] = obj[i];
	        }
	      }
	    } else {
	      rst = {};
	      for (var k in obj) {
	        if (typeof obj[k] === 'object' && obj[k] != null) {
	          rst[k] = Util.clone(obj[k]);
	        } else {
	          rst[k] = obj[k];
	        }
	      }
	    }
	
	    return rst;
	  },
	  simpleMix: function(dist, obj1, obj2, obj3) {
	    if (obj1) {
	      _mix(dist, obj1);
	    }
	
	    if (obj2) {
	      _mix(dist, obj2);
	    }
	
	    if (obj3) {
	      _mix(dist, obj3);
	    }
	    return dist;
	  }
	});
	
	module.exports = Util;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var gUtilBase =  __webpack_require__(172);
	
	module.exports = gUtilBase;


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview 基础工具类
	 * @author hankaiai@126.com
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var objectPrototype = Object.prototype;
	var toString = objectPrototype.toString;
	
	
	var MAX_LEVEL = 5;
	
	function deepMix(dst, src, level) {
	  level = level || 0;
	  for (var k in src) {
	    if (src.hasOwnProperty(k)) {
	      var value = src[k];
	      if (value !== null && Util.isObject(value)) {
	        if (!Util.isObject(dst[k])) {
	          dst[k] = {};
	        }
	        if (level < MAX_LEVEL) {
	          deepMix(dst[k], src[k], level + 1);
	        } else {
	          dst[k] = src[k];
	        }
	      } else if (Util.isArray(value)) {
	        //if(!Util.isArray(dst[k])){
	        dst[k] = [];
	        //}
	        dst[k] = dst[k].concat(value);
	      } else if (value !== undefined) {
	        dst[k] = src[k];
	      }
	    }
	  }
	}
	
	/**
	 * @class Util
	 * @singleton
	 * 绘图的工具类
	 */
	var Util = {
	
	  /**
	   * 替换字符串中的字段.
	   * @param {String} str 模版字符串
	   * @param {Object} o json data
	   * @param {RegExp} [regexp] 匹配字符串的正则表达式
	   */
	
	  substitute: function(str, o) {
	    if (!str || !o) {
	      return str;
	    }
	    return str.replace(/\\?\{([^{}]+)\}/g, function(match, name) {
	      if (match.charAt(0) === '\\') {
	        return match.slice(1);
	      }
	      return (o[name] === undefined) ? '' : o[name];
	    });
	  },
	  /**
	   * 使第一个字母变成大写
	   * @param  {String} s 字符串
	   * @return {String} 首字母大写后的字符串
	   */
	  ucfirst: function(s) {
	    s += '';
	    return s.charAt(0).toUpperCase() + s.substring(1);
	  },
	  /**
	   * 判断是否是字符串
	   * @return {Boolean} 是否是字符串
	   */
	  isString: function(value) {
	    return typeof value === 'string';
	  },
	  /**
	   * 判断是否数字
	   * @return {Boolean} 是否数字
	   */
	  isNumber: function(value) {
	    return typeof value === 'number';
	  },
	  /**
	   * 判断是否数字或者数字字符串，由于$.isNumberic方法会把 '123'认为数字
	   * @return {Boolean} 是否数字
	   */
	  isNumeric: function(value) {
	    return !isNaN(parseFloat(value)) && isFinite(value);
	  },
	  /**
	   * 是否是布尔类型
	   *
	   * @param {Object} value 测试的值
	   * @return {Boolean}
	   */
	  isBoolean: function(value) {
	    return typeof value === 'boolean';
	  },
	  /**
	   * 是否为函数
	   * @param  {*} fn 对象
	   * @return {Boolean}  是否函数
	   */
	  isFunction: function(fn) {
	    return typeof(fn) === 'function';
	  },
	  /**
	   * 是否数组
	   * @method
	   * @param  {*}  obj 是否数组
	   * @return {Boolean}  是否数组
	   */
	  isArray: ('isArray' in Array) ? Array.isArray : function(value) {
	    return toString.call(value) === '[object Array]';
	  },
	
	  /**
	   * 是否日期
	   * @param  {*}  value 对象
	   * @return {Boolean}  是否日期
	   */
	  isDate: function(value) {
	    return toString.call(value) === '[object Date]';
	  },
	  /**
	   * 对象是否为空
	   * @param  {*}  o 对象
	   * @return {Boolean}  是否不存在
	   */
	  isNull: function(o) {
	    return o === undefined || o === null;
	  },
	  /**
	   * 对象是否为空
	   * @param {*} o 对象
	   * @return {Boolean} 是否存在
	   */
	  notNull: function(o) {
	    return !Util.isNull(o);
	  },
	  /**
	   * 对象或数组是否为没有元素的空的
	   *
	   */
	  isBlank: function(o) {
	    if (Util.isArray(o)) {
	      return o.length === 0;
	    }
	
	    if (Util.isObject(o)) {
	      var n = 0;
	      Util.each(o, function(key, value) {
	        n++;
	      });
	      return n === 0;
	    }
	
	    return false;
	  },
	  /**
	   * 是否是javascript对象
	   * @param {Object} value The value to test
	   * @return {Boolean}
	   * @method
	   */
	  isObject: (toString.call(null) === '[object Object]') ?
	    function(value) {
	      // check ownerDocument here as well to exclude DOM nodes
	      return value !== null && value !== undefined && toString.call(value) === '[object Object]' && value.ownerDocument === undefined;
	    } : function(value) {
	      return toString.call(value) === '[object Object]';
	    },
	  /**
	   * 实现类的继承，通过父类生成子类
	   * @param  {Function} subclass
	   * @param  {Function} superclass 父类构造函数
	   * @param  {Object} overrides  子类的属性或者方法
	   * @return {Function} 返回的子类构造函数
	   * 示例:
	   *      @example
	   *      //父类
	   *      function base(){
	   *
	   *      }
	   *
	   *      function sub(){
	   *
	   *      }
	   *      //子类
	   *      Util.extend(sub,base,{
	   *          method : function(){
	   *
	   *          }
	   *      });
	   *
	   *      //或者
	   *      var sub = Util.extend(base,{});
	   */
	  extend: function(subclass, superclass, overrides, staticOverrides) {
	    //如果只提供父类构造函数，则自动生成子类构造函数
	    if (!Util.isFunction(superclass)) {
	      overrides = superclass;
	      superclass = subclass;
	      subclass = function() {};
	    }
	
	    var create = Object.create ?
	      function(proto, c) {
	        return Object.create(proto, {
	          constructor: {
	            value: c
	          }
	        });
	      } :
	      function(proto, c) {
	        function F() {}
	
	        F.prototype = proto;
	
	        var o = new F();
	        o.constructor = c;
	        return o;
	      };
	
	    var superObj = create(superclass.prototype, subclass); //new superclass(),//实例化父类作为子类的prototype
	    subclass.prototype = Util.mix(superObj, subclass.prototype); //指定子类的prototype
	    subclass.superclass = create(superclass.prototype, superclass);
	    Util.mix(superObj, overrides);
	    Util.mix(subclass, staticOverrides);
	    return subclass;
	  },
	  /**
	   * 复制到原型链上
	   * @param  {Function} c   类
	   * @param  {Object} obj 对象
	   */
	  augment: function(c) {
	
	    var args = Util.toArray(arguments);
	    for (var i = 1; i < args.length; i++) {
	      var obj = args[i];
	      if (Util.isFunction(obj)) {
	        obj = obj.prototype;
	      }
	      Util.mix(c.prototype, obj);
	    }
	  },
	  /**
	   * 转换成数组
	   * @param  {*} value 需要转换的对象
	   * @return {Array}  数组
	   */
	  toArray: function(value) {
	    if (!value || !value.length) {
	      return [];
	    }
	    return Array.prototype.slice.call(value);
	  },
	  /**
	   * 合并数据
	   * @return {Object} 将数据合并到第一个
	   */
	  mix: function() {
	    var args = Util.toArray(arguments),
	      obj = args[0];
	    if (obj === true) {
	      obj = args[1];
	      for (var i = 2; i < args.length; i++) {
	        var source = args[i];
	        deepMix(obj, source);
	      }
	    } else {
	      for (var i = 1; i < args.length; i++) {
	        var source = args[i];
	        for (var k in source) {
	          if (source.hasOwnProperty(k) && k !== 'constructor') {
	            obj[k] = source[k];
	          }
	        }
	      }
	    }
	    return obj;
	  },
	
	  /**
	   * 遍历数组或者对象
	   * @param {Object|Array} element/Object 数组中的元素或者对象的值
	   * @param {Function} func 遍历的函数 function(elememt,index){} 或者 function(value,key){}
	   */
	  each: function(elements, func) {
	    if (!elements) {
	      return;
	    }
	    if (Util.isObject(elements)) {
	      for (var k in elements) {
	        if (elements.hasOwnProperty(k)) {
	          var rst = func(elements[k], k);
	          if (rst === false) {
	            break;
	          }
	        }
	      }
	    } else if (elements.length) {
	      for (var i = 0; i < elements.length; i++) {
	        var rst = func(elements[i], i);
	        if (rst === false) {
	          break;
	        }
	      }
	    }
	  },
	  requestAnimationFrame: function(fn) {
	    var method = window.requestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) {
	      return setTimeout(fn, 16);
	    };
	
	    return method(fn);
	  },
	  cancelAnimationFrame: function(id) {
	    var method = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || function(id) {
	      return clearTimeout(id);
	    };
	    return method(id);
	  }
	};
	
	
	module.exports = Util;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var Canvas = __webpack_require__(174);
	var G = __webpack_require__(182);
	Canvas.G = G;
	Canvas.Group = G.Group;
	Canvas.Shape = {};
	Canvas.Shape.Marker = G.Marker;
	Canvas.Util = __webpack_require__(175);
	Canvas.Matrix = __webpack_require__(185);
	module.exports = Canvas;
	


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(175);
	var MouseEvent = __webpack_require__(179);
	var G = __webpack_require__(182);
	
	var Canvas = function(cfg) {
	  Canvas.superclass.constructor.call(this, cfg);
	};
	
	Canvas.CFG = {
	
	  eventEnable: true,
	  /**
	   * 像素宽度
	   * @type {Number}
	   */
	  width: null,
	  /**
	   * 像素高度
	   * @type {Number}
	   */
	  height: null,
	  /**
	   * 画布宽度
	   * @type {Number}
	   */
	  widthCanvas: null,
	  /**
	   * 画布高度
	   * @type {Number}
	   */
	  heightCanvas: null,
	  /**
	   * CSS宽
	   * @type {String}
	   */
	  widthStyle: null,
	  /**
	   * CSS高
	   * @type {String}
	   */
	  heightStyle: null,
	  /**
	   * 容器DOM
	   * @type {Object}
	   */
	  containerDOM: null,
	  /**
	   * 当前Canvas的DOM
	   * @type {Object}
	   */
	  canvasDOM: null,
	  /**
	   * 屏幕像素比
	   * @type {Number}
	   */
	  pixelRatio: null
	};
	
	Util.extend(Canvas, G.Group);
	
	Util.augment(Canvas, {
	  init: function() {
	    /**
	     * 执行父类的父类的init方法
	     */
	    Canvas.superclass.init.call(this);
	
	    /**
	     * @SET {Number} pixelRatio 屏幕像素比
	     */
	    this._setGlobalParam();
	    /**
	     * @SET {Object} containerDOM 容器
	     * @SET {Object} layer        图层
	     */
	    this._setDOM();
	    /**
	     * @SET {Number} width    Canvas 宽度
	     * @SET {Number} height   Canvas 高度
	     * @SET {Number} widthCanvas  px     宽度
	     * @SET {Number} heightCanvas px     高度
	     */
	    this._setInitSize();
	    this._setCanvas();
	    this._scale();
	    if (this.get('eventEnable')) {
	      this._registEvents();
	    }
	  },
	  _registEvents: function() {
	    var self = this;
	    var el = self.get('el');
	    var mouseEvent = new MouseEvent(self);
	
	    el.addEventListener('mouseout', function(e) {
	      mouseEvent.mouseout(e);
	    }, false);
	
	    el.addEventListener('mouseover', function(e) {
	      mouseEvent.mouseover(e);
	    }, false);
	
	    el.addEventListener('mousemove', function(e) {
	      mouseEvent.mousemove(e);
	    }, false);
	
	    el.addEventListener('mousedown', function(e) {
	      mouseEvent.mousedown(e);
	    }, false);
	
	    el.addEventListener('mouseup', function(e) {
	      mouseEvent.mouseup(e);
	    }, false);
	
	    el.addEventListener('click', function(e) {
	      mouseEvent.click(e);
	    }, false);
	
	    el.addEventListener('dblclick', function(e) {
	      mouseEvent.dblclick(e);
	    }, false);
	  },
	  // 初始化缩放
	  _scale: function() {
	    var pixelRatio = this.get('pixelRatio');
	    this.scale(pixelRatio, pixelRatio);
	  },
	  // 设置画布
	  _setCanvas: function() {
	    var canvasDOM = this.get('canvasDOM');
	    this.set('el', canvasDOM);
	    this.set('context', canvasDOM.getContext('2d'));
	    this.set('canvas', this);
	  },
	  /**
	   * 设置全局参数
	   */
	  _setGlobalParam: function() {
	    var pixelRatio = this.get('pixelRatio');
	    if (!pixelRatio) {
	      this.set('pixelRatio', Util.getRatio());
	    }
	    return;
	  },
	  /**
	   * 设置所有DOM
	   */
	  _setDOM: function() {
	    this._setContainer();
	    this._setLayer();
	  },
	  /**
	   * 设置容器DOM
	   */
	  _setContainer: function() {
	    var containerId = this.get('containerId');
	    var containerDOM = this.get('containerDOM');
	    if (!containerDOM) {
	      containerDOM = document.getElementById(containerId);
	      this.set('containerDOM', containerDOM);
	    }
	    Util.modiCSS(containerDOM, {
	      position: 'relative'
	    });
	  },
	  /**
	   * 设置图层DOM
	   */
	  _setLayer: function() {
	    var containerDOM = this.get('containerDOM');
	    var canvasId = Util.guid('canvas_');
	    if (containerDOM) {
	      var canvasDOM = Util.createDom('<canvas id="' + canvasId + '"></canvas>');
	      containerDOM.appendChild(canvasDOM);
	      this.set('canvasDOM', canvasDOM);
	    }
	  },
	  /**
	   * 设置初始画布参数
	   */
	  _setInitSize: function() {
	    if (this.get('widthStyle')) {
	      this.changeSizeByCss(this.get('widthStyle'), this.get('heightStyle'));
	    } else if (this.get('width')) {
	      this.changeSize(this.get('width'), this.get('height'));
	    }
	  },
	  /**
	   * 获取像素长度
	   */
	  _getPx: function(edge, value) {
	    var canvasDOM = this.get('canvasDOM');
	    canvasDOM.style[edge] = value;
	    var clientRect = Util.getBoundingClientRect(canvasDOM);
	    if (edge === 'width') {
	      return clientRect.right - clientRect.left;
	    } else if (edge === 'height') {
	      return clientRect.bottom - clientRect.top;
	    }
	  },
	  /**
	   * 重设画布尺寸
	   */
	  _reSize: function() {
	    var canvasDOM = this.get('canvasDOM');
	    var widthCanvas = this.get('widthCanvas');
	    var heightCanvas = this.get('heightCanvas');
	    var widthStyle = this.get('widthStyle');
	    var heightStyle = this.get('heightStyle');
	
	    canvasDOM.style.width = widthStyle;
	    canvasDOM.style.height = heightStyle;
	    canvasDOM.setAttribute('width', widthCanvas);
	    canvasDOM.setAttribute('height', heightCanvas);
	  },
	  /**
	   * 获取宽度
	   */
	  getWidth: function() {
	    var pixelRatio = this.get('pixelRatio');
	    var width = this.get('width');
	    return width * pixelRatio;
	  },
	  /**
	   * 获取高度
	   */
	  getHeight: function() {
	    var pixelRatio = this.get('pixelRatio');
	    var height = this.get('height');
	    return height * pixelRatio;
	  },
	  /**
	   * 通过css设置画布尺寸
	   * @param  {String} CSS width
	   * @param  {String} CSS height
	   */
	  changeSizeByCss: function(width, height) {
	    var pixelRatio = this.get('pixelRatio');
	    width = this._getPx('width', width);
	    height = this._getPx('height', height);
	    var widthCanvas = width * pixelRatio;
	    var heightCanvas = height * pixelRatio;
	
	    this.set('widthStyle', width);
	    this.set('heightStyle', height);
	    this.set('widthCanvas', widthCanvas);
	    this.set('heightCanvas', heightCanvas);
	    this.set('width', width);
	    this.set('height', height);
	    this._reSize();
	  },
	  /**
	   * 设置画布尺寸
	   * @param  {Number} Canvas width
	   * @param  {Number} Canvas height
	   * @param  {Number} pixelRatio height
	   */
	  changeSize: function(width, height) {
	    var pixelRatio = this.get('pixelRatio');
	    var widthCanvas = width * pixelRatio;
	    var heightCanvas = height * pixelRatio;
	
	    this.set('widthCanvas', widthCanvas);
	    this.set('heightCanvas', heightCanvas);
	    this.set('widthStyle', width + 'px');
	    this.set('heightStyle', height + 'px');
	    this.set('width', width);
	    this.set('height', height);
	    this._reSize();
	  },
	  /**
	   * 将窗口坐标转变成 canvas 坐标
	   * @param  {Number} clientX 窗口x坐标
	   * @param  {Number} clientY 窗口y坐标
	   * @return {Object} canvas坐标
	   */
	  getPointByClient: function(clientX, clientY) {
	    var el = this.get('el');
	    var bbox = el.getBoundingClientRect();
	    var width = bbox.right - bbox.left;
	    var height = bbox.bottom - bbox.top;
	    return {
	      x: (clientX - bbox.left) * (el.width / width),
	      y: (clientY - bbox.top) * (el.height / height)
	    };
	  },
	  /**
	   * 将 canvas 坐标转变成窗口坐标
	   * @param  {Number} x canvas x坐标
	   * @param  {Number} x canvas y坐标
	   * @return {Object} 窗口坐标
	   */
	  getClientByPoint: function(x, y) {
	    var el = this.get('el');
	    var bbox = el.getBoundingClientRect();
	    var width = bbox.right - bbox.left;
	    var height = bbox.bottom - bbox.top;
	    return {
	      clientX: x / (el.width / width) + bbox.left,
	      clientY: y / (el.height / height) + bbox.top
	    };
	  },
	  beforeDraw: function() {
	    var context = this.get('context');
	    var el = this.get('el');
	    context && context.clearRect(0, 0, el.width, el.height);
	  },
	  _beginDraw: function() {
	    this.setSilent('toDraw', true);
	  },
	  _endDraw: function() {
	    this.setSilent('toDraw', false);
	  },
	  draw: function() {
	    var self = this;
	    function drawInner() {
	      self.set('animateHandler', Util.requestAnimationFrame(function() {
	        self.set('animateHandler', undefined);
	        if (self.get('toDraw')) {
	          drawInner();
	        }
	      }));
	      self.beforeDraw();
	      try {
	        var context = self.get('context');
	        Canvas.superclass.draw.call(self, context);
	        // self._drawCanvas();
	      } catch (ev) { // 绘制时异常，中断重绘
	        console.warn('error in draw canvas, detail as:');
	        console.warn(ev);
	        self._endDraw();
	      }
	      self._endDraw();
	    }
	
	    if (self.get('destroyed')) {
	      return;
	    }
	    if (self.get('animateHandler')) {
	      this._beginDraw();
	    } else {
	      drawInner();
	    }
	  },
	  /**
	   * 销毁
	   */
	  destroy: function() {
	    var containerDOM = this.get('containerDOM');
	    var canvasDOM = this.get('canvasDOM');
	    if (canvasDOM && containerDOM) {
	      containerDOM.removeChild(canvasDOM);
	    }
	    Canvas.superclass.destroy.call(this);
	  }
	});
	
	module.exports = Canvas;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var MatrixUtil = __webpack_require__(176);
	var DomUtil = __webpack_require__(177);
	var PathUtil = __webpack_require__(178);
	
	Util.mix(Util, DomUtil, {
	  /**
	   * 混合方法 适用CFG模式
	   * @param  {Array} arr 数组
	   * @return {Array} map后的数组
	   */
	  mixin: function(c, mixins) {
	    var Param = c.CFG ? 'CFG' : 'ATTRS';
	    if (c && mixins) {
	      c._mixins = mixins;
	      c[Param] = c[Param] || {};
	      var temp = {};
	      Util.each(mixins, function(mixin) {
	        Util.augment(c, mixin);
	        var attrs = mixin[Param];
	        if (attrs) {
	          Util.mix(temp, attrs);
	        }
	      });
	      c[Param] = Util.mix(temp, c[Param]);
	    }
	  },
	  // 判断是否为正整数
	  isPositiveNum: function(s) {
	    var re = /^[0-9]*[1-9][0-9]*$/;
	    return re.test(s);
	  },
	  /**
	   * 获取屏幕像素比
	   */
	  getRatio: function() {
	    return window.devicePixelRatio ? window.devicePixelRatio : 2;
	  },
	  /**
	   * 获取宽度
	   * @param  {HTMLElement} el  dom节点
	   * @return {Number} 宽度
	   */
	  getWidth: function(el) {
	    var width = Util.getStyle(el, 'width');
	    if (width === 'auto') {
	      width = el.offsetWidth;
	    }
	    return parseFloat(width);
	  },
	  /**
	   * 获取高度
	   * @param  {HTMLElement} el  dom节点
	   * @return {Number} 高度
	   */
	  getHeight: function(el) {
	    var height = Util.getStyle(el, 'height');
	    if (height === 'auto') {
	      height = el.offsetHeight;
	    }
	    return parseFloat(height);
	  },
	  /**
	   * 获取外层高度
	   * @param  {HTMLElement} el  dom节点
	   * @return {Number} 高度
	   */
	  getOuterHeight: function(el) {
	    var height = Util.getHeight(el);
	    var bTop = parseFloat(Util.getStyle(el, 'borderTopWidth')) || 0;
	    var pTop = parseFloat(Util.getStyle(el, 'paddingTop'));
	    var pBottom = parseFloat(Util.getStyle(el, 'paddingBottom'));
	    var bBottom = parseFloat(Util.getStyle(el, 'borderBottomWidth')) || 0;
	    return height + bTop + bBottom + pTop + pBottom;
	  },
	  parsePathString: PathUtil.toArray,
	  path2string: PathUtil.toString,
	  path2curve: PathUtil.toCurve,
	  pathToAbsolute: PathUtil.toAbsolute,
	  catmullRom2bezier: PathUtil.catmullRomToBezier,
	  /**
	   * 将path数组转换成字符串
	   * @param  {Array} array 数组
	   * @return {String}  字符串
	   */
	  parsePathArray: function(array) {
	    return Util.path2string(array);
	  },
	  path2Absolute: function(pathArray) {
	    return Util.pathToAbsolute(pathArray);
	  }
	});
	
	Util.MatrixUtil = MatrixUtil;
	
	module.exports = Util;


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	module.exports = {
	  /**
	   * 同 G transform
	   * @param  {Object} m 矩阵
	   * @param  {Array} ts 变换数组同
	   * @return  {Object} this 回调函数
	   */
	  transform: function(m, ts) {
	    m = m.clone();
	    for (var i = 0, len = ts.length; i < len; i++) {
	      var t = ts[i];
	      switch (t[0]) {
	        case 't':
	          m.translate(t[1], t[2]);
	          break;
	        case 's':
	          m.scale(t[1], t[2]);
	          break;
	        case 'r':
	          m.rotate(t[1]);
	          break;
	        case 'm':
	          m.multiply(t[1]);
	          break;
	        default:
	          continue;
	      }
	    }
	    return m;
	  },
	  /**
	   * 基于某点缩放
	   * @param  {Object} m 矩阵
	   * @param  {Number} sx x缩放
	   * @param  {Number} sy y缩放
	   * @param  {Number} x 坐标点
	   * @param  {Number} y 坐标点
	   */
	  scale: function(m, sx, sy, x, y) {
	    m = m.clone();
	    m.translate(-1 * x, -1 * y);
	    m.scale(sx, sy);
	    m.translate(x, y);
	    return m;
	  },
	  /**
	   * 基于某点旋转
	   * @param  {Object} m 矩阵
	   * @param  {Number} r 旋转角度，用弧度表示
	   * @param  {Number} x 坐标点
	   * @param  {Number} y 坐标点
	   */
	  rotate: function(m, r, x, y) {
	    m = m.clone();
	    m.translate(-1 * x, -1 * y);
	    m.rotate(r);
	    m.translate(x, y);
	    return m;
	  },
	  /**
	   * 判断是否是3阶矩阵
	   * @param  {Object} m 矩阵
	   * @return {Boolean}
	   */
	  isMatrix3: function(m) {
	    return m.type === 'matrix3';
	  }
	};


/***/ }),
/* 177 */
/***/ (function(module, exports) {

	var table = document.createElement('table');
	var tableRow = document.createElement('tr');
	var FRAGMENTRE = /^\s*<(\w+|!)[^>]*>/;
	var CONTAINERS = {
	  'tr': document.createElement('tbody'),
	  'tbody': table,
	  'thead': table,
	  'tfoot': table,
	  'td': tableRow,
	  'th': tableRow,
	  '*': document.createElement('div')
	};
	
	module.exports = {
	  /**
	   * 计算BoundingClientRect
	   * @param  {HTMLElement} DOM 节点
	   * @return {Object}  DOM 节点
	   */
	  getBoundingClientRect: function(node) {
	    var rect = node.getBoundingClientRect();
	    var top = document.documentElement.clientTop;
	    var left = document.documentElement.clientLeft;
	    return {
	      top: rect.top - top,
	      bottom: rect.bottom - top,
	      left: rect.left - left,
	      right: rect.right - left
	    };
	  },
	  /**
	   * 获取样式
	   * @param  {Object} DOM节点
	   * @param  {String} name 样式名
	   * @return {String} 属性值
	   */
	  getStyle: function(DOM, name) {
	    if (window.getComputedStyle) {
	      return window.getComputedStyle(DOM, null)[name];
	    }
	    return DOM.currentStyle[name];
	  },
	  /**
	   * 修改CSS
	   * @param  {Object} DOM
	   * @param  {Object} CSS键值对
	   * @return {Object} DOM
	   */
	  modiCSS: function(DOM, CSS) {
	    for (var key in CSS) {
	      if (CSS.hasOwnProperty(key)) {
	        DOM.style[key] = CSS[key];
	      }
	    }
	    return DOM;
	  },
	  /**
	   * 创建DOM 节点
	   * @param  {String} str Dom 字符串
	   * @return {HTMLElement}  DOM 节点
	   */
	  createDom: function(str) {
	    var name = FRAGMENTRE.test(str) && RegExp.$1;
	    if (!(name in CONTAINERS)) {
	      name = '*';
	    }
	    var container = CONTAINERS[name];
	    str = str.replace(/(^\s*)|(\s*$)/g, '');
	    container.innerHTML = '' + str;
	    return container.childNodes[0];
	  },
	  /**
	   * TODO: 应该移除的
	   * 添加时间监听器
	   * @param  {object} DOM对象
	   * @param  {Object} 事件名
	   * @param  {funtion} 回调函数
	   * @return {Object} 返回对象
	   */
	  addEventListener: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  }
	};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Useful things from Adobe's Snap.svg adopted to the library needs
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	/*
	 * Paths
	 */
	
	var spaces = "\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029";
	var pathCommand = new RegExp("([a-z])[" + spaces + ",]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[" + spaces + "]*,?[" + spaces + "]*)+)", "ig");
	var pathValues = new RegExp("(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[" + spaces + "]*,?[" + spaces + "]*", "ig");
	
	// Parses given path string into an array of arrays of path segments
	var parsePathString = function(pathString) {
	  if (!pathString) {
	    return null;
	  }
	
	  if (typeof pathString === typeof []) {
	    return pathString;
	  } else {
	    var paramCounts = {
	        a: 7,
	        c: 6,
	        o: 2,
	        h: 1,
	        l: 2,
	        m: 2,
	        r: 4,
	        q: 4,
	        s: 4,
	        t: 2,
	        v: 1,
	        u: 3,
	        z: 0
	      },
	      data = [];
	
	    String(pathString).replace(pathCommand, function(a, b, c) {
	      var params = [],
	        name = b.toLowerCase();
	      c.replace(pathValues, function(a, b) {
	        b && params.push(+b);
	      });
	      if (name == "m" && params.length > 2) {
	        data.push([b].concat(params.splice(0, 2)));
	        name = "l";
	        b = b == "m" ? "l" : "L";
	      }
	      if (name == "o" && params.length == 1) {
	        data.push([b, params[0]]);
	      }
	      if (name == "r") {
	        data.push([b].concat(params));
	      } else
	        while (params.length >= paramCounts[name]) {
	          data.push([b].concat(params.splice(0, paramCounts[name])));
	          if (!paramCounts[name]) {
	            break;
	          }
	        }
	    });
	
	    return data;
	  }
	};
	
	
	// http://schepers.cc/getting-to-the-point
	var catmullRom2bezier = function(crp, z) {
	  var d = [];
	  for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
	    var p = [{
	      x: +crp[i - 2],
	      y: +crp[i - 1]
	    }, {
	      x: +crp[i],
	      y: +crp[i + 1]
	    }, {
	      x: +crp[i + 2],
	      y: +crp[i + 3]
	    }, {
	      x: +crp[i + 4],
	      y: +crp[i + 5]
	    }];
	    if (z) {
	      if (!i) {
	        p[0] = {
	          x: +crp[iLen - 2],
	          y: +crp[iLen - 1]
	        };
	      } else if (iLen - 4 == i) {
	        p[3] = {
	          x: +crp[0],
	          y: +crp[1]
	        };
	      } else if (iLen - 2 == i) {
	        p[2] = {
	          x: +crp[0],
	          y: +crp[1]
	        };
	        p[3] = {
	          x: +crp[2],
	          y: +crp[3]
	        };
	      }
	    } else {
	      if (iLen - 4 == i) {
	        p[3] = p[2];
	      } else if (!i) {
	        p[0] = {
	          x: +crp[i],
	          y: +crp[i + 1]
	        };
	      }
	    }
	    d.push(["C",
	      (-p[0].x + 6 * p[1].x + p[2].x) / 6,
	      (-p[0].y + 6 * p[1].y + p[2].y) / 6,
	      (p[1].x + 6 * p[2].x - p[3].x) / 6,
	      (p[1].y + 6 * p[2].y - p[3].y) / 6,
	      p[2].x,
	      p[2].y
	    ]);
	  }
	
	  return d;
	
	};
	
	var ellipsePath = function(x, y, rx, ry, a) {
	  if (a == null && ry == null) {
	    ry = rx;
	  }
	  x = +x;
	  y = +y;
	  rx = +rx;
	  ry = +ry;
	  if (a != null) {
	    var rad = Math.PI / 180,
	      x1 = x + rx * Math.cos(-ry * rad),
	      x2 = x + rx * Math.cos(-a * rad),
	      y1 = y + rx * Math.sin(-ry * rad),
	      y2 = y + rx * Math.sin(-a * rad),
	      res = [
	        ["M", x1, y1],
	        ["A", rx, rx, 0, +(a - ry > 180), 0, x2, y2]
	      ];
	  } else {
	    res = [
	      ["M", x, y],
	      ["m", 0, -ry],
	      ["a", rx, ry, 0, 1, 1, 0, 2 * ry],
	      ["a", rx, ry, 0, 1, 1, 0, -2 * ry],
	      ["z"]
	    ];
	  }
	  return res;
	};
	
	var pathToAbsolute = function(pathArray) {
	  pathArray = parsePathString(pathArray);
	
	  if (!pathArray || !pathArray.length) {
	    return [
	      ["M", 0, 0]
	    ];
	  }
	  var res = [],
	    x = 0,
	    y = 0,
	    mx = 0,
	    my = 0,
	    start = 0,
	    pa0;
	  if (pathArray[0][0] == "M") {
	    x = +pathArray[0][1];
	    y = +pathArray[0][2];
	    mx = x;
	    my = y;
	    start++;
	    res[0] = ["M", x, y];
	  }
	  var crz = pathArray.length == 3 &&
	    pathArray[0][0] == "M" &&
	    pathArray[1][0].toUpperCase() == "R" &&
	    pathArray[2][0].toUpperCase() == "Z";
	  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
	    res.push(r = []);
	    pa = pathArray[i];
	    pa0 = pa[0];
	    if (pa0 != pa0.toUpperCase()) {
	      r[0] = pa0.toUpperCase();
	      switch (r[0]) {
	        case "A":
	          r[1] = pa[1];
	          r[2] = pa[2];
	          r[3] = pa[3];
	          r[4] = pa[4];
	          r[5] = pa[5];
	          r[6] = +pa[6] + x;
	          r[7] = +pa[7] + y;
	          break;
	        case "V":
	          r[1] = +pa[1] + y;
	          break;
	        case "H":
	          r[1] = +pa[1] + x;
	          break;
	        case "R":
	          var dots = [x, y].concat(pa.slice(1));
	          for (var j = 2, jj = dots.length; j < jj; j++) {
	            dots[j] = +dots[j] + x;
	            dots[++j] = +dots[j] + y;
	          }
	          res.pop();
	          res = res.concat(catmullRom2bezier(dots, crz));
	          break;
	        case "O":
	          res.pop();
	          dots = ellipsePath(x, y, pa[1], pa[2]);
	          dots.push(dots[0]);
	          res = res.concat(dots);
	          break;
	        case "U":
	          res.pop();
	          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	          r = ["U"].concat(res[res.length - 1].slice(-2));
	          break;
	        case "M":
	          mx = +pa[1] + x;
	          my = +pa[2] + y;
	        default:
	          for (j = 1, jj = pa.length; j < jj; j++) {
	            r[j] = +pa[j] + ((j % 2) ? x : y);
	          }
	      }
	    } else if (pa0 == "R") {
	      dots = [x, y].concat(pa.slice(1));
	      res.pop();
	      res = res.concat(catmullRom2bezier(dots, crz));
	      r = ["R"].concat(pa.slice(-2));
	    } else if (pa0 == "O") {
	      res.pop();
	      dots = ellipsePath(x, y, pa[1], pa[2]);
	      dots.push(dots[0]);
	      res = res.concat(dots);
	    } else if (pa0 == "U") {
	      res.pop();
	      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	      r = ["U"].concat(res[res.length - 1].slice(-2));
	    } else {
	      for (var k = 0, kk = pa.length; k < kk; k++) {
	        r[k] = pa[k];
	      }
	    }
	    pa0 = pa0.toUpperCase();
	    if (pa0 != "O") {
	      switch (r[0]) {
	        case "Z":
	          x = +mx;
	          y = +my;
	          break;
	        case "H":
	          x = r[1];
	          break;
	        case "V":
	          y = r[1];
	          break;
	        case "M":
	          mx = r[r.length - 2];
	          my = r[r.length - 1];
	        default:
	          x = r[r.length - 2];
	          y = r[r.length - 1];
	      }
	    }
	  }
	
	  return res;
	};
	
	
	var l2c = function(x1, y1, x2, y2) {
	  return [x1, y1, x2, y2, x2, y2];
	};
	var q2c = function(x1, y1, ax, ay, x2, y2) {
	  var _13 = 1 / 3,
	    _23 = 2 / 3;
	  return [
	    _13 * x1 + _23 * ax,
	    _13 * y1 + _23 * ay,
	    _13 * x2 + _23 * ax,
	    _13 * y2 + _23 * ay,
	    x2,
	    y2
	  ];
	};
	var a2c = function(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
	  // for more information of where this math came from visit:
	  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
	  if(rx === ry) rx += 1;
	  var _120 = Math.PI * 120 / 180,
	    rad = Math.PI / 180 * (+angle || 0),
	    res = [],
	    xy,
	    rotate = function(x, y, rad) {
	      var X = x * Math.cos(rad) - y * Math.sin(rad),
	        Y = x * Math.sin(rad) + y * Math.cos(rad);
	      return {
	        x: X,
	        y: Y
	      };
	    };
	  if (!recursive) {
	    xy = rotate(x1, y1, -rad);
	    x1 = xy.x;
	    y1 = xy.y;
	    xy = rotate(x2, y2, -rad);
	    x2 = xy.x;
	    y2 = xy.y;
	    if(x1 === x2 && y1 === y2) { // 若弧的起始点和终点重叠则错开一点
	      x2 += 1;
	      y2 += 1;
	    }
	    var cos = Math.cos(Math.PI / 180 * angle),
	      sin = Math.sin(Math.PI / 180 * angle),
	      x = (x1 - x2) / 2,
	      y = (y1 - y2) / 2;
	    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
	    if (h > 1) {
	      h = Math.sqrt(h);
	      rx = h * rx;
	      ry = h * ry;
	    }
	    var rx2 = rx * rx,
	      ry2 = ry * ry,
	      k = (large_arc_flag == sweep_flag ? -1 : 1) *
	      Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
	      cx = k * rx * y / ry + (x1 + x2) / 2,
	      cy = k * -ry * x / rx + (y1 + y2) / 2,
	      f1 = Math.asin(((y1 - cy) / ry).toFixed(9)),
	      f2 = Math.asin(((y2 - cy) / ry).toFixed(9));
	
	    f1 = x1 < cx ? Math.PI - f1 : f1;
	    f2 = x2 < cx ? Math.PI - f2 : f2;
	    f1 < 0 && (f1 = Math.PI * 2 + f1);
	    f2 < 0 && (f2 = Math.PI * 2 + f2);
	    if (sweep_flag && f1 > f2) {
	      f1 = f1 - Math.PI * 2;
	    }
	    if (!sweep_flag && f2 > f1) {
	      f2 = f2 - Math.PI * 2;
	    }
	  } else {
	    f1 = recursive[0];
	    f2 = recursive[1];
	    cx = recursive[2];
	    cy = recursive[3];
	  }
	  var df = f2 - f1;
	  if (Math.abs(df) > _120) {
	    var f2old = f2,
	      x2old = x2,
	      y2old = y2;
	    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
	    x2 = cx + rx * Math.cos(f2);
	    y2 = cy + ry * Math.sin(f2);
	    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
	  }
	  df = f2 - f1;
	  var c1 = Math.cos(f1),
	    s1 = Math.sin(f1),
	    c2 = Math.cos(f2),
	    s2 = Math.sin(f2),
	    t = Math.tan(df / 4),
	    hx = 4 / 3 * rx * t,
	    hy = 4 / 3 * ry * t,
	    m1 = [x1, y1],
	    m2 = [x1 + hx * s1, y1 - hy * c1],
	    m3 = [x2 + hx * s2, y2 - hy * c2],
	    m4 = [x2, y2];
	  m2[0] = 2 * m1[0] - m2[0];
	  m2[1] = 2 * m1[1] - m2[1];
	  if (recursive) {
	    return [m2, m3, m4].concat(res);
	  } else {
	    res = [m2, m3, m4].concat(res).join().split(",");
	    var newres = [];
	    for (var i = 0, ii = res.length; i < ii; i++) {
	      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
	    }
	    return newres;
	  }
	};
	
	var path2curve = function(path, path2) {
	  var p = pathToAbsolute(path),
	    p2 = path2 && pathToAbsolute(path2),
	    attrs = {
	      x: 0,
	      y: 0,
	      bx: 0,
	      by: 0,
	      X: 0,
	      Y: 0,
	      qx: null,
	      qy: null
	    },
	    attrs2 = {
	      x: 0,
	      y: 0,
	      bx: 0,
	      by: 0,
	      X: 0,
	      Y: 0,
	      qx: null,
	      qy: null
	    },
	    processPath = function(path, d, pcom) {
	      var nx, ny;
	      if (!path) {
	        return ["C", d.x, d.y, d.x, d.y, d.x, d.y];
	      }!(path[0] in {
	        T: 1,
	        Q: 1
	      }) && (d.qx = d.qy = null);
	      switch (path[0]) {
	        case "M":
	          d.X = path[1];
	          d.Y = path[2];
	          break;
	        case "A":
	          path = ["C"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
	          break;
	        case "S":
	          if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.
	            nx = d.x * 2 - d.bx; // And reflect the previous
	            ny = d.y * 2 - d.by; // command's control point relative to the current point.
	          } else { // or some else or nothing
	            nx = d.x;
	            ny = d.y;
	          }
	          path = ["C", nx, ny].concat(path.slice(1));
	          break;
	        case "T":
	          if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.
	            d.qx = d.x * 2 - d.qx; // And make a reflection similar
	            d.qy = d.y * 2 - d.qy; // to case "S".
	          } else { // or something else or nothing
	            d.qx = d.x;
	            d.qy = d.y;
	          }
	          path = ["C"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
	          break;
	        case "Q":
	          d.qx = path[1];
	          d.qy = path[2];
	          path = ["C"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
	          break;
	        case "L":
	          path = ["C"].concat(l2c(d.x, d.y, path[1], path[2]));
	          break;
	        case "H":
	          path = ["C"].concat(l2c(d.x, d.y, path[1], d.y));
	          break;
	        case "V":
	          path = ["C"].concat(l2c(d.x, d.y, d.x, path[1]));
	          break;
	        case "Z":
	          path = ["C"].concat(l2c(d.x, d.y, d.X, d.Y));
	          break;
	      }
	      return path;
	    },
	    fixArc = function(pp, i) {
	      if (pp[i].length > 7) {
	        pp[i].shift();
	        var pi = pp[i];
	        while (pi.length) {
	          pcoms1[i] = "A"; // if created multiple C:s, their original seg is saved
	          p2 && (pcoms2[i] = "A"); // the same as above
	          pp.splice(i++, 0, ["C"].concat(pi.splice(0, 6)));
	        }
	        pp.splice(i, 1);
	        ii = Math.max(p.length, p2 && p2.length || 0);
	      }
	    },
	    fixM = function(path1, path2, a1, a2, i) {
	      if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {
	        path2.splice(i, 0, ["M", a2.x, a2.y]);
	        a1.bx = 0;
	        a1.by = 0;
	        a1.x = path1[i][1];
	        a1.y = path1[i][2];
	        ii = Math.max(p.length, p2 && p2.length || 0);
	      }
	    },
	    pcoms1 = [], // path commands of original path p
	    pcoms2 = [], // path commands of original path p2
	    pfirst = "", // temporary holder for original path command
	    pcom = ""; // holder for previous path command of original path
	  for (var i = 0, ii = Math.max(p.length, p2 && p2.length || 0); i < ii; i++) {
	    p[i] && (pfirst = p[i][0]); // save current path command
	
	    if (pfirst != "C") { // C is not saved yet, because it may be result of conversion
	      pcoms1[i] = pfirst; // Save current path command
	      i && (pcom = pcoms1[i - 1]); // Get previous path command pcom
	    }
	    p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath
	
	    if (pcoms1[i] != "A" && pfirst == "C") pcoms1[i] = "C"; // A is the only command
	    // which may produce multiple C:s
	    // so we have to make sure that C is also C in original path
	
	    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1
	
	    if (p2) { // the same procedures is done to p2
	      p2[i] && (pfirst = p2[i][0]);
	      if (pfirst != "C") {
	        pcoms2[i] = pfirst;
	        i && (pcom = pcoms2[i - 1]);
	      }
	      p2[i] = processPath(p2[i], attrs2, pcom);
	
	      if (pcoms2[i] != "A" && pfirst == "C") {
	        pcoms2[i] = "C";
	      }
	
	      fixArc(p2, i);
	    }
	    fixM(p, p2, attrs, attrs2, i);
	    fixM(p2, p, attrs2, attrs, i);
	    var seg = p[i],
	      seg2 = p2 && p2[i],
	      seglen = seg.length,
	      seg2len = p2 && seg2.length;
	    attrs.x = seg[seglen - 2];
	    attrs.y = seg[seglen - 1];
	    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
	    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
	    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
	    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
	    attrs2.x = p2 && seg2[seg2len - 2];
	    attrs2.y = p2 && seg2[seg2len - 1];
	  }
	
	  return p2 ? [p, p2] : p;
	};
	
	var box = function(x, y, width, height) {
	  if (x == null) {
	    x = y = width = height = 0;
	  }
	  if (y == null) {
	    y = x.y;
	    width = x.width;
	    height = x.height;
	    x = x.x;
	  }
	  return {
	    x: x,
	    y: y,
	    w: width,
	    h: height,
	    cx: x + width / 2,
	    cy: y + height / 2
	  };
	};
	
	var p2s = /,?([a-z]),?/gi;
	var path2string = function(path) {
	  return path.join(',').replace(p2s, "$1");
	};
	
	var PathUtil = {
	  toArray: parsePathString,
	  toString: path2string,
	  toCurve: path2curve,
	  toAbsolute: pathToAbsolute,
	  catmullRomToBezier: catmullRom2bezier
	};
	
	module.exports = PathUtil;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview mouse 事件
	 * @author hankaiai@126.com
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Event = __webpack_require__(180);
	
	var MouseEvent = function(canvas) {
	  this.canvas = canvas;
	  this.el = canvas.get('el');
	  this.current = null;
	  this.pre = null;
	};
	
	Util.augment(MouseEvent, {
	  tryTrigger: function(element, event) {
	    if (element.__listeners) {
	      element.trigger(event);
	    } else {
	      return;
	    }
	  },
	  getCurrent: function(e) {
	    var canvas = this.canvas;
	    var point = canvas.getPointByClient(e.clientX, e.clientY);
	    this.point = point;
	    this.pre = this.current;
	    this.current = canvas.getShape(point.x, point.y);
	  },
	  mousemove: function(e) {
	    this.getCurrent(e);
	    var point = this.point;
	    var canvas = this.canvas;
	    if (canvas.has('canvas-mousemove')) {
	      var canvasmousemove = new Event('canvas-mousemove', e, true, true);
	      canvasmousemove.x = point.x;
	      canvasmousemove.y = point.y;
	      canvasmousemove.clientX = e.clientX;
	      canvasmousemove.clientY = e.clientY;
	      canvasmousemove.currentTarget = canvas;
	      this.tryTrigger(canvas, canvasmousemove);
	    }
	
	    if (this.pre && this.pre !== this.current) {
	      var mouseleave = new Event('mouseleave', e, true, true);
	      mouseleave.x = point.x;
	      mouseleave.y = point.y;
	      mouseleave.clientX = e.clientX;
	      mouseleave.clientY = e.clientY;
	      mouseleave.currentTarget = this.pre;
	      mouseleave.target = this.pre;
	      this.tryTrigger(this.pre, mouseleave);
	    }
	
	    if (this.current) {
	      var mousemove = new Event('mousemove', e, true, true);
	      mousemove.x = point.x;
	      mousemove.y = point.y;
	      mousemove.clientX = e.clientX;
	      mousemove.clientY = e.clientY;
	      mousemove.currentTarget = this.current;
	      mousemove.target = this.current;
	      this.tryTrigger(this.current, mousemove);
	
	      if (this.pre !== this.current) {
	        var mouseenter = new Event('mouseenter', e, true, true);
	        mouseenter.x = point.x;
	        mouseenter.y = point.y;
	        mouseenter.clientX = e.clientX;
	        mouseenter.clientY = e.clientY;
	        mouseenter.currentTarget = this.current;
	        mouseenter.target = this.current;
	        this.tryTrigger(this.current, mouseenter);
	      }
	    }
	  },
	  mousedown: function(e) {
	    var point = this.point;
	    var canvas = this.canvas;
	
	    if (canvas.has('canvas-mousedown')) {
	      var canvasmousedown = new Event('canvas-mousedown', e, true, true);
	      canvasmousedown.x = point.x;
	      canvasmousedown.y = point.y;
	      canvasmousedown.clientX = e.clientX;
	      canvasmousedown.clientY = e.clientY;
	      canvasmousedown.currentTarget = canvas;
	      this.tryTrigger(canvas, canvasmousedown);
	    }
	
	
	    if (this.current) {
	      var mousedown = new Event('mousedown', e, true, true);
	      mousedown.x = point.x;
	      mousedown.y = point.y;
	      mousedown.clientX = e.clientX;
	      mousedown.clientY = e.clientY;
	      mousedown.currentTarget = this.current;
	      mousedown.target = this.current;
	      this.tryTrigger(this.current, mousedown);
	    }
	  },
	  mouseup: function(e) {
	    var point = this.point;
	    var canvas = this.canvas;
	    if (canvas.has('canvas-mouseup')) {
	      var canvasmouseup = new Event('canvas-mouseup', e, true, true);
	      canvasmouseup.x = point.x;
	      canvasmouseup.y = point.y;
	      canvasmouseup.clientX = e.clientX;
	      canvasmouseup.clientY = e.clientY;
	      canvasmouseup.currentTarget = canvas;
	      this.tryTrigger(canvas, canvasmouseup);
	    }
	    if (this.current) {
	      var mouseup = new Event('mouseup', e, true, true);
	      mouseup.x = point.x;
	      mouseup.y = point.y;
	      mouseup.clientX = e.clientX;
	      mouseup.clientY = e.clientY;
	      mouseup.currentTarget = this.current;
	      mouseup.target = this.current;
	      this.tryTrigger(this.current, mouseup);
	    }
	  },
	  click: function(e) {
	    this.getCurrent(e);
	    var point = this.point;
	    var canvas = this.canvas;
	    if (canvas.has('canvas-click')) {
	      var canvasclick = new Event('canvas-click', e, true, true);
	      canvasclick.x = point.x;
	      canvasclick.y = point.y;
	      canvasclick.clientX = e.clientX;
	      canvasclick.clientY = e.clientY;
	      canvasclick.currentTarget = canvas;
	      this.tryTrigger(canvas, canvasclick);
	    }
	
	    if (this.current) {
	      var click = new Event('click', e, true, true);
	      click.x = point.x;
	      click.y = point.y;
	      click.clientX = e.clientX;
	      click.clientY = e.clientY;
	      click.currentTarget = this.current;
	      click.target = this.current;
	      this.tryTrigger(this.current, click);
	    }
	  },
	  dblclick: function(e) {
	    var point = this.point;
	    var canvas = this.canvas;
	
	    if (canvas.has('canvas-dblclick')) {
	      var canvasdblclick = new Event('canvas-dblclick', e, true, true);
	      canvasdblclick.x = point.x;
	      canvasdblclick.y = point.y;
	      canvasdblclick.clientX = e.clientX;
	      canvasdblclick.clientY = e.clientY;
	      canvasdblclick.currentTarget = canvas;
	      this.tryTrigger(canvas, canvasdblclick);
	    }
	
	
	    if (this.current) {
	      var dblclick = new Event('dblclick', e, true, true);
	      dblclick.x = point.x;
	      dblclick.y = point.y;
	      dblclick.clientX = e.clientX;
	      dblclick.clientY = e.clientY;
	      dblclick.currentTarget = this.current;
	      dblclick.target = this.current;
	      this.tryTrigger(this.current, dblclick);
	    }
	  },
	  mouseout: function(e) {
	    var point = this.point;
	    var canvas = this.canvas;
	
	    var canvasmouseleave = new Event('canvas-mouseleave', e, true, true);
	    canvasmouseleave.x = point.x;
	    canvasmouseleave.y = point.y;
	    canvasmouseleave.currentTarget = canvas;
	    this.tryTrigger(canvas, canvasmouseleave);
	  },
	  mouseover: function(e) {
	    var canvas = this.canvas;
	
	    var canvasmouseenter = new Event('canvas-mouseenter', e, true, true);
	    canvasmouseenter.currentTarget = canvas;
	    this.tryTrigger(canvas, canvasmouseenter);
	  }
	});
	
	module.exports = MouseEvent;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var Event = __webpack_require__(181);
	
	module.exports = Event;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 事件基类
	 # @author hankaiai@126.com 韩凯
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	var Event = function(type, event, bubbles, cancelable) {
	  this.type = type;  // 事件类型
	  this.target = null; // 目标
	  this.currentTarget = null; // 当前目标
	  this.bubbles = bubbles; // 冒泡
	  this.cancelable = cancelable; // 是否能够阻止
	  this.timeStamp = (new Date()).getTime(); // 时间戳
	  this.defaultPrevented = false; // 阻止默认
	  this.propagationStopped = false; // 阻止冒泡
	  this.removed= false; //是否被移除
	  this.event = event; // 触发的原生事件
	};
	
	
	Util.augment(Event, {
	  preventDefault: function() {
	    this.defaultPrevented = this.cancelable && true;
	  },
	  stopPropagation: function() {
	    this.propagationStopped = true;
	  },
	  remove: function() {
	    this.remove = true;
	  },
	  clone: function() {
	    return Util.clone(this);
	  },
	  toString: function() {
	    return '[Event (type=' + this.type + ')]';
	  }
	});
	
	module.exports = Event;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var Common = __webpack_require__(183);
	
	var G = {
	  Group: __webpack_require__(184),
	  Shape: __webpack_require__(222),
	  Rect: __webpack_require__(221),
	  Circle: __webpack_require__(228),
	  Ellipse: __webpack_require__(229),
	  Path: __webpack_require__(230),
	  Text: __webpack_require__(234),
	  Line: __webpack_require__(235),
	  Image: __webpack_require__(236),
	  Polygon: __webpack_require__(237),
	  Polyline: __webpack_require__(238),
	  Arc: __webpack_require__(239),
	  Fan: __webpack_require__(240),
	  Cubic: __webpack_require__(241),
	  Quadratic: __webpack_require__(242),
	  Marker: __webpack_require__(243),
	  debug: function(debug) {
	    Common.debug = debug;
	  }
	};
	
	module.exports = G;


/***/ }),
/* 183 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview 公共类
	 * @author hankaiai@126.com
	 */
	module.exports = {
	  prefix: 'g',
	  backupContext: document.createElement('canvas').getContext('2d'),
	  debug: false,
	  warn: function() {}
	};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Vector3 = __webpack_require__(185).Vector3;
	var Element = __webpack_require__(191);
	var Shape = __webpack_require__(220);
	var SHAPE_MAP = {}; // 缓存图形类型
	
	function find(children, x, y) {
	  var rst;
	  for (var i = children.length - 1; i >= 0; i--) {
	    var child = children[i];
	    if (child.__cfg.visible && child.__cfg.capture) {
	      if (child.isGroup) {
	        rst = child.getShape(x, y);
	      } else if (child.isHit(x, y)) {
	        rst = child;
	      }
	    }
	    if (rst) {
	      break;
	    }
	  }
	  return rst;
	}
	
	var Group = function(cfg) {
	  Group.superclass.constructor.call(this, cfg);
	  this.set('children', []);
	
	  this._beforeRenderUI();
	  this._renderUI();
	  this._bindUI();
	};
	
	/**
	 * 混合原型链CFG
	 * @param   {Object} c 函数对象
	 */
	function initClassCfgs(c) {
	  if (c.__cfg || c === Group) {
	    return;
	  }
	  var superCon = c.superclass.constructor;
	  if (superCon && !superCon.__cfg) {
	    initClassCfgs(superCon);
	  }
	  c.__cfg = {};
	
	  Util.mix(true, c.__cfg, superCon.__cfg);
	  Util.mix(true, c.__cfg, c.CFG);
	}
	
	Util.extend(Group, Element);
	
	Util.augment(Group, {
	  isGroup: true,
	  canFill: true,
	  canStroke: true,
	  getDefaultCfg: function() {
	    initClassCfgs(this.constructor);
	    return Util.mix(true, {}, this.constructor.__cfg);
	  },
	  // 渲染组件前
	  _beforeRenderUI: function() {},
	  // 渲染组件
	  _renderUI: function() {},
	  // 绑定事件
	  _bindUI: function() {},
	  /** 添加图形
	   * @param  {String} type
	   * @param  {Object} cfg
	   * @return {Object} rst 图形
	   */
	  addShape: function(type, cfg) {
	    var canvas = this.get('canvas');
	    var rst;
	    cfg = cfg || {};
	    var shapeType = SHAPE_MAP[type];
	    if (!shapeType) {
	      shapeType = Util.ucfirst(type);
	      SHAPE_MAP[type] = shapeType;
	    }
	    cfg.canvas = canvas;
	    cfg.type = type;
	    rst = new Shape[shapeType](cfg);
	    this.add(rst);
	    return rst;
	  },
	  /** 添加图组
	   * @param  {Function|Object|undefined} param 图组类
	   * @param  {Object} cfg 配置项
	   * @return {Object} rst 图组
	   */
	  addGroup: function(param, cfg) {
	    var canvas = this.get('canvas');
	    var rst;
	    cfg = Util.mix({}, cfg);
	    if (Util.isFunction(param)) {
	      if (cfg) {
	        cfg.canvas = canvas;
	        cfg.parent = this;
	        rst = new param(cfg);
	      } else {
	        rst = new param({
	          canvas: canvas,
	          parent: this
	        });
	      }
	      this.add(rst);
	    } else if (Util.isObject(param)) {
	      param.canvas = canvas;
	      rst = new Group(param);
	      this.add(rst);
	    } else if (param === undefined) {
	      rst = new Group();
	      this.add(rst);
	    } else {
	      return false;
	    }
	    return rst;
	  },
	  /** 绘制背景
	   * @param  {Array} padding 内边距
	   * @param  {Attrs} attrs 图形属性
	   * @param  {Shape} backShape 背景图形
	   */
	  renderBack: function(padding, attrs) {
	    var backShape = this.get('backShape');
	    var innerBox = this.getBBox();
	    var parent = this.get('parent'); // getParent
	    Util.mix(attrs, {
	      x: innerBox.minX - padding[3],
	      y: innerBox.minY - padding[0],
	      width: innerBox.width + padding[1] + padding[3],
	      height: innerBox.height + padding[0] + padding[2]
	    });
	    if (backShape) {
	      backShape.attr(attrs);
	    } else {
	      backShape = parent.addShape('rect', {
	        zIndex: -1,
	        attrs: attrs
	      });
	    }
	    this.set('backShape', backShape);
	    parent.sort();
	    return backShape;
	  },
	  /**
	   * 从组中移除 shape 或者 group
	   * @param {Object} item 图形或者分组, 如果item存在则移除item
	   */
	  removeChild: function(item, destroy) {
	    if (arguments.length >= 2) {
	      if (this.contain(item)) {
	        item.remove(destroy);
	      }
	    } else {
	      if (arguments.length === 1) {
	        if (Util.isBoolean(item)) {
	          destroy = item;
	        } else {
	          if (this.contain(item)) {
	            item.remove(true);
	          }
	          return this;
	        }
	      }
	      if (arguments.length === 0) {
	        destroy = true;
	      }
	
	      Group.superclass.remove.call(this, destroy);
	    }
	    return this;
	  },
	  /**
	   * 向组中添加shape或者group
	   * @param {Object} item 图形或者分组
	   */
	  add: function(items) {
	    var self = this;
	    var children = self.get('children');
	    if (Util.isArray(items)) {
	      Util.each(items, function(item) {
	        var parent = item.get('parent');
	        if (parent) {
	          parent.removeChild(item, false);
	        }
	        self.__setEvn(item);
	      });
	      children.push.apply(children, items);
	    } else {
	      var item = items;
	      var parent = item.get('parent');
	      if (parent) {
	        parent.removeChild(item, false);
	      }
	      self.__setEvn(item);
	      children.push(item);
	    }
	    return self;
	  },
	  /**
	   * 当前 group 是否拥有某个 item
	   **/
	  contain: function(item) {
	    var children = this.get('children');
	    return children.indexOf(item) > -1;
	  },
	  /** 获取第N个子元素
	   */
	  getChildByIndex: function(index) {
	    var children = this.get('children');
	    return children[index];
	  },
	  getFirst: function() {
	    return this.getChildByIndex(0);
	  },
	  getLast: function() {
	    var lastIndex = this.get('children').length - 1;
	    return this.getChildByIndex(lastIndex);
	  },
	  /**
	   * 设置子元素及子孙元素的环境属性
	   * @private
	   */
	  __setEvn: function(item) {
	    var self = this;
	    item.__cfg.parent = self;
	    item.__cfg.context = self.__cfg.context;
	    item.__cfg.canvas = self.__cfg.canvas;
	    var clip = item.__attrs.clip;
	    if (clip) {
	      clip.setSilent('parent', self);
	      clip.setSilent('context', self.get('context'));
	    }
	    var children = item.__cfg.children;
	    if (children) {
	      Util.each(children, function(child) {
	        item.__setEvn(child);
	      });
	    }
	  },
	  getBBox: function() {
	    var self = this;
	    var minX = Infinity;
	    var maxX = -Infinity;
	    var minY = Infinity;
	    var maxY = -Infinity;
	    var children = self.get('children');
	    Util.each(children, function(child) {
	      if (child.get('visible')) {
	        var box = child.getBBox();
	        if (!box) {
	          return true;
	        }
	        var leftTop = new Vector3(box.minX, box.minY, 1);
	        var leftBottom = new Vector3(box.minX, box.maxY, 1);
	        var rightTop = new Vector3(box.maxX, box.minY, 1);
	        var rightBottom = new Vector3(box.maxX, box.maxY, 1);
	
	        child.apply(leftTop);
	        child.apply(leftBottom);
	        child.apply(rightTop);
	        child.apply(rightBottom);
	
	        var boxMinX = Math.min(leftTop.x, leftBottom.x, rightTop.x, rightBottom.x);
	        var boxMaxX = Math.max(leftTop.x, leftBottom.x, rightTop.x, rightBottom.x);
	        var boxMinY = Math.min(leftTop.y, leftBottom.y, rightTop.y, rightBottom.y);
	        var boxMaxY = Math.max(leftTop.y, leftBottom.y, rightTop.y, rightBottom.y);
	
	        if (boxMinX < minX) {
	          minX = boxMinX;
	        }
	
	        if (boxMaxX > maxX) {
	          maxX = boxMaxX;
	        }
	
	        if (boxMinY < minY) {
	          minY = boxMinY;
	        }
	
	        if (boxMaxY > maxY) {
	          maxY = boxMaxY;
	        }
	      }
	    });
	    var box = {
	      minX: minX,
	      minY: minY,
	      maxX: maxX,
	      maxY: maxY
	    };
	    box.x = box.minX;
	    box.y = box.minY;
	    box.width = box.maxX - box.minX;
	    box.height = box.maxY - box.minY;
	    return box;
	  },
	  /**
	   * @protected
	   * 绘制内部图形
	   */
	  drawInner: function(context) {
	    var children = this.get('children');
	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	      child.draw(context);
	    }
	    return this;
	  },
	  /**
	   * 获得子元素的个数
	   */
	  getCount: function() {
	    return this.get('children').length;
	  },
	  /**
	   * 将子元素按照zIndex排序
	   */
	  sort: function() {
	    var children = this.get('children');
	    children.sort(function(obj1, obj2) {
	      return obj1.get('zIndex') - obj2.get('zIndex');
	    });
	    return this;
	  },
	  find: function(id) {
	    return this.findBy(function(item) {
	      return item.get('id') === id;
	    });
	  },
	  /**
	   * 根据查找函数查找分组或者图形
	   * @param  {Function} fn 匹配函数
	   * @return {Canvas.Base} 分组或者图形
	   */
	  findBy: function(fn) {
	    var children = this.get('children');
	    var rst = null;
	
	    Util.each(children, function(item) {
	      if (fn(item)) {
	        rst = item;
	      } else if (item.findBy) {
	        rst = item.findBy(fn);
	      }
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  },
	  findAllBy: function(fn) {
	    var children = this.get('children');
	    var rst = [];
	    var childRst = [];
	    Util.each(children, function(item) {
	      if (fn(item)) {
	        rst.push(item);
	      }
	      if (item.findAllBy) {
	        childRst = item.findAllBy(fn);
	        rst = rst.concat(childRst);
	      }
	    });
	    return rst;
	  },
	  /**
	   * 根据x，y轴坐标获取对应的图形
	   * @param  {Number} x x坐标
	   * @param  {Number} y y坐标
	   * @return {Object}  最上面的图形
	   */
	  getShape: function(x, y) {
	    var self = this;
	    var clip = self.__attrs.clip;
	    var children = self.__cfg.children;
	    var rst;
	    if (clip) {
	      if (clip.inside(x, y)) {
	        rst = find(children, x, y);
	      }
	    } else {
	      rst = find(children, x, y);
	    }
	    return rst;
	  },
	  // 连同一起清理子元素的矩阵
	  clearTotalMatrix: function() {
	    var m = this.get('totalMatrix');
	    if (m) {
	      this.setSilent('totalMatrix', null);
	      var children = this.__cfg.children;
	      for (var i = 0; i < children.length; i++) {
	        var child = children[i];
	        child.clearTotalMatrix();
	      }
	    }
	  },
	  /**
	   * 清除容器内的图形或者分组
	   */
	  clear: function() {
	    var children = this.get('children');
	
	    while (children.length !== 0) {
	      children[children.length - 1].remove();
	    }
	    return this;
	  },
	  /**
	   * 析构函数
	   */
	  destroy: function() {
	    if (this.get('destroyed')) {
	      return;
	    }
	    this.clear();
	    Group.superclass.destroy.call(this);
	  }
	});
	
	module.exports = Group;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var gMatrix = {
	  Matrix3: __webpack_require__(186),
	  Vector2: __webpack_require__(189),
	  Vector3: __webpack_require__(190)
	};
	
	module.exports = gMatrix;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Matrix3 3阶矩阵表示
	 * @author hankaiai@126.com
	 * @ignore
	 */
	
	 "use strict";
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	
	function Matrix3() {
	  this.elements = [
	    1, 0, 0,
	    0, 1, 0,
	    0, 0, 1
	  ];
	}
	
	Matrix3.multiply = function(m1, m2) {
	  var te = m1.elements;
	  var me = m2.elements;
	  var m = new Matrix3();
	  return m.set(
	    te[0] * me[0] + te[3] * me[1] + te[6] * me[2], te[0] * me[3] + te[3] * me[4] + te[6] * me[5], te[0] * me[6] + te[3] * me[7] + te[6] * me[8],
	    te[1] * me[0] + te[4] * me[1] + te[7] * me[2], te[1] * me[3] + te[4] * me[4] + te[7] * me[5], te[1] * me[6] + te[4] * me[7] + te[7] * me[8],
	    te[2] * me[0] + te[5] * me[1] + te[8] * me[2], te[2] * me[3] + te[5] * me[4] + te[8] * me[5], te[2] * me[6] + te[5] * me[7] + te[8] * me[8]
	  );
	};
	
	Matrix3.equal = function(m1, m2) {
	  var m1e = m1.elements;
	  var m2e = m2.elements;
	  var res = true;
	  for (var i = 0, l = m1e.length; i < l; i ++) {
	    if (!gMath.equal(m1e[i], m2e[i])) {
	      res = false;
	      break;
	    }
	  }
	  return res;
	};
	
	Util.augment(Matrix3, {
	  type: 'matrix3',
	  set: function(
	    n11, n12, n13,
	    n21, n22, n23,
	    n31, n32, n33
	  ) {
	    var te = this.elements;
	
	    te[0] = n11; te[3] = n12; te[6] = n13;
	    te[1] = n21; te[4] = n22; te[7] = n23;
	    te[2] = n31; te[5] = n32; te[8] = n33;
	
	    return this;
	  },
	  get: function(i, j) {
	    i --;
	    j --;
	    return this.elements[j * 3 + i];
	  },
	  identity: function() {
	    return this.set(
	      1, 0, 0,
	      0, 1, 0,
	      0, 0, 1
	    );
	  },
	  multiplyScalar: function(s) {
	    var te = this.elements;
	
	    te[0] *= s; te[3] *= s; te[6] *= s;
	    te[1] *= s; te[4] *= s; te[7] *= s;
	    te[2] *= s; te[5] *= s; te[8] *= s;
	
	    return this;
	  },
	  det: function() {
	    var te = this.elements;
	    var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
	        d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
	        g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
	
	    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
	  },
	  inverse: function(throwOnInvertible) {
	    return this.copy(this.getInverse(throwOnInvertible));;
	  },
	  getInverse: function(throwOnInvertible) {
	    var det = this.det();
	    if (det === 0) {
	      if (throwOnInvertible) {
	        throw 'matrix exception: get inverse matrix with 0 det';
	      } else {
	        console.warn('matrix cannot inverse');
	        return new Matrix3();
	      }
	    }
	    var te = this.elements;
	    var a = te[ 0 ], b = te[ 3 ], c = te[ 6 ],
	        d = te[ 1 ], e = te[ 4 ], f = te[ 7 ],
	        g = te[ 2 ], h = te[ 5 ], i = te[ 8 ];
	    var inverse = new Matrix3();
	    inverse.set(
	        te[4] * te[8] - te[7] * te[5] , -(te[3] * te[8] - te[6] * te[5]),   te[3] * te[7] - te[6] * te[4] ,
	      -(te[1] * te[8] - te[7] * te[2]),   te[0] * te[8] - te[6] * te[2] , -(te[0] * te[7] - te[6] * te[1]),
	        te[1] * te[5] - te[4] * te[2] , -(te[0] * te[5] - te[3] * te[2]),   te[0] * te[4] - te[3] * te[1]
	    );
	    inverse.multiplyScalar(1 / det);
	    return inverse;
	  },
	  transpose: function() {
	    var tmp, te = this.elements;
	    tmp = te[1]; te[1] = te[3]; te[3] = tmp;
	    tmp = te[2]; te[2] = te[6]; te[6] = tmp;
	    tmp = te[5]; te[5] = te[7]; te[7] = tmp;
	    return this;
	  },
	  multiply: function(m) {
	    return this.copy(Matrix3.multiply(this, m));;
	  },
	  translate: function(x, y) {
	    var t = new Matrix3();
	    t.set(
	      1, 0, x,
	      0, 1, y,
	      0, 0, 1
	    );
	    return this.copy(Matrix3.multiply(t, this));
	  },
	  rotate: function(rad) {
	    var r = new Matrix3();
	    r.set(
	      Math.cos(rad), -Math.sin(rad), 0,
	      Math.sin(rad), Math.cos(rad), 0,
	      0, 0, 1
	    );
	    return this.copy(Matrix3.multiply(r, this));
	  },
	  scale: function(s1, s2) {
	    var s = new Matrix3();
	    s.set(
	      s1, 0, 0,
	      0, s2, 0,
	      0, 0,  1
	    );
	    return this.copy(Matrix3.multiply(s, this));
	  },
	  equal: function(m) {
	    return Matrix3.equal(this, m);
	  },
	  copy: function(m) {
	    var me = m.elements;
	    var te = this.elements;
	    for (var i = 0, l = me.length; i < l; i ++) {
	      te[i] = me[i];
	    }
	    return this;
	  },
	  clone: function() {
	    var m = new Matrix3();
	    var me = m.elements;
	    var te = this.elements;
	    for (var i = 0, l = te.length; i < l; i ++) {
	      me[i] = te[i];
	    }
	    return m;
	  },
	  to2DObject: function() {
	    var te = this.elements;
	    return {
	      a: te[0],
	      b: te[1],
	      c: te[3],
	      d: te[4],
	      e: te[6],
	      f: te[7]
	    };
	  },
	  from2DObject: function(obj) {
	    var te = this.elements;
	    te[0] = obj.a;
	    te[1] = obj.b;
	    te[3] = obj.c;
	    te[4] = obj.d;
	    te[6] = obj.e;
	    te[7] = obj.f;
	    return this;
	  }
	});
	
	
	module.exports = Matrix3;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var gMath = __webpack_require__(188);
	
	module.exports = gMath;


/***/ }),
/* 188 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview gMath 基础数学工具类
	 * @author hankaiai@126.com
	 * @author dxq613@gmail.com
	 * @ignore
	 */
	
	"use strict";
	
	//取小于当前值的
	function arrayFloor(values,value){
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	
	
	  var pre = values[0];
	
	  if(value < values[0]){
	    return NaN;
	  }
	
	  if(value >= values[length - 1]){
	    return values[length - 1];
	  }
	  for (var i = 1; i < values.length; i++) {
	    if(value < values[i]){
	      break;
	    }
	    pre = values[i];
	  }
	
	  return pre;
	}
	//大于当前值的第一个
	function arrayCeiling(values,value){
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	  var pre = values[0],
	      rst;
	  if(value > values[length - 1]){
	    return NaN;
	  }
	  if(value < values[0]){
	    return values[0];
	  }
	
	  for (var i = 1; i < values.length; i++) {
	    if(value <= values[i]){
	      rst = values[i];
	      break;
	    }
	    pre = values[i];
	  }
	
	  return rst;
	}
	
	
	var gMath = {
	  /**
	   * 常亮：数据的精度，小于这个精度认为是0
	   **/
	  PRECISION: 0.00001,
	  /**
	   * 判断两个数是否相等
	   * @param {Number} a 数
	   * @param {Number} b 数
	   * @return {Boolean} 是否相等
	   **/
	  equal: function(a, b) {
	    return (Math.abs((a - b)) < gMath.PRECISION);
	  },
	  /**
	   * 把a夹在min，max中间, 低于min的返回min，高于max的返回max，否则返回自身
	   * @param {Number} a 数
	   * @param {Number} min 下限
	   * @param {Number} max 上限
	   **/
	  clamp: function(a, min, max) {
	    if (a < min) {
	      return min;
	    } else if (a > max){
	      return max;
	    } else {
	      return a;
	    }
	  },
	  /**
	   * 获取逼近的值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的值
	   */
	  snapTo : function(values, value){
	    // 这里假定values是升序排列
	    var floorVal = arrayFloor(values,value),
	      ceilingVal = arrayCeiling(values,value);
	    if(isNaN(floorVal) || isNaN(ceilingVal)){
	      if(values[0] >= value){
	        return values[0];
	      }
	      var last = values[values.length -1];
	      if(last <= value){
	        return last;
	      }
	    }
	
	
	    if(Math.abs(value - floorVal) < Math.abs(ceilingVal - value)){
	      return floorVal;
	    }
	    return ceilingVal;
	  },
	  /**
	   * 获取逼近的最小值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最小值
	   */
	  snapFloor : function(values,value){
	    // 这里假定values是升序排列
	    return arrayFloor(values,value);
	  },
	  /**
	   * 获取逼近的最大值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最大值
	   */
	  snapCeiling : function(values,value){
	    // 这里假定values是升序排列
	    return arrayCeiling(values,value);
	  },
	  /**
	   * 获取角度对应的弧度
	   * @param {Number} degree 角度
	   * @return {Number} 弧度
	   **/
	  degreeToRad: function(degree) {
	    return Math.PI / 180 * degree;
	  },
	  /**
	   * 获取弧度对应的角度
	   * @param {Number} rad 弧度
	   * @return {Number} 角度
	   **/
	  radToDegree: function(rad) {
	    return 180 / Math.PI * rad;
	  },
	  /**
	   * 广义取模运算
	   * @param {Number} v 被取模的值
	   * @param {Number} m 模
	   */
	  mod: function(n, m) {
	    return ( ( n % m ) + m ) % m;
	  }
	};
	
	
	
	module.exports = gMath;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Vector2 2维向量类
	 * @author hankaiai@126.com
	 * @ignore
	 */
	
	 "use strict";
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	
	function Vector2(x, y) {
	  if (arguments.length === 1) {
	    var arr = x;
	    x = arr[0];
	    y = arr[1];
	  }
	  this.x = x || 0;
	  this.y = y || 0;
	}
	
	// v1 v2 和
	Vector2.add = function(v1, v2) {
	  return new Vector2(v1.x + v2.x, v1.y + v2.y);
	};
	
	// v1 v2 差
	Vector2.sub = function(v1, v2) {
	  return new Vector2(v1.x - v2.x, v1.y - v2.y);
	};
	
	// v1 v2 插值
	Vector2.lerp = function(v1, v2, alpha) {
	  return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);
	};
	
	// v1 v2 夹角
	Vector2.angle = function(v1, v2) {
	  var theta = v1.dot(v2) / (v1.length() * v2.length());
	
	  return Math.acos(gMath.clamp(theta, -1, 1));
	};
	
	// v1 到 v2 夹角的方向
	Vector2.direction = function(v1, v2) { // >= 0 顺时针 < 0 逆时针
	  return v1.x * v2.y - v2.x * v1.y;
	};
	
	
	
	Util.augment(Vector2, {
	  type: 'vector2',
	  set: function(x, y) {
	    this.x = x;
	    this.y = y;
	    return this;
	  },
	  setComponent: function(index, value) {
	    switch(index) {
	      case 0: this.x = value; return this;
	      case 1: this.y = value; return this;
	      default: throw new Error('the index out of range:' + index);
	    }
	  },
	  getComponent: function(index) {
	    switch(index) {
	      case 0: return this.x;
	      case 1: return this.y;
	      default: throw new Error('the index out of range:' + index);
	    }
	  },
	  copy: function(v) {
	    this.x = v.x;
	    this.y = v.y;
	    return this;
	  },
	  add: function(v) {
	    return this.copy(Vector2.add(this, v));
	  },
	  sub: function(v) {
	    return this.copy(Vector2.sub(this, v));
	  },
	  subBy: function(v) {
	    return this.copy(Vector2.sub(v, this));
	  },
	  multiplyScaler: function(s) {
	    this.x *= s;
	    this.y *= s;
	    return this;
	  },
	  divideScaler: function(s) {
	    if (s !== 0) {
	      var invScaler = 1 / s;
	      this.x *= invScaler;
	      this.y *= invScaler;
	    } else {
	      this.x = 0;
	      this.y = 0;
	    }
	    return this;
	  },
	  min: function(v) {
	    if (this.x > v.x) {
	      this.x = v.x;
	    }
	
	    if (this.y > v.y) {
	      this.y = v.y;
	    }
	    return this;
	  },
	  max: function(v) {
	    if (this.x < v.x) {
	      this.x = v.x;
	    }
	
	    if (this.y < v.y) {
	      this.y = v.y;
	    }
	
	    return this;
	  },
	  clamp: function(min, max) {
	    if (this.x < min.x) {
	      this.x = min.x;
	    } else if (this.x > max.x){
	      this.x = max.x;
	    }
	
	    if (this.y < min.y) {
	      this.y = min.y;
	    } else if (this.y > max.y) {
	      this.y = max.y;
	    }
	
	    return this;
	  },
	  clampScale: (function() {
	    var min, max;
	    return function (minVal, maxVal) {
	      if (min === undefined) {
	        min = new Vector2();
	        max = new Vector2();
	      }
	      min.set(minVal, minVal);
	      max.set(maxVal, maxVal);
	
	      return this.clamp(min, max);
	    };
	  })(),
	  floor: function() {
	    this.x = Math.floor(this.x);
	    this.y = Math.floor(this.y);
	    return this;
	  },
	  ceil: function() {
	    this.x = Math.ceil(this.x);
	    this.y = Math.ceil(this.y);
	    return this;
	  },
	  round: function() {
	    this.x = Math.round(this.x);
	    this.y = Math.round(this.y);
	    return this;
	  },
	  roundToZero: function() {
	    this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
	    this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
	    return this;
	  },
	  negate: function() {
	    this.x = - this.x;
	    this.y = - this.y;
	    return this;
	  },
	  dot: function(v) {
	    return this.x * v.x + this.y * v.y;
	  },
	  lengthSq: function() {
	    return this.x * this.x + this.y * this.y;
	  },
	  length: function() {
	    return Math.sqrt(this.lengthSq());
	  },
	  normalize: function() {
	    return this.divideScaler(this.length());
	  },
	  distanceToSquared: function(v) {
	    var dx = this.x - v.x, dy = this.y - v.y;
	    return dx * dx + dy * dy;
	  },
	  distanceTo: function(v) {
	    return Math.sqrt(this.distanceToSquared(v));
	  },
	  angleTo: function(v, direct) {
	    var angle = this.angle(v);
	    var angleLargeThanPi = Vector2.direction(this, v) >= 0;
	    if (direct) {
	      if (angleLargeThanPi) {
	        return Math.PI * 2 - angle;
	      } else {
	        return angle;
	      }
	    } else {
	      if (angleLargeThanPi) {
	        return angle;
	      } else {
	        return Math.PI * 2 - angle;
	      }
	    }
	  },
	  vertical: function(left) {
	    if (left) {
	      return new Vector2(this.y, -this.x);
	    } else {
	      return new Vector2(-this.y, this.x);
	    }
	  },
	  angle: function(v) {
	    return Vector2.angle(this, v);
	  },
	  setLength: function(l) {
	    var oldLength = this.length();
	    if (oldLength !== 0 && l !== oldLength) {
	      this.multiplyScaler(l / oldLength);
	    }
	    return this;
	  },
	  isZero: function() {
	    return this.x === 0 && this.y === 0;
	  },
	  lerp: function(v, alpha) {
	    return this.copy(Vector2.lerp(this, v, alpha));
	  },
	  equal: function(v) {
	    return gMath.equal(this.x, v.x) && gMath.equal(this.y, v.y);
	  },
	  clone: function() {
	    return new Vector2(this.x, this.y);
	  },
	  rotate: function(angle) {
	    var nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));
	    var ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));
	
	    this.x = nx;
	    this.y = ny;
	
	    return this;
	  }
	});
	
	module.exports = Vector2;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Vector3 3维向量类
	 * @author hankaiai@126.com
	 * @ignore
	 */
	
	 "use strict";
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	
	
	
	function Vector3(x, y, z) {
	  if (arguments.length === 1) {
	    if (Util.isArray(x)) {
	      var arr = x;
	      x = arr[0];
	      y = arr[1];
	      z = arr[2];
	    } else if (x.type === 'vector2') {
	      var v = x;
	      x = v.x;
	      y = v.y;
	      z = 1;
	    }
	  }
	  this.x = x || 0;
	  this.y = y || 0;
	  this.z = z || 0;
	}
	
	Vector3.add = function(v1, v2) {
	  return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
	};
	
	Vector3.sub = function(v1, v2) {
	  return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
	};
	
	Vector3.lerp = function(v1, v2, alpha) {
	  return new Vector3(
	    v1.x + (v2.x - v1.x) * alpha,
	    v1.y + (v2.y - v1.y) * alpha,
	    v1.z + (v2.z - v1.z) * alpha
	  );
	};
	
	Vector3.cross = function(v, w) {
	  var vx = v.x, vy = v.y, vz = v.z;
	  var wx = w.x, wy = w.y, wz = w.z;
	  return new Vector3(
	    vy * wz - vz * wy,
	    vz * wx - vx * wz,
	    vx * wy - vy * wx
	  );
	};
	
	Vector3.angle = function(v1, v2) {
	  var theta = v1.dot(v2) / (v1.length() * v2.length());
	
	  return Math.acos(gMath.clamp(theta, -1, 1));
	};
	
	Util.augment(Vector3, {
	  type: 'vector3',
	  set: function(x, y, z) {
	    this.x = x;
	    this.y = y;
	    this.z = z;
	    return this;
	  },
	  setComponent: function(index, value) {
	    switch(index) {
	      case 0: this.x = value; return this;
	      case 1: this.y = value; return this;
	      case 2: this.z = value; return this;
	      default: throw new Error('index is out of range:' + index);
	    }
	  },
	  getComponent: function(index) {
	    switch(index) {
	      case 0: return this.x;
	      case 1: return this.y;
	      case 2: return this.z;
	      default: throw new Error('index is out of range:' + index);
	    }
	  },
	  add: function(v) {
	    return this.copy(Vector3.add(this, v));
	  },
	  sub: function(v) {
	    return this.copy(Vector3.sub(this, v));
	  },
	  subBy: function(v) {
	    return this.copy(Vector3.sub(v, this));
	  },
	  multiplyScaler: function(s) {
	    this.x *= s;
	    this.y *= s;
	    this.z *= s;
	    return this;
	  },
	  divideScaler: function(s) {
	    if (s !== 0) {
	      var invs = 1 / s;
	      this.x *= invs;
	      this.y *= invs;
	      this.z *= invs;
	    } else {
	      this.x = 0;
	      this.y = 0;
	      this.z = 0;
	    }
	    return this;
	  },
	  min: function(v) {
	    if (this.x > v.x) {
	      this.x = v.x;
	    }
	    if (this.y > v.y) {
	      this.y = v.y;
	    }
	    if (this.z > v.z) {
	      this.z = v.z;
	    }
	    return this;
	  },
	  max: function(v) {
	    if (this.x < v.x) {
	      this.x = v.x;
	    }
	    if (this.y < v.y) {
	      this.y = v.y;
	    }
	    if (this.z < v.z) {
	      this.z = v.z;
	    }
	    return this;
	  },
	  clamp: function(min, max) {
	    if (this.x < min.x) {
	      this.x = min.x;
	    } else if (this.x > max.x){
	      this.x = max.x;
	    }
	
	    if (this.y < min.y) {
	      this.y = min.y;
	    } else if (this.y > max.y){
	      this.y = max.y;
	    }
	
	    if (this.z < min.z) {
	      this.z = min.z;
	    } else if (this.z > max.z) {
	      this.z = max.z;
	    }
	    return this;
	  },
	  clampScale: function() {
	    var min, max;
	    return function(minVal, maxVal) {
	      if (min === undefined) {
	        min = new Vector3();
	        max = new Vector3();
	      }
	      min.set(minVal, minVal, minVal);
	      max.set(maxVal, maxVal, maxVal);
	
	      return this.clamp(min, max);
	    };
	  }(),
	  floor: function() {
	    this.x = Math.floor(this.x);
	    this.y = Math.floor(this.y);
	    this.z = Math.floor(this.z);
	    return this;
	  },
	  ceil: function() {
	    this.x = Math.ceil(this.x);
	    this.y = Math.ceil(this.y);
	    this.z = Math.ceil(this.z);
	    return this;
	  },
	  round: function() {
	    this.x = Math.round(this.x);
	    this.y = Math.round(this.y);
	    this.z = Math.round(this.z);
	    return this;
	  },
	  roundToZero: function() {
	    this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
	    this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
	    this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);
	    return this;
	  },
	  negate: function() {
	    this.x = - this.x;
	    this.y = - this.y;
	    this.z = - this.z;
	
	    return this;
	  },
	  dot: function(v) {
	    return this.x * v.x + this.y * v.y + this.z * v.z;
	  },
	  lengthSq: function() {
	    return this.x * this.x + this.y * this.y + this.z * this.z;
	  },
	  length: function() {
	    return Math.sqrt(this.lengthSq());
	  },
	  lengthManhattan: function() {
	    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
	  },
	  normalize: function() {
	    return this.divideScaler(this.length());
	  },
	  setLength: function(l) {
	    var oldLength = this.length();
	
	    if (oldLength !== 0 && l !== oldLength) {
	        this.multiplyScaler(l / oldLength);
	    }
	    return this;
	  },
	  lerp: function(v, alpha) {
	    return this.copy(Vector3.lerp(this, v, alpha));
	  },
	  cross: function(v) {
	    return this.copy(Vector3.cross(this, v));
	  },
	  // angleTo: function(v) {
	  //   var theta = this.dot(v) / (this.length() * v.length());
	
	  //   return Math.acos(gMath.clamp(theta, -1, 1));
	  // },
	  angle: function(v) {
	    return Vector3.angle(this, v);
	  },
	  distanceToSquared: function(v) {
	    var dx = this.x - v.x;
	    var dy = this.y - v.y;
	    var dz = this.z - v.z;
	
	    return dx * dx + dy * dy + dz * dz;
	  },
	  distanceTo: function(v) {
	    return Math.sqrt(this.distanceToSquared(v));
	  },
	  applyMatrix: function(m) {
	    var me = m.elements;
	    var x = me[0] * this.x + me[3] * this.y + me[6] * this.z;
	    var y = me[1] * this.x + me[4] * this.y + me[7] * this.z;
	    var z = me[2] * this.x + me[5] * this.y + me[8] * this.z;
	
	    this.x = x;
	    this.y = y;
	    this.z = z;
	    return this;
	  },
	  copy: function(v) {
	    this.x = v.x;
	    this.y = v.y;
	    this.z = v.z !== undefined ? v.z : 1;
	    return this;
	  },
	  equal: function(v) {
	    return gMath.equal(this.x, v.x)
	        && gMath.equal(this.y, v.y)
	        && gMath.equal(this.z, v.z);
	  },
	  clone: function() {
	    return new Vector3(this.x, this.y, this.z);
	  }
	});
	
	module.exports = Vector3;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 图形控件或者分组的基类
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Attributes = __webpack_require__(192);
	var Transform = __webpack_require__(193);
	var Animate = __webpack_require__(194);
	var Format = __webpack_require__(217);
	// var Vector3 = require('@ali/g-matrix').Vector3;
	var EventDispatcher = __webpack_require__(218);
	
	var SHAPE_ATTRS = [
	  'fillStyle',
	  'font',
	  'globalAlpha',
	  'lineCap',
	  'lineWidth',
	  'lineJoin',
	  'miterLimit',
	  'shadowBlur',
	  'shadowColor',
	  'shadowOffsetX',
	  'shadowOffsetY',
	  'strokeStyle',
	  'textAlign',
	  'textBaseline',
	  'lineDash'
	];
	
	var Element = function(cfg) {
	  this.__cfg = {
	    zIndex: 0,
	    capture: true,
	    visible: true,
	    destroyed: false
	  }; // 配置存放地
	
	  Util.simpleMix(this.__cfg, this.getDefaultCfg(), cfg); // Element.CFG不合并，提升性能 合并默认配置，用户配置->继承默认配置->Element默认配置
	  this.initAttrs(this.__cfg.attrs); // 初始化绘图属性
	  this.initTransform(); // 初始化变换
	  this.initEventDispatcher();
	  this.init(); // 类型初始化
	};
	
	Element.CFG = {
	  /**
	   * 唯一标示
	   * @type {Number}
	   */
	  id: null,
	  /**
	   * Z轴的层叠关系，Z值越大离用户越近
	   * @type {Number}
	   */
	  zIndex: 0,
	  /**
	   * Canvas对象
	   * @type: {Object}
	   */
	  canvas: null,
	  /**
	   * 父元素指针
	   * @type {Object}
	   */
	  parent: null,
	  /**
	   * 用来设置当前对象是否能被捕捉
	   * true 能
	   * false 不能
	   * 对象默认是都可以被捕捉的, 当capture为false时，group.getShape(x, y)方法无法获得该元素
	   * 通过将不必要捕捉的元素的该属性设置成false, 来提高捕捉性能
	   **/
	  capture: true,
	  /**
	   * 画布的上下文
	   * @type {Object}
	   */
	  context: null,
	  /**
	   * 是否显示
	   * @type {Boolean}
	   */
	  visible: true,
	  /**
	   * 是否被销毁
	   * @type: {Boolean}
	   */
	  destroyed: false
	};
	
	Util.augment(Element, Attributes, EventDispatcher, Transform, Animate, {
	  /**
	   * @protected
	   * 初始化
	   */
	  init: function() {
	    this.setSilent('animable', true);
	    var attrs = this.__attrs;
	    if (attrs && attrs.rotate) {
	      this.rotateAtStart(attrs.rotate);
	    }
	  },
	  getParent: function() {
	    return this.get('parent');
	  },
	  /**
	   * 获取默认的配置信息
	   * @protected
	   * @return {Object} 默认的属性
	   */
	  getDefaultCfg: function() {
	    return {};
	  },
	  /**
	   * 设置属性信息
	   * @protected
	   */
	  set: function(name, value) {
	    var m = '__set' + Util.ucfirst(name);
	
	    if (this[m]) {
	      value = this[m](value);
	    }
	    this.__cfg[name] = value;
	    return this;
	  },
	  /**
	   * 设置属性信息,不进行特殊处理
	   * @protected
	   */
	  setSilent: function(name, value) {
	    this.__cfg[name] = value;
	  },
	  /**
	   * 获取属性信息
	   * @protected
	   */
	  get: function(name) {
	    return this.__cfg[name];
	  },
	  /**
	   * 绘制自身
	   */
	  draw: function(context) {
	    if (this.get('destroyed')) {
	      return;
	    }
	    if (this.get('visible')) {
	      this.setContext(context);
	      this.drawInner(context);
	      this.restoreContext(context);
	    }
	  },
	  setContext: function(context) {
	    var clip = this.__attrs.clip;
	    context.save();
	    if (clip) {
	      // context.save();
	      clip.resetTransform(context);
	      clip.createPath(context);
	      context.clip();
	      // context.restore();
	    }
	    this.resetContext(context);
	    this.resetTransform(context);
	  },
	  restoreContext: function(context) {
	    context.restore();
	  },
	  /**
	   * @protected
	   * 设置绘图属性
	   */
	  resetContext: function(context) {
	    var elAttrs = this.__attrs;
	    // var canvas = this.get('canvas');
	    if (!this.isGroup) {
	      // canvas.registShape(this); // 快速拾取方案暂时不执行
	      for (var k in elAttrs) {
	        if (SHAPE_ATTRS.indexOf(k) > -1) { // 非canvas属性不附加
	          var v = elAttrs[k];
	          if (k === 'fillStyle') {
	            v = Format.parseStyle(v, this);
	          }
	          if (k === 'strokeStyle') {
	            v = Format.parseStyle(v, this);
	          }
	          if (k === 'lineDash' && context.setLineDash) {
	            if (Util.isArray(v)) {
	              context.setLineDash(v);
	            } else if (Util.isString(v)) {
	              context.setLineDash(v.split(' '));
	            }
	          } else {
	            context[k] = v;
	          }
	        }
	      }
	    }
	  },
	  /**
	   * @protected
	   * 绘制内部图形
	   */
	  drawInner: function(/* context */) {
	
	  },
	  show: function() {
	    this.set('visible', true);
	    return this;
	  },
	  hide: function() {
	    this.set('visible', false);
	    return this;
	  },
	  /**
	   * 删除自己, 从父元素中删除自己
	   * @param  {Boolean} [destroy=true]
	   */
	  remove: function(destroy) {
	    if (destroy === undefined) {
	      destroy = true;
	    }
	
	    if (this.get('parent')) {
	      var parent = this.get('parent');
	      var children = parent.get('children');
	      Util.remove(children, this);
	      // this.set('parent', null);
	    }
	
	    if (destroy) {
	      this.destroy();
	    }
	
	    return this;
	  },
	  destroy: function() {
	    var destroyed = this.get('destroyed');
	
	    if (destroyed) {
	      return;
	    }
	    this.__cfg = {};
	    this.__attrs = null;
	    this.__listeners = null;
	    this.__m = null;
	    this.set('destroyed', true);
	  },
	  __setZIndex: function(zIndex) {
	    this.__cfg.zIndex = zIndex;
	    if (Util.notNull(this.get('parent'))) {
	      this.get('parent').sort();
	    }
	    return zIndex;
	  },
	  __setAttrs: function(attrs) {
	    this.attr(attrs);
	    return attrs;
	  },
	  clone: function() {
	    return Util.clone(this);
	  },
	  getBBox: function() {
	    return {
	      minX: 0,
	      maxX: 0,
	      minY: 0,
	      maxY: 0
	    };
	  }
	});
	
	module.exports = Element;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Vector3 = __webpack_require__(185).Vector3;
	
	var ALIAS_ATTRS = ['strokeStyle', 'fillStyle', 'globalAlpha'];
	var CLIP_SHAPES = ['circle', 'ellipse', 'fan', 'polygon', 'rect', 'path'];
	var CAPITALIZED_ATTRS_MAP = {
	  r: 'R',
	  opacity: 'Opacity',
	  lineWidth: 'LineWidth',
	  clip: 'Clip',
	  stroke: 'Stroke',
	  fill: 'Fill',
	  strokeOpacity: 'Stroke',
	  fillOpacity: 'Fill',
	  x: 'X',
	  y: 'Y',
	  rx: 'Rx',
	  ry: 'Ry',
	  re: 'Re',
	  rs: 'Rs',
	  width: 'Width',
	  height: 'Height',
	  img: 'Img',
	  x1: 'X1',
	  x2: 'X2',
	  y1: 'Y1',
	  y2: 'Y2',
	  points: 'Points',
	  p1: 'P1',
	  p2: 'P2',
	  p3: 'P3',
	  p4: 'P4',
	  text: 'Text',
	  radius: 'Radius',
	  textAlign: 'TextAlign',
	  textBaseline: 'TextBaseline',
	  font: 'Font',
	  fontSize: 'FontSize',
	  fontStyle: 'FontStyle',
	  fontVariant: 'FontVariant',
	  fontWeight: 'FontWeight',
	  fontFamily: 'FontFamily',
	  clockwise: 'Clockwise',
	  startAngle: 'StartAngle',
	  endAngle: 'EndAngle',
	  path: 'Path'
	};
	var ALIAS_ATTRS_MAP = {
	  stroke: 'strokeStyle',
	  fill: 'fillStyle',
	  opacity: 'globalAlpha'
	};
	
	module.exports = {
	  canFill: false,
	  canStroke: false,
	  initAttrs: function(attrs) {
	    this.__attrs = {
	      opacity: 1,
	      fillOpacity: 1,
	      strokeOpacity: 1
	    };
	    this.attr(Util.simpleMix(this.getDefaultAttrs(), attrs));
	    return this;
	  },
	  getDefaultAttrs: function() {
	    return {};
	  },
	  /**
	   * 设置或者设置属性，有以下 4 种情形：
	   *   - name 不存在, 则返回属性集合
	   *   - name 为字符串，value 为空，获取属性值
	   *   - name 为字符串，value 不为空，设置属性值，返回 this
	   *   - name 为键值对，value 为空，设置属性值
	   *
	   * @param  {String | Object} name  属性名
	   * @param  {*} value 属性值
	   * @return {*} 属性值
	   */
	  attr: function(name, value) {
	    var self = this;
	    if (arguments.length === 0) {
	      return self.__attrs;
	    }
	
	    if (Util.isObject(name)) {
	      for (var k in name) {
	        if (ALIAS_ATTRS.indexOf(k) === -1) {
	          var v = name[k];
	          self._setAttr(k, v);
	        }
	      }
	      if (self.__afterSetAttrAll) {
	        self.__afterSetAttrAll(name);
	      }
	      // self.setSilent('box', null);
	      self.clearBBox();
	      return self;
	    }
	    if (arguments.length === 2) {
	      if (self._setAttr(name, value) !== false) {
	        var m = '__afterSetAttr' + CAPITALIZED_ATTRS_MAP[name];
	        if (self[m]) {
	          self[m](value);
	        }
	      }
	      // self.setSilent('box', null);
	      self.clearBBox();
	      return self;
	    }
	    return self._getAttr(name);
	  },
	  clearBBox: function() {
	    this.setSilent('box', null);
	  },
	  __afterSetAttrAll: function() {
	
	  },
	  // 属性获取触发函数
	  _getAttr: function(name) {
	    return this.__attrs[name];
	  },
	  // 属性设置触发函数
	  _setAttr: function(name, value) {
	    var self = this;
	    if (name === 'clip') {
	      self.__setAttrClip(value);
	      self.__attrs.clip = value;
	    } else {
	      self.__attrs[name] = value;
	      var alias = ALIAS_ATTRS_MAP[name];
	      if (alias) {
	        self.__attrs[alias] = value;
	      }
	    }
	    return self;
	  },
	  hasFill: function() {
	    return this.canFill && this.__attrs.fillStyle;
	  },
	  hasStroke: function() {
	    return this.canStroke && this.__attrs.strokeStyle;
	  },
	  // 设置透明度
	  __setAttrOpacity: function(v) {
	    this.__attrs.globalAlpha = v;
	    return v;
	  },
	  __setAttrClip: function(clip) {
	    var self = this;
	    if (clip && (CLIP_SHAPES.indexOf(clip.type) > -1)) {
	      if (clip.get('canvas') === null) {
	        clip = Util.clone(clip);
	      }
	      clip.set('parent', self.get('parent'));
	      clip.set('context', self.get('context'));
	      clip.inside = function (x, y) {
	        var v = new Vector3(x, y, 1);
	        clip.invert(v, self.get('canvas')); // 已经在外面转换
	        return clip.__isPointInFill(v.x, v.y);
	      };
	      return clip;
	    }
	    return null;
	  }
	};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Matrix3 = __webpack_require__(185).Matrix3;
	
	// 是否未改变
	function isUnchanged(m) {
	  var elements = m.elements;
	  return elements[0] === 1 && elements[1] === 0 && elements[3] === 0 && elements[4] === 1 && elements[6] === 0 && elements[7] === 0;
	}
	
	// 是否仅仅是scale
	function isScale(m) {
	  var elements = m.elements;
	  return elements[1] === 0 && elements[3] === 0 && elements[6] === 0 && elements[7] === 0;
	}
	
	function multiple(m1, m2) {
	  if (!isUnchanged(m2)) {
	    if (isScale(m2)) {
	      m1.elements[0] *= m2.elements[0];
	      m1.elements[4] *= m2.elements[4];
	    } else {
	      m1.multiply(m2);
	    }
	  }
	}
	
	module.exports = {
	  initTransform: function() {
	    this.__m = new Matrix3();
	  },
	  translate: function(tx, ty) {
	    this.__m.translate(tx, ty);
	    this.clearTotalMatrix();
	    return this;
	  },
	  rotate: function(angle) {
	    this.__m.rotate(angle); // 仅支持弧度，不再支持角度
	    this.clearTotalMatrix();
	    return this;
	  },
	  scale: function(s1, s2) {
	    this.__m.scale(s1, s2);
	    this.clearTotalMatrix();
	    return this;
	  },
	  /**
	   * 绕起始点旋转
	   * @param  {Number} rotate 0～360
	   */
	  rotateAtStart: function(rotate) {
	    var x = this.attr('x');
	    var y = this.attr('y');
	    if (Math.abs(rotate) > Math.PI * 2) {
	      rotate = rotate / 180 * Math.PI;
	    }
	    this.transform([
	      ['t', -x, -y],
	      ['r', rotate],
	      ['t', x, y]
	    ]);
	  },
	  /**
	   * 移动的到位置
	   * @param  {Number} x 移动到x
	   * @param  {Number} y 移动到y
	   */
	  move: function(x, y) {
	    var cx = this.get('x') || 0; // 当前的x
	    var cy = this.get('y') || 0; // 当前的y
	    this.translate(x - cx, y - cy);
	    this.set('x', x);
	    this.set('y', y);
	  },
	  transform: function(ts) {
	    var self = this;
	    Util.each(ts, function(t) {
	      switch (t[0]) {
	        case 't':
	          self.translate(t[1], t[2]);
	          break;
	        case 's':
	          self.scale(t[1], t[2]);
	          break;
	        case 'r':
	          self.rotate(t[1]);
	          break;
	        case 'm':
	          self.__m = Matrix3.multiply(t[1], self.__m);
	          self.clearTotalMatrix();
	          break;
	        default:
	          break;
	      }
	    });
	    return self;
	  },
	  setTransform: function(ts) {
	    this.__m.identity();
	    return this.transform(ts);
	  },
	  getMatrix: function() {
	    return this.__m;
	  },
	  setMatrix: function(m) {
	    this.__m = m;
	    this.clearTotalMatrix();
	    return this;
	  },
	  apply: function(v, root) {
	    var m;
	    if (root) {
	      m = this._getMatrixByRoot(root);
	    } else {
	      m = this.__m;
	    }
	    v.applyMatrix(m);
	    return this;
	  },
	  // 获取到达指定根节点的矩阵
	  _getMatrixByRoot: function(root) {
	    var self = this;
	    root = root || self;
	    var parent = self;
	    var parents = [];
	
	    while (parent !== root) {
	      parents.unshift(parent);
	      parent = parent.get('parent');
	    }
	    parents.unshift(parent);
	
	    var m = new Matrix3();
	    Util.each(parents, function(child) {
	      m.multiply(child.__m);
	    });
	    return m;
	  },
	  /**
	   * 应用到当前元素上的总的矩阵
	   * @return {Matrix} 矩阵
	   */
	  getTotalMatrix: function() {
	    var m = this.__cfg.totalMatrix;
	    if (!m) {
	      m = new Matrix3();
	      var parent = this.__cfg.parent;
	      if (parent) {
	        var pm = parent.getTotalMatrix();
	        /* if (!isUnchanged(pm)) {
	          m.multiply(pm);
	        } */
	        multiple(m, pm);
	      }
	      /* if (!isUnchanged(this.__m)) {
	        m.multiply(this.__m);
	      } */
	      multiple(m, this.__m);
	      this.__cfg.totalMatrix = m;
	    }
	    return m;
	  },
	  // 清除当前的矩阵
	  clearTotalMatrix: function() {
	    // this.__cfg.totalMatrix = null;
	  },
	  invert: function(v) {
	    var m = this.getTotalMatrix();
	    // 单精屏幕下大多数矩阵没变化
	    if (isScale(m)) {
	      v.x /= m.elements[0];
	      v.y /= m.elements[4];
	    } else {
	      var inm = m.getInverse();
	      v.applyMatrix(inm);
	    }
	    return this;
	  },
	  resetTransform: function(context) {
	    var mo = this.__m.to2DObject();
	    // 不改变时
	    if (!isUnchanged(this.__m)) {
	      context.transform(mo.a, mo.b, mo.c, mo.d, mo.e, mo.f);
	    }
	  }
	};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Tween = __webpack_require__(195);
	var tween = new Tween();
	
	module.exports = {
	  tween: tween,
	  animate: function(toProps, duration, easing, callBack) {
	    var now = tween.getNow();
	    var cfg = Util.mix({}, toProps, {
	      duration: duration
	    });
	    tween.animate(this).append(now, cfg, easing, callBack);
	    if (tween.get('status') === 'silent') tween.play();
	  }
	};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	var Tween = __webpack_require__(196);
	Tween.Tween = __webpack_require__(215);
	Tween.Ease = __webpack_require__(216);
	module.exports = Tween;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 时间轴
	 * @author huangtonger@aliyun.com
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(197);
	var TweenCreator = __webpack_require__(199);
	var Timeline = function(cfg) {
	  Timeline.superclass.constructor.call(this, cfg);
	  this._init();
	}
	
	Timeline.ATTRS = {
	  /**
	   * 运行到的时间
	   * @type {Boolean}
	   */
	  time: 0,
	
	  /**
	   * 创建时间
	   * @type {Number}
	   */
	  createTime: null,
	
	  /**
	   * 播放时间
	   * @type {Number}
	   */
	  playTime: null,
	
	  /**
	   * 距离上次播放的暂停间隔时间
	   * @type {Number}
	   */
	  pauseTimeSpace: 0,
	
	  /**
	   * 是否可被执行
	   * @type {Boolean}
	   */
	  available: false,
	  /**
	   * 画布集
	   * @type {Array}
	   */
	  canvases: [],
	
	  /**
	   * 补间集
	   * @type {Array}
	   */
	  tweens: [],
	
	  /**
	   * 结束时间
	   * @type {Number}
	   */
	  endTime: 0,
	
	  /**
	   * 是否自动播放
	   * @type {Boolean}
	   */
	  autoPlay: false,
	
	  /**
	   * 状态
	   * @type {String}
	   * silent 静默
	   * playing 播放
	   */
	  status: 'silent',
	
	  /**
	   * 自动绘制
	   * @type {Boolean}
	   */
	  autoDraw: true
	};
	
	Util.extend(Timeline, Base);
	
	Util.augment(Timeline, {
	  // 初始化
	  _init: function() {
	    var autoPlay = this.get('autoPlay');
	    this.set('createTime', +new Date());
	    if (autoPlay) {
	      this.play();
	    }
	  },
	  // 尝试设置结束时间
	  _trySetEndTime: function(tween){
	    var self = this;
	    if (Util.isObject(tween)) {
	      self._setEndTime(tween);
	    }else if (Util.isArray(tween)) {
	      Util.each(tween, function(v, k){
	        self._setEndTime(v);
	      });
	    }
	  },
	  // 尝试设置Canvas
	  _trySetCanvases: function(tween){
	    var self = this;
	    if (Util.isObject(tween)) {
	      self._setCanvases(tween);
	    }else if (Util.isArray(tween)) {
	      Util.each(tween, function(v, k){
	        self._setCanvases(v);
	      });
	    }
	  },
	  // 设置结束时间
	  _setEndTime: function(tween){
	    var endTime = this.get('endTime');
	    var tweenEndTime = tween.endTime;
	    if(tweenEndTime > endTime){
	      this.set('endTime', tweenEndTime);
	    }
	  },
	  // 设置画布
	  _setCanvases: function(tween){
	    var canvas = tween.canvas;
	    var canvases = this.get('canvases');
	    if (canvases.indexOf(canvas) === -1) {
	      canvases.push(canvas);
	    }
	  },
	  // 重置补间
	  _resetTweens: function(){
	    var tweens = this.get('tweens');
	    tweens.sort(function(a, b){ // 需要让起始时间最小的最后重设
	      return b.get('startTime')-a.get('startTime');
	    });
	    Util.each(tweens, function(v) {
	      v.reset();
	    });
	  },
	  // 获取自身时间轴
	  _getTime: function(){
	    var playTime = this.get('playTime');
	    var pauseTimeSpace = this.get('pauseTimeSpace');
	    return +new Date() - playTime + pauseTimeSpace;
	  },
	  // 刷新 （画布刷新）
	  _refresh: function(time){
	    var tweens = this.get('tweens');
	    var canvases = this.get('canvases');
	    var autoDraw = this.get('autoDraw');
	    var tweensStash = []; // 缓存未销毁的补间
	    var canvasesStash = []; // 缓存当前动画涉及画布
	    var canvas;
	    var tween;
	    for (var i = 0; i < tweens.length; i++) {
	      tween = tweens[i];
	      canvas = tween.canvas;
	      if (tween.needsDestroy) {
	        tween.destroy();
	      } else if (!tween.destroyed && !tween.needsDestroy) {
	        tween.tryStep(time); // 尝试运行
	      }
	      if (!tween.destroyed) {
	        tweensStash.push(tween);
	      }
	      if (!Util.inArray(canvasesStash, canvas) && !tween.destroyed){
	        canvasesStash.push(canvas);
	      }
	    }
	    if(autoDraw) {
	      this.draw();
	    }
	    this.set('canvases', canvasesStash);
	    this.set('tweens', tweensStash);
	  },
	  // 更新（时间和状态）
	  _update: function() {
	    if(!this.get('available')) {
	      return; // 不可用则强制停止所有更新
	    }
	    var self = this;
	    var tweens = self.get('tweens');
	    var time;
	    if(tweens.length > 0){
	      time = self._getTime();
	      self._refresh(time);
	    }
	    self.fire('update');
	    Util.requestAnimationFrame(function() {
	      self._update();
	    });
	  },
	  /**
	   * 生成补间生成器
	   * @param   {Object} target 图形对象
	   * @param   {Number} startTime 开始时间
	   * @return  {Object} tweenCreator 补间生成器
	   */
	  animate: function(target, startTime) {
	    var tweenCreator = new TweenCreator({
	      target: target,
	      timeline: this,
	      startTime: startTime ? startTime : 0
	    });
	    return tweenCreator;
	  },
	  /**
	   * 添加补间
	   * @param   {Object || Array} tweens 补间
	   * @return  {Object} this
	   */
	  add: function(tween) {
	    var tweens = this.get('tweens');
	    var rst;
	    if (Util.isArray(tween)) {
	      rst = tweens.concat(tween);
	    } else if (Util.isObject(tween) && tween.type === 'tween') {
	      tweens.push(tween);
	      rst = tweens;
	    } else {
	      console.error('Timeline not Support this type');
	    }
	    this.set('tweens', rst);
	    this._trySetCanvases(tween);
	    this._trySetEndTime(tween);
	    return this;
	  },
	  /**
	   * 获取当前时间
	   * @param {Nmuber} time 自身时间轴时间点
	   */
	  getNow: function() {
	    var playTime = this.get('playTime');
	    return playTime ? (+new Date() - playTime) : 0 ;
	  },
	  /**
	   * 通过实际时间，获取时间轴时间 (同getNow, 0.3.x废弃)
	   * @param {Nmuber} time 自身时间轴时间点
	   */
	  getTime: function() {
	    var playTime = this.get('playTime');
	    return playTime ? (+new Date() - playTime) : 0 ;
	  },
	  /**
	   * 播放
	   */
	  play: function() {
	    var status = this.get('status');
	    if (status === 'silent') {
	      this.set('playTime', +new Date());
	      this.set('available', true);
	      this.set('status', 'playing');
	      this._update();
	    }
	    return this;
	  },
	  /**
	   * 停止
	   */
	  stop: function(){
	    this.set('status', 'silent');
	    this.set('available', false);
	    this.set('pauseTimeSpace', 0);
	    this._resetTweens();
	    this._refresh(0); // 画面刷新至初始态
	    this.draw();
	  },
	  /**
	   * 暂停
	   */
	  pause: function() {
	    var available = this.get('available');
	    if(available) this.set('pauseTimeSpace', +new Date() - this.get('playTime'));
	    this.set('available', false);
	    this.set('status', 'silent');
	    return this;
	  },
	  /**
	   * 重置
	   */
	  reset: function() {
	    this.set('status', 'silent');
	    this.set('available', false);
	    this.set('pauseTimeSpace', 0);
	    this.set('playTime', 0);
	    this.set('endTime', 0);
	    this.set('tweens', []);
	    this.set('canvases', []);
	  },
	  /**
	   * 绘制
	   */
	  draw: function() {
	    var canvases = this.get('canvases');
	    var canvas;
	    for (var i = 0; i < canvases.length; i++) {
	      canvas = canvases[i];
	      !canvas.get('destroyed') && canvas.draw();
	    }
	    return;
	  }
	});
	
	module.exports = Timeline;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var gBase = __webpack_require__(198);
	
	module.exports = gBase;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 基类，用于设置、获取值，继承父类的ATTRS，事件处理等
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Base;
	
	// copy attr
	function initClassAttrs(c){
	  if(c._attrs || c === Base){
	    return;
	  }
	
	  var superCon = c.superclass.constructor;
	  if(superCon && !superCon._attrs){
	    initClassAttrs(superCon);
	  }
	  c._attrs =  {};
	  
	  Util.mix(true,c._attrs,superCon._attrs);
	  Util.mix(true,c._attrs,c.ATTRS);
	}
	
	Base = function (cfg) {
	  initClassAttrs(this.constructor); // 初始化类的属性
	  this._attrs = {}; // 存放变量
	  this.events = {};
	  var defaultCfg = this.getDefaultCfg(); 
	  Util.mix(this._attrs,defaultCfg,cfg); // 复制属性到对象
	};
	
	Util.augment(Base,{
	
	  /**
	   * @protected
	   * get the default cfg
	   * @return {Object} default cfg
	   */
	  getDefaultCfg: function(){
	    var _self = this,
	      con = _self.constructor,
	      attrs = con._attrs,
	      rst = Util.mix(true,{},attrs);
	    return rst;
	  },
	  /**
	   * 设置属性信息
	   * @protected
	   */
	  set : function(name,value){
	    var m = '_onRender' + Util.ucfirst(name);
	    if(this[m]){
	      this[m](value,this._attrs[name]);
	    }
	    this._attrs[name] = value;
	    return this;
	  },
	  /**
	   * get the property
	   * @protected
	   */
	  get : function(name){
	    return this._attrs[name];
	  },
	  /**
	   * bind event
	   * @param  {String}   eventType event type
	   * @param  {Function} fn  callback function
	   */
	  on : function(eventType,fn){
	
	    var self = this,
	      events = self.events,
	      callbacks = events[eventType];
	
	    if(!callbacks){
	      callbacks = events[eventType] = [];
	    }
	    callbacks.push(fn);
	    return self;
	  },
	  /**
	   * fire the event
	   * @param  {String} eventType event type
	   */
	  fire : function(eventType,eventObj){
	    var _self = this,
	      events = _self.events,
	      callbacks = events[eventType];
	    if(callbacks){
	      Util.each(callbacks,function(m){
	        m(eventObj);
	      });
	    }
	  },
	  /**
	   * remove the event
	   * @param  {String}   eventType event type
	   * @param  {Function} fn  the callback function
	   */
	  off : function(eventType,fn){
	    var self = this,
	      events = self.events,
	      callbacks = events[eventType];
	    if(!eventType){
	      self.events = {};
	      return self;
	    }    
	    if(callbacks){
	      Util.remove(callbacks,fn);
	    }
	    return self;
	  },
	  /**
	   * 析构函数
	   */
	  destroy : function(){
	    var self = this;
	    var destroyed = self.destroyed;
	
	    if(destroyed){
	      return self;
	    }
	    self._attrs = {};
	    self.events = {};
	    self.destroyed = true;
	  }
	
	});
	
	
	
	module.exports = Base;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 补间生成器
	 * @author huangtonger@aliyun.com
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var TweenUtil = __webpack_require__(200);
	var Base = __webpack_require__(197);
	var Tween = __webpack_require__(215);
	
	var Creator = function(cfg) {
	  Util.mix(this, cfg);
	}
	
	Util.augment(Creator, {
	  /**
	   * 目标图形对象
	   * @type {Object}
	   */
	  target: null,
	  /**
	   * 时间轴
	   * @type {Object}
	   */
	  timeline: null,
	  /**
	   * 开始时间
	   * @type {Number}
	   */
	  startTime: null,
	  /**
	   * 添加方法
	   * @param {Number} time 开始时间
	   * @param {Object} props 属性
	   * @param {String} easing 补间动画类型
	   * @param {Function} callBack 回调函数
	   */
	  append: function(time, props, easing, callBack){
	    var id = Util.guid('tween_');
	    var target = this.target;
	    var tweens = this.tweens;
	    var timeline = this.timeline;
	    var startTime = this.startTime;
	    var frames = TweenUtil.getKeyFrameByProps(target, props);
	    var startKeyFrame = frames[0]; // startKeyFrame 起始帧
	    var endKeyFrame = frames[1]; // endKeyFrame   结束帧
	    var interpolations = TweenUtil.getInterpolations(startKeyFrame, endKeyFrame);
	    var tween;
	    time = time ? time : startTime;
	    if(props && props.delay) time += props.delay;
	    tween = new Tween({
	      id: id,
	      canvas: target.get('canvas'),
	      startTime: time,
	      target: target,
	      easing: easing,
	      callBack: callBack,
	      startKeyFrame: startKeyFrame,
	      endKeyFrame: endKeyFrame,
	      interpolations: interpolations,
	      duration: props.duration ? props.duration : 1000,
	      repeat: props.repeat ? props.repeat : false,
	      destroyTarget: props.destroy ? props.destroy : false
	    });
	    timeline && timeline.add(tween); // 如果时间轴存在，则添加到时间轴
	    return this;
	  }
	});
	
	module.exports = Creator;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 工具类
	 * @author huangtonger@aliyun.com
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(185);
	var Interpolation = __webpack_require__(201);
	var ReservedProps = {
	  duration: 'duration',
	  destroy: 'destroy',
	  delay: 'delay',
	  repeat: 'repeat',
	  onUpdate: 'onUpdate'
	}
	var Matrix3 = Matrix.Matrix3;
	
	var TweenUtil = {
	  /**
	   * 差值函数
	   * @return  {Function} fun 差值函数
	   */
	  interpolation: Interpolation.interpolation,
	  /**
	   * 获得帧
	   * @param   {Nmuber} ratio 比率
	   * @param   {Object} skf 起始关键帧
	   * @param   {Object} ekf 结束关键帧
	   * @param   {Object} interpolations 插值器集
	   * @param   {Object} target 目标图形对象
	   * @return  {Object} frame 当前比率帧
	   */
	  getFrame: function(ratio, skf, ekf, interpolations, target) {
	    var frame = {
	      attrs: {},
	      matrix: null
	    };
	    var onUpdate = ekf.onUpdate;
	
	    for (var k in interpolations.attrs) {
	      frame.attrs[k] = interpolations.attrs[k](ratio);
	    }
	    if(interpolations.matrix) {
	      frame.matrix = interpolations.matrix(ratio);
	    }
	    if (Util.isFunction(onUpdate)) {
	      onUpdate(frame, ratio);
	    }
	    return frame;
	  },
	  /**
	   * 获取插值函数
	   * @param   {Object} startKeyFrame 起始帧
	   * @param   {Object} endKeyFrame   结束帧
	   * @return  {Object} interpolation 插值器集
	   */
	  getInterpolations: function(startKeyFrame, endKeyFrame) {
	    var interpolations = {
	      attrs: {},
	      matrix: null
	    };
	    var interpolation;
	    Util.each(startKeyFrame.attrs, function(v, k) {
	      interpolation = null;
	      if(typeof v === typeof endKeyFrame.attrs[k]){
	        if(k === 'path'){
	          interpolation = TweenUtil.interpolation({
	            path: v,
	            type: 'path'
	          }, {
	            path: endKeyFrame.attrs[k],
	            type: 'path'
	          });
	        } else {
	          interpolation = TweenUtil.interpolation(v, endKeyFrame.attrs[k]);
	        }
	        if(interpolation) {
	          interpolations.attrs[k] = interpolation;
	        }
	      }
	    });
	    if(endKeyFrame.matrix && startKeyFrame.matrix && !Matrix3.equal(startKeyFrame.matrix, endKeyFrame.matrix)) {
	      interpolations.matrix = TweenUtil.interpolation(startKeyFrame.matrix, endKeyFrame.matrix);
	    }
	    return interpolations;
	  },
	  /**
	   * 通过Props获取Frames
	   * @param   {Object} target 目标图形对象
	   * @param   {Object} props 目标属性(包括矩阵和图形属性)
	   * @return  {Object} frames 帧集
	   */
	  getKeyFrameByProps: function(target, props) {
	    var frames = [];
	    var endKeyFrame = TweenUtil.props2frame(target, props);
	    var startKeyFrame = {
	      attrs: TweenUtil.getTargetAttrs(target, endKeyFrame.attrs),
	      matrix: target.getMatrix()
	    };
	    frames[0] = startKeyFrame;
	    frames[1] = endKeyFrame;
	    return frames;
	  },
	  /**
	   * 格式化Props 为 Frame
	   * @param   {Object} target 目标图形对象
	   * @param   {Object} props 目标属性(包括矩阵和图形属性)
	   * @return  {Object} frame 帧
	   */
	  props2frame: function(target, props) {
	    var frame = {
	      matrix: null,
	      attrs: {}
	    };
	    Util.each(props, function(v, k) {
	      if (k === 'transform' && !props['k']) {
	        frame.matrix = TweenUtil.transform(target.getMatrix(), v);
	      } else if (k === 'matrix') {
	        frame.matrix = v;
	      } else if(k === 'onUpdate') {
	        frame.onUpdate = props.onUpdate;
	      } else if (!ReservedProps[k]) {
	        frame.attrs[k] = v;
	      }
	    });
	    return frame;
	  },
	  /**
	   * 变换快捷方式
	   * @param  {Object} m 矩阵
	   * @param  {Array} ts 变换数组同
	   * @return  {Object} this 回调函数
	   */
	  transform: function(m, ts) {
	    m = m.clone();
	    Util.each(ts, function(t) {
	      switch (t[0]) {
	        case 't':
	          m.translate(t[1], t[2]);
	          break;
	        case 's':
	          m.scale(t[1], t[2]);
	          break;
	        case 'r':
	          m.rotate(t[1]);
	          break;
	        case 'm':
	          m.multiply(t[1]);
	          break;
	        default:
	          return false;
	      }
	    });
	    return m;
	  },
	  /** 获取图形相应的图形属性
	   * @param   {Object} target 目标图形对象
	   * @param   {Object} attrs 参考图形属性
	   * @return  {Object} rst 图形属性
	   */
	  getTargetAttrs: function(target, attrs) {
	    var rst = {};
	    var k;
	    for (k in attrs) {
	      rst[k] = target.attr(k);
	    }
	    return rst;
	  }
	}
	
	module.exports = TweenUtil;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var inter = __webpack_require__(202);
	module.exports = {
	  interpolation: inter.interpolation,
	  unInterpolation: inter.unInterpolation
	};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var path = __webpack_require__(203);
	var array = __webpack_require__(204);
	var object = __webpack_require__(213);
	var singular = __webpack_require__(205);
	var matrix = __webpack_require__(214);
	var Matrix = __webpack_require__(185);
	var Matrix3 = Matrix.Matrix3;
	
	function interpolation(a, b) {
	  if ((a.type === 'matrix3') && (b.type === 'matrix3')) {
	    return matrix.matrix(a, b);
	  } else if ((a.type === 'path') && (b.type === 'path')) {
	    return path.path(a, b);
	  } else if (Util.isArray(a) && Util.isArray(b)) {
	    return array.array(a, b);
	  } else if (Util.isObject(a) && Util.isObject(b)) {
	    return object.object(a, b);
	  } else {
	    return singular.singular(a, b);
	  }
	};
	
	function unInterpolation(a, b) {
	  if ((a.type === 'matrix3') && (b.type === 'matrix3')) {
	    return matrix.unMatrix(a, b);
	  } else if (Util.isArray(a) && Util.isArray(b)) {
	    return array.unArray(a, b);
	  } else if(Util.isObject(a) && Util.isObject(b)) {
	    return object.unObject(a, b);
	  } else {
	    return singular.unSingular(a, b);
	  }
	}
	
	module.exports = {
	  interpolation: interpolation,
	  unInterpolation: unInterpolation
	};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var PathUtil = __webpack_require__(178);
	
	function path(a, b) {
	  var curves = PathUtil.toCurve(a.path, b.path);
	  var curvea = curves[0];
	  var curveb = curves[1];
	  return function(t) {
	    var rst = [];
	    if(t >= 1){
	      return b.path;
	    }
	    if(t <= 0){
	      return a.path;
	    }
	    for (var i = 0; i < curvea.length; i++) {
	      rst[i] = [curvea[i][0]];
	      for (var j = 1; j < curvea[i].length; j++) {
	        rst[i][j] = (curveb[i][j] - curvea[i][j])*t + curvea[i][j];
	      }
	    }
	    return rst;
	  }
	}
	
	module.exports = {
	  path: path
	};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var singular = __webpack_require__(205);
	var Util = __webpack_require__(169);
	
	function array(a, b) {
	  var x = [];
	  var l = Math.min(a.length, b.length);
	
	  for (var i = 0; i < l; i ++) {
	    if(Util.isArray(a[i]) && Util.isArray(b[i])) {
	      x[i] = array(a[i], b[i]);
	    } else {
	      x[i] = singular.singular(a[i], b[i]);
	    }
	  }
	  return function(t) {
	    var c = [];
	    for (var i = 0; i < l; i ++) {
	      c[i] = x[i](t);
	    }
	    return c;
	  }
	}
	
	function unArray(a, b) {
	  var x = [];
	  var l = Math.min(a.length, b.length);
	
	  for (var i = 0; i < l; i ++) {
	    if(Util.isArray(a[i]) && Util.isArray(b[i])) {
	      x[i] = unArray(a[i], b[i]);
	    } else {
	      x[i] = singular.unSingular(a[i], b[i]);
	    }
	  }
	
	  return function(c) {
	    var l = Math.min(x.length, c.length);
	    var rst = 0;
	    var num = 0;
	    for (var i = 0; i < l; i ++) {
	      rst += x[i](c[i]);
	      num ++;
	    }
	    return num === 0 ? 0 : rst / num;
	  }
	}
	
	module.exports = {
	  array: array,
	  unArray: unArray
	};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var number = __webpack_require__(206);
	var color = __webpack_require__(207);
	var Color = __webpack_require__(208);
	
	
	function singular(a, b) {
	  if (Util.isNumeric(a) && Util.isNumeric(b)) {
	    return number.number(a, b);
	  } else if(Util.isString(a) && Util.isString(b)) {
	    var color1 = new Color(a);
	    var color2 = new Color(b);
	    if (color1.getType() && color2.getType()) {
	      return color.color(color1, color2);
	    }
	  }
	}
	
	function unSingular(a, b) {
	  if (Util.isNumeric(a) && Util.isNumeric(b)) {
	    return number.unNumber(a, b);
	  } else if (Util.isString(a) && Util.isString(b)) {
	    var color1 = new Color(a);
	    var color2 = new Color(b);
	    if (color1.getType() && color2.getType()) {
	      return color.unColor(color1, color2);
	    }
	  }
	}
	
	module.exports = {
	  singular: singular,
	  unSingular: unSingular
	};


/***/ }),
/* 206 */
/***/ (function(module, exports) {

	'use strict';
	
	function number(a, b) {
	  a = +a;
	  b = +b;
	  return function(t) {
	    return a * (1 - t) + b * t;
	  };
	}
	
	function unNumber(a, b) {
	  b -= a;
	  return function(x) {
	    return b === 0 ? 0 : (x - a) / b;
	  }
	}
	
	module.exports = {
	  number: number,
	  unNumber: unNumber
	};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Color = __webpack_require__(208);
	
	function color(color1, color2) {
	  switch(color2.getType()) {
	    case 'rgb':
	      return rgb(color1, color2);
	    case 'hsl':
	      return hsl(color1, color2);
	  }
	}
	
	function unColor(color1, color2) {
	  switch(color2.getType()) {
	    case 'rgb':
	      return unRgb(color1, color2);
	    case 'hsl':
	      return unHsl(color1, color2);
	  }
	}
	
	function rgb(color1, color2) {
	  var r1 = color1.getR();
	  var g1 = color1.getG();
	  var b1 = color1.getB();
	  var a1 = color1.getA();
	
	
	  var r2 = color2.getR() - r1;
	  var g2 = color2.getG() - g1;
	  var b2 = color2.getB() - b1;
	  var a2 = color2.getA();
	
	  if (a1 !== undefined || a2 !== undefined) {
	    a1 = a1 || 1;
	    a2 = (a2 === undefined ? 1 : a2) - a1;
	  }
	
	  return function(t) {
	    var rst = new Color();
	    rst.setRGB(
	      r1 + r2 * t,
	      g1 + g2 * t,
	      b1 + b2 * t,
	      (a1 !== undefined && a2 !== undefined) ? a1 + a2 * t : undefined
	    );
	    return rst.getRGBStyle();
	  };
	}
	
	function unRgb(color1, color2) {
	  var r1 = color1.getR();
	  var g1 = color1.getG();
	  var b1 = color1.getB();
	  var a1 = color1.getA();
	
	
	  var r2 = color2.getR() - r1;
	  var g2 = color2.getG() - g1;
	  var b2 = color2.getB() - b1;
	  var a2 = color2.getA();
	
	  if (a1 !== undefined || a2 !== undefined) {
	    a1 = a1 || 1;
	    a2 = (a2 === undefined ? 1 : a2) - a1;
	  }
	
	  return function(color) {
	    color = new Color(color);
	    if (!color.getType()) {
	      return 0;
	    }
	    var r = color.getR();
	    var g = color.getG();
	    var b = color.getB();
	    var a = color.getA();
	
	    a = a || 1;
	
	    var rst = 0;
	    var num = 0;
	
	    if (r2 !== 0) {
	      rst += (r - r1) / r2;
	      num ++;
	    }
	    if (g2 !== 0) {
	      rst += (g - g1) / g2;
	      num ++;
	    }
	    if (b2 !== 0) {
	      rst += (b - b1) / b2;
	      num ++;
	    }
	    if (a2 !== 0 && a2) {
	      rst += (a - a1) / a2;
	      num ++;
	    }
	    return num === 0 ? 0 : rst / num;
	  }
	}
	
	function hsl(color1, color2) {
	  var h1 = color1.getH();
	  var s1 = color1.getS();
	  var l1 = color1.getL();
	  var a1 = color1.getA();
	
	  var h2 = color2.getH() - h1;
	  var s2 = color2.getS() - s1;
	  var l2 = color2.getL() - l1;
	  var a2 = color2.getA();
	
	  if (a1 !== undefined || a2 !== undefined) {
	    a1 = a1 || 1;
	    a2 = (a2 === undefined ? 1 : a2) - a1;
	  }
	
	  return function(t) {
	    var rst = new Color();
	    rst.setHSL(
	      h1 + h2 * t,
	      s1 + s2 * t,
	      l1 + l2 * t,
	      (a1 !== undefined && a2 !== undefined) ? a1 + a2 * t : undefined
	    );
	    return rst.getHSLStyle();
	  };
	
	}
	
	function unHsl(color1, color2) {
	  var h1 = color1.getH();
	  var s1 = color1.getS();
	  var l1 = color1.getL();
	  var a1 = color1.getA();
	
	  var h2 = color2.getH() - h1;
	  var s2 = color2.getS() - s1;
	  var l2 = color2.getL() - l1;
	  var a2 = color2.getA();
	
	  if (a1 !== undefined || a2 !== undefined) {
	    a1 = a1 || 1;
	    a2 = (a2 === undefined ? 1 : a2) - a1;
	  }
	
	  return function(color) {
	    color = new Color(color);
	    if (!color.getType()) {
	      return 0;
	    }
	    var h = color.getH();
	    var s = color.getS();
	    var l = color.getL();
	    var a = color.getA();
	
	    a = a || 1;
	
	    var rst = 0;
	    var num = 0;
	    if (h2 !== 0) {
	      rst += (h - h1) / h2;
	      num ++;
	    }
	
	    if (s2 !== 0) {
	      rst += (s - s1) / s2;
	      num ++;
	    }
	
	    if (l2 !== 0) {
	      rst += (l - l1) / l2;
	      num ++;
	    }
	
	    if (a2 !== 0 && a2) {
	      rst += (a - a1) / a2;
	      num ++;
	    }
	
	    return num === 0 ? 0 : rst / num;
	  }
	}
	
	
	module.exports = {
	  color: color,
	  unColor: unColor
	};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(209);


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	var HSL = __webpack_require__(210);
	var RGB = __webpack_require__(211);
	var colorKeywords = __webpack_require__(212);
	
	
	var regex = {
	  hex: /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/,                                          // #ffffff or #fff
	  space: /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)$/,                                          // rbg | rgba | hsl | hsla
	  rgbNum: /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*$/,                                       // rgb(255, 0, 120)
	  rgbaNum: /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([0-9]*\.?[0-9]+)\s*$/,              // rgba(255, 0, 120, 0.2)
	  rgbPre: /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*$/,                                 // rgb(100%, 20%, 50%)
	  rgbaPre: /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*([0-9]*\.?[0-9]+)\s*$/,        // rgba(100%, 20%, 50%, 0.1)
	  hsl: /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*$/,                          // hsl(360, 100%, 100%)
	  hsla: /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*([0-9]*\.?[0-9]+)\s*$/  // hsla(360.0, 100%, 100%, 0.2)
	};
	
	
	function Color(color) {
	  this.space = {};
	  if(Util.isString(color)) {
	    this.setStyle(color);
	  } else if(color instanceof Color){
	    this.copy(color);
	  }
	}
	
	Util.augment(Color, {
	  getType: function() {
	    return this.space.type;
	  },
	  toRGB: function() {
	    var space = this.space;
	    if (space.type !== 'rgb') {
	      var rgb = space.toRGB();
	      this.setRGB(rgb.r, rgb.g, rgb.b, rgb.a);
	    }
	  },
	  toHSL: function() {
	    var space = this.space;
	    if (space.type !== 'hsl') {
	      var hsl = space.toHSL();
	      this.setHSL(hsl.h, hsl.s, hsl.l, hsl.a);
	    }
	  },
	  getR: function() {
	    this.toRGB();
	    return this.space.r;
	  },
	  getG: function() {
	    this.toRGB();
	    return this.space.g;
	  },
	  getB: function() {
	    this.toRGB();
	    return this.space.b;
	  },
	  getH: function() {
	    this.toHSL();
	    return this.space.h;
	  },
	  getS: function() {
	    this.toHSL();
	    return this.space.s;
	  },
	  getL: function() {
	    this.toHSL();
	    return this.space.l;
	  },
	  getA: function() {
	    return this.space.a;
	  },
	  multiplyA: function(a) {
	    if (a === undefined) {
	      return this;
	    }
	    if (this.space.a === undefined) {
	      this.space.a = 1;
	    }
	    this.space.a *= a;
	    return this;
	  },
	  getRGBStyle: function() {
	    this.toRGB();
	    return this.space.getStyle();
	  },
	  getRGBPreStyle: function() {
	    this.toRGB();
	    return this.space.getPreStyle();
	  },
	  getHSLStyle: function() {
	    this.toHSL();
	    return this.space.getStyle();
	  },
	  getHex: function() {
	    this.toRGB();
	    return this.space.getHex();
	  },
	  setRGB: function(r, g, b, a) {
	    this.space = new RGB();
	    this.space.setRGB(r, g, b, a);
	    return this;
	  },
	  setHSL: function(h, s, l, a) {
	    this.space = new HSL();
	    this.space.setHSL(h, s, l, a);
	    return this;
	  },
	  setHex: function(hex) {
	    this.space = new RGB();
	    hex = Math.floor( hex );
	
	    this.space.r = ( hex >> 16 & 255 ) / 255;
	    this.space.g = ( hex >> 8 & 255 ) / 255;
	    this.space.b = ( hex & 255 ) / 255;
	
	    return this;
	  },
	  setStyle: function(style) {
	    var m;
	    if (m = regex.hex.exec(style)) {
	      var hex = m[1];
	      var size = hex.length;
	
	      if (size === 3) {
	        this.setRGB(
	          parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255,
	          parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255,
	          parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255
	        );
	        return this;
	      } else if(size === 6) {
	
	        this.setRGB(
	          parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255,
	          parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255,
	          parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255
	        );
	        return this;
	      }
	    } else if (m = regex.space.exec(style)){
	      var name = m[1];
	      var components = m[2];
	      var color;
	      switch(name) {
	        case 'rgb':
	          if (color = regex.rgbNum.exec(components)) {
	
	            this.setRGB(
	              parseInt(color[1], 10) / 255,
	              parseInt(color[2], 10) / 255,
	              parseInt(color[3], 10) / 255
	            );
	            return this;
	          }
	
	          if (color = regex.rgbPre.exec(components)) {
	            this.setRGB(
	              parseInt(color[1], 10) / 100,
	              parseInt(color[2], 10) / 100,
	              parseInt(color[3], 10) / 100
	            );
	            return this;
	          }
	          break;
	        case 'rgba':
	          if (color = regex.rgbaNum.exec(components)) {
	            this.setRGB(
	              parseInt(color[1], 10) / 255,
	              parseInt(color[2], 10) / 255,
	              parseInt(color[3], 10) / 255,
	              parseFloat(color[4])
	            );
	            return this;
	          }
	
	          if (color = regex.rgbaPre.exec(components)) {
	            this.setRGB(
	              parseInt(color[1], 10) / 100,
	              parseInt(color[2], 10) / 100,
	              parseInt(color[3], 10) / 100,
	              parseFloat(color[4])
	            );
	            return this;
	          }
	          break;
	        case 'hsl':
	          if (color = regex.hsl.exec(components)) {
	            this.setHSL(
	              parseInt(color[1], 10) / 360,
	              parseInt(color[2], 10) / 100,
	              parseInt(color[3], 10) / 100
	            );
	            return this;
	          }
	          break;
	        case 'hsla':
	          if (color = regex.hsla.exec(components)) {
	            this.setHSL(
	              parseInt(color[1], 10) / 360,
	              parseInt(color[2], 10) / 100,
	              parseInt(color[3], 10) / 100,
	              parseFloat(color[4])
	            );
	            return this;
	          }
	          break;
	      }
	    } else {
	      style = style.toLowerCase();
	      if (colorKeywords[style] !== undefined) {
	        this.setHex(colorKeywords[style]);
	      } else {
	        this.setHex(colorKeywords['black']);
	      }
	    }
	  },
	  copy: function(color) {
	    this.space = color.space.clone();
	  },
	  clone: function() {
	    return new Color(this);
	  }
	});
	
	
	module.exports = Color;
	


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	
	
	var HSL = function() {
	  this.h = 0;
	  this.s = 0;
	  this.l = 0;
	}
	
	Util.augment(HSL, {
	  type: 'hsl',
	  setHSL: function(h, s, l, a) {
	    this.h = gMath.mod(h, 1);
	    this.s = gMath.clamp(s, 0, 1);
	    this.l = gMath.clamp(l, 0, 1);
	    if (a !== undefined) {
	      this.a = gMath.clamp(a, 0, 1);
	    } else {
	      this.a = undefined;
	    }
	  },
	  toRGB: function () {
	    function hue2rgb( p, q, t ) {
	      if ( t < 0 ) t += 1;
	      if ( t > 1 ) t -= 1;
	      if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
	      if ( t < 1 / 2 ) return q;
	      if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
	      return p;
	    }
	    return function () {
	      // h,s,l ranges are in 0.0 - 1.0
	
	      var self = this;
	      var h = self.h;
	      var s = self.s;
	      var l = self.l;
	
	      if ( s === 0 ) {
	        return {
	          r: l,
	          g: l,
	          b: l,
	          a: self.a
	        };
	      } else {
	        var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
	        var q = ( 2 * l ) - p;
	      }
	      return {
	        r: hue2rgb( q, p, h + 1 / 3 ),
	        g: hue2rgb( q, p, h ),
	        b: hue2rgb( q, p, h - 1 / 3 ),
	        a: self.a
	      };
	    };
	  }(),
	  clone: function() {
	    var hsl = new HSL();
	    hsl.h = this.h;
	    hsl.s = this.s;
	    hsl.l = this.l;
	    hsl.a = this.a;
	    return hsl;
	  },
	  copy: function(hsl) {
	    this.h = hsl.h;
	    this.s = hsl.s;
	    this.l = hsl.l;
	    this.a = hsl.a;
	    return this;
	  },
	  getStyle: function() {
	    var self = this;
	    if (self.a === undefined) {
	      return 'hsl(' + Math.round(self.h * 360) + ', ' + Math.round(self.s * 100) + '%, ' + Math.round(self.l * 100) + '%)';
	    } else {
	      return 'hsla(' + Math.round(self.h * 360) + ', ' + Math.round(self.s * 100) + '%, ' + Math.round(self.l * 100) + '%, ' + self.a +')';
	    }
	  }
	});
	
	module.exports = HSL;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var gMath = __webpack_require__(187);
	
	var RGB = function() {
	  this.r = 0;
	  this.g = 0;
	  this.b = 0;
	  this.type = 'rgb';
	}
	
	Util.augment(RGB, {
	  type: 'rgb',
	  setRGB: function(r, g, b, a) {
	    this.r = gMath.clamp(r, 0, 1);
	    this.g = gMath.clamp(g, 0, 1);
	    this.b = gMath.clamp(b, 0, 1);
	    if (a !== undefined) {
	      this.a = gMath.clamp(a, 0, 1);
	    } else {
	      this.a = undefined;
	    }
	  },
	  toHSL: function() {
	    // h,s,l ranges are in 0.0 - 1.0
	    var r = this.r, g = this.g, b = this.b;
	    var max = Math.max( r, g, b );
	    var min = Math.min( r, g, b );
	    var hue, saturation;
	    var lightness = ( min + max ) / 2.0;
	    if ( min === max ) {
	      hue = 0;
	      saturation = 0;
	    } else {
	      var delta = max - min;
	      saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
	      switch ( max ) {
	        case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
	        case g: hue = ( b - r ) / delta + 2; break;
	        case b: hue = ( r - g ) / delta + 4; break;
	      }
	      hue /= 6;
	    }
	
	    return {
	      h: hue,
	      s: saturation,
	      l: lightness,
	      a: this.a
	    };
	  },
	  getHex: function() {
	    var hex = ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
	    return '#' + ('000000' + hex.toString(16)).slice(-6);
	  },
	  getStyle: function() {
	    if (this.a === undefined) {
	      return 'rgb(' + Math.round(this.r * 255).toString() + ', ' + Math.round(this.g * 255).toString() + ', ' + Math.round(this.b * 255).toString() + ')';
	    } else {
	      return 'rgba(' + Math.round(this.r * 255).toString() + ', ' + Math.round(this.g * 255).toString() + ', ' + Math.round(this.b * 255).toString() + ', ' + this.a + ')';
	    }
	  },
	  getPreStyle: function() {
	    if (this.a === undefined) {
	      return 'rgb(' + Math.round(this.r * 100).toString() + '%, ' + Math.round(this.g * 100).toString() + '%, ' + Math.round(this.b * 100).toString() + '%)';
	    } else {
	      return 'rgba(' + Math.round(this.r * 100).toString() + '%, ' + Math.round(this.g * 100).toString() + '%, ' + Math.round(this.b * 100).toString() + '%, ' + this.a + ')';
	    }
	  },
	  clone: function() {
	    var rgb = new RGB();
	    rgb.r = this.r;
	    rgb.g = this.g;
	    rgb.b = this.b;
	    rgb.a = this.a;
	    return rgb;
	  },
	  copy: function(rgb) {
	    this.r = rgb.r;
	    this.g = rgb.g;
	    this.b = rgb.b;
	    this.a = rgb.a;
	    return this;
	  }
	});
	
	
	module.exports = RGB;
	


/***/ }),
/* 212 */
/***/ (function(module, exports) {

	module.exports = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var singular = __webpack_require__(205);
	
	function object(a, b) {
	  var x = {};
	
	  for (var k in a) {
	    if (k in b) {
	      x[k] = singular.singular(a[k], b[k]);
	    }
	  }
	
	  return function(t) {
	    var c = {};
	    for (var k in x) {
	      c[k] = x[k](t);
	    }
	    return c;
	  }
	}
	
	function unObject(a, b) {
	  var x = {};
	  for (var k in a) {
	    if (k in b) {
	      x[k] = singular.unSingular(a[k], b[k]);
	    }
	  }
	
	  return function(c) {
	    var rst = 0;
	    var num = 0;
	    for (var k in x) {
	      if (k in c) {
	        rst += x[k](c[k]);
	        num ++;
	      }
	    }
	    return num === 0 ? 0 : rst / num;
	  }
	}
	
	module.exports = {
	  object: object,
	  unObject: unObject
	};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var singular = __webpack_require__(205);
	var Matrix = __webpack_require__(185);
	var Matrix3 = Matrix.Matrix3;
	
	var l = 9;
	
	function matrix(m1, m2) {
	  var x = [];
	  var m1e = m1.elements;
	  var m2e = m2.elements;
	
	  for (var i = 0; i < l; i ++) {
	    x[i] = singular.singular(m1e[i], m2e[i]);
	  }
	
	  return function(t) {
	    var m = new Matrix3();
	    var me = m.elements;
	
	    for (var i = 0; i < l; i ++) {
	      me[i] = x[i](t);
	    }
	
	    return m;
	  }
	}
	
	function unMatrix(m1, m2) {
	  var x = [];
	  var m1e = m1.elements;
	  var m2e = m2.elements;
	
	  for (var i = 0; i < l; i ++) {
	    x[i] = singular.unSingular(m1e[i], m2e[i]);
	  }
	
	  return function(m) {
	    var me = m.elements;
	    var rst = 0;
	    var num = 0;
	    for (var i = 0; i < l; i ++) {
	      var r = x[i](me[i]);
	      if (r !== 0) {
	        rst += r;
	        num ++;
	      }
	    }
	    return rst / num;
	  }
	}
	
	module.exports = {
	  matrix: matrix,
	  unMatrix: unMatrix
	};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 补间
	 * @author huangtonger@aliyun.com
	 * @ignore
	 */
	
	'use strict';
	
	var Base = __webpack_require__(197);
	var TweenUtil = __webpack_require__(200);
	var Util = __webpack_require__(169);
	var Ease = __webpack_require__(216);
	
	var Tween = function(cfg) {
	  Util.mix(this, cfg);
	  this._init();
	}
	
	Util.augment(Tween, {
	  /**
	   * 类型
	   * @type {String}
	   */
	  type: 'tween',
	  /**
	   * 画布对象
	   * @type {Object}
	   */
	  canvas: null,
	  /**
	   * 目标图形对象
	   * @type {Object}
	   */
	  target: null,
	  /**
	   * 起始时间
	   * @type {Number}
	   */
	  startTime: null,
	  /**
	   * 结束时间
	   * @type {Number}
	   */
	  endTime: null,
	  /**
	   * 持续时间
	   * @type {Number}
	   */
	  duration: null,
	  /**
	   * 绘制比率
	   * @type {Number}
	   */
	  ratio: 0,
	  /**
	   * 动画结束后是否要被清除目标对象
	   * @type {Boolean}
	   */
	  destroyTarget: false,
	  /**
	   * 是否要被清除
	   * @type {Boolean}
	   */
	  needsDestroy: false,
	  /**
	   * 是否可被执行
	   * @type {Boolean}
	   */
	  available: true,
	  /**
	   * 是否重复
	   * @type {Boolean}
	   */
	  repeat: false,
	  /**
	   * 回调函数
	   * @type {Function}
	   */
	  callBack: null,
	  /**
	   * 当前帧
	   * @type {Object}
	   */
	  currentFrame: null,
	  /**
	   * 起始关键帧
	   * @type {Object}
	   */
	  startKeyFrame: {
	    attrs: null,
	    matrix: null
	  },
	  /**
	   * 结束关键帧
	   * @type {Object}
	   */
	  endKeyFrame: {
	    attrs: null,
	    matrix: null
	  },
	  /**
	   * 插值器集
	   * @type {Object}
	   */
	  interpolations: null,
	  _init: function() {
	    var startTime = this.startTime;
	    var duration = this.duration;
	    this.endTime = startTime + duration;
	  },
	  /**
	   * 尝试执行
	   * @param  {Number} time 时间戳
	   */
	  tryStep: function(time) {
	    var startTime = this.startTime;
	    var duration = this.duration;
	    var startKeyFrame = this.startKeyFrame;
	    var target = this.target;
	    var realStartTime = startTime;
	    if(!target || target.get('destroyed')) {
	      this.needsDestroy = true;
	      return false;
	    }
	    try {
	      this.step(time);
	    } catch (ev) { // 异常，中断重绘
	      this.needsDestroy = true;
	      return false;
	    }
	  },
	  /**
	   * 执行
	   * @param  {Number} time 时间戳
	   */
	  step: function(time) {
	    var target = this.target; // 目标对象
	    var startTime = this.startTime; // 开始时间
	    var elapsed = time - startTime; // 逝去时间
	    var duration = this.duration; // 持续时间
	    var skf = this.startKeyFrame; // 开始帧
	    var ekf = this.endKeyFrame; // 结束帧
	    var easing = this.easing; // 缓动函数名
	    var interpolations = this.interpolations;
	    var ckf; // 当前帧
	    var ratio; // 真实比率
	    var easeRatio; // 绘制比率
	
	    if (!Util.isFunction(easing)) easing = Ease[easing] ? Ease[easing] : Ease['linear'];
	    ratio = elapsed / duration;
	    ratio = ratio <= 0 ? 0 : ratio >= 1 ? 1 : ratio;
	    easeRatio = easing(ratio);
	    ckf = TweenUtil.getFrame(easeRatio, skf, ekf, interpolations, target);
	    ckf.attrs && target.attr(ckf.attrs);
	    ckf.matrix && target.setMatrix(ckf.matrix);
	    this.ratio = ratio;
	    this.currentFrame = ckf;
	    this.updateStatus();
	    return target;
	  },
	  /**
	   * 更新状态
	   */
	  updateStatus: function() {
	    var ratio = this.ratio;
	    var callBack = this.callBack;
	    var destroyTarget = this.destroyTarget;
	    var target = this.target;
	    var repeat = this.repeat;
	    if (ratio >= 1) {
	      if (repeat) {
	        var startTime = this.startTime;
	        var endTime = this.endTime;
	        var duration = this.duration;
	        this.startTime = startTime + duration;
	        this.endTime = endTime + duration;
	        this.reset();
	      } else {
	        this.needsDestroy = true;
	        callBack && callBack.call(target);
	        destroyTarget && !target.get('destroyed') && target.remove(true);
	      }
	    } else {
	      return;
	    }
	  },
	  /**
	   * 重置当前补间
	   */
	  reset: function() {
	    var target = this.target;
	    var skf = this.startKeyFrame;
	    skf.attrs && target.attr(skf.attrs);
	    skf.matrix && target.setMatrix(skf.matrix);
	    this.ratio = 0;
	    this.needsDestroy = false;
	  },
	  destroy: function(){
	    var target = this.target;
	    var ekf = this.endKeyFrame;
	    if(target && !target.get('destroyed')){
	      ekf.attrs && target.attr(ekf.attrs);
	      ekf.matrix && target.setMatrix(ekf.matrix);
	    }
	    this.destroyed = true;
	  }
	});
	
	module.exports = Tween;


/***/ }),
/* 216 */
/***/ (function(module, exports) {

	var Ease = {
		linear: function (t) {
			return t;
		},
		easeInQuad: function (t) {
			return t * t;
		},
		easeOutQuad: function (t) {
			return -1 * t * (t - 2);
		},
		easeInOutQuad: function (t) {
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * t * t;
			}
			return -1 / 2 * ((--t) * (t - 2) - 1);
		},
		easeInCubic: function (t) {
			return t * t * t;
		},
		easeOutCubic: function (t) {
			return 1 * ((t = t / 1 - 1) * t * t + 1);
		},
		easeInOutCubic: function (t) {
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t + 2);
		},
		easeInQuart: function (t) {
			return t * t * t * t;
		},
		easeOutQuart: function (t) {
			return -1 * ((t = t / 1 - 1) * t * t * t - 1);
		},
		easeInOutQuart: function (t) {
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * t * t * t * t;
			}
			return -1 / 2 * ((t -= 2) * t * t * t - 2);
		},
		easeInQuint: function (t) {
			return 1 * (t /= 1) * t * t * t * t;
		},
		easeOutQuint: function (t) {
			return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
		},
		easeInOutQuint: function (t) {
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * t * t * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
		},
		easeInSine: function (t) {
			return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
		},
		easeOutSine: function (t) {
			return 1 * Math.sin(t / 1 * (Math.PI / 2));
		},
		easeInOutSine: function (t) {
			return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
		},
		easeInExpo: function (t) {
			return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
		},
		easeOutExpo: function (t) {
			return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
		},
		easeInOutExpo: function (t) {
			if (t === 0){
				return 0;
			}
			if (t === 1){
				return 1;
			}
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * Math.pow(2, 10 * (t - 1));
			}
			return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
		},
		easeInCirc: function (t) {
			if (t >= 1){
				return t;
			}
			return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
		},
		easeOutCirc: function (t) {
			return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
		},
		easeInOutCirc: function (t) {
			if ((t /= 1 / 2) < 1){
				return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
			}
			return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
		},
		easeInElastic: function (t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0){
				return 0;
			}
			if ((t /= 1) == 1){
				return 1;
			}
			if (!p){
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else{
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
		},
		easeOutElastic: function (t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0){
				return 0;
			}
			if ((t /= 1) == 1){
				return 1;
			}
			if (!p){
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else{
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
		},
		easeInOutElastic: function (t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0){
				return 0;
			}
			if ((t /= 1 / 2) == 2){
				return 1;
			}
			if (!p){
				p = 1 * (0.3 * 1.5);
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			if (t < 1){
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));}
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
		},
		easeInBack: function (t) {
			var s = 1.70158;
			return 1 * (t /= 1) * t * ((s + 1) * t - s);
		},
		easeOutBack: function (t) {
			var s = 1.70158;
			return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
		},
		easeInOutBack: function (t) {
			var s = 1.70158;
			if ((t /= 1 / 2) < 1){
				return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
			}
			return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
		},
		easeInBounce: function (t) {
			return 1 - Ease.easeOutBounce(1 - t);
		},
		easeOutBounce: function (t) {
			if ((t /= 1) < (1 / 2.75)) {
				return 1 * (7.5625 * t * t);
			} else if (t < (2 / 2.75)) {
				return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
			} else if (t < (2.5 / 2.75)) {
				return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
			} else {
				return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
			}
		},
		easeInOutBounce: function (t) {
			if (t < 1 / 2){
				return Ease.easeInBounce(t * 2) * 0.5;
			}
			return Ease.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
		}
	}
	module.exports = Ease;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var GMath = __webpack_require__(187);
	var GColor = __webpack_require__(208);
	
	var regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;
	var regexDot = /[^\s\,]+/ig;
	var regexLG = /^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i;
	var regexRG = /^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i;
	var regexPR = /^p\s*([axyn])\s+(.*)/i;
	var regexColorStop = /[\d.]+:(#[^\s]+|[^\)]+\))/ig;
	var numColorCache = {};
	
	function multiplyOpacity(color, opacity) {
	  if (opacity === undefined) {
	    return color;
	  }
	  color = new GColor(color);
	  color.multiplyA(opacity);
	  var type = color.getType();
	  if (type === 'hsl') {
	    return color.getHSLStyle();
	  } else if (type === 'rgb') {
	    return color.getRGBStyle();
	  }
	}
	
	function addStop(steps, gradient, opacity) {
	  var arr = steps.match(regexColorStop);
	  Util.each(arr, function(item) {
	    item = item.split(':');
	    var color = multiplyOpacity(item[1], opacity);
	    gradient.addColorStop(item[0], color);
	  });
	}
	
	function parseLineGradient(color, self, opacity) {
	  var arr = regexLG.exec(color);
	  var angle = GMath.mod(GMath.degreeToRad(parseFloat(arr[1])), Math.PI * 2);
	  var steps = arr[2];
	  var box = self.getBBox();
	  var start;
	  var end;
	
	  if (angle >= 0 && angle < 0.5 * Math.PI) {
	    start = {
	      x: box.minX,
	      y: box.minY
	    };
	    end = {
	      x: box.maxX,
	      y: box.maxY
	    };
	  } else if (0.5 * Math.PI <= angle && angle < Math.PI) {
	    start = {
	      x: box.maxX,
	      y: box.minY
	    };
	    end = {
	      x: box.minX,
	      y: box.maxY
	    };
	  } else if (Math.PI <= angle && angle < 1.5 * Math.PI) {
	    start = {
	      x: box.maxX,
	      y: box.maxY
	    };
	    end = {
	      x: box.minX,
	      y: box.minY
	    };
	  } else {
	    start = {
	      x: box.minX,
	      y: box.maxY
	    };
	    end = {
	      x: box.maxX,
	      y: box.minY
	    };
	  }
	
	  var tanTheta = Math.tan(angle);
	  var tanTheta2 = tanTheta * tanTheta;
	
	  var x = ((end.x - start.x) + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;
	  var y = tanTheta * ((end.x - start.x) + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;
	  var context = self.get('context');
	  var gradient = context.createLinearGradient(start.x, start.y, x, y);
	  addStop(steps, gradient, opacity);
	  return gradient;
	}
	
	function parseRadialGradient(color, self, opacity) {
	  var arr = regexRG.exec(color);
	  var fx = parseFloat(arr[1]);
	  var fy = parseFloat(arr[2]);
	  var fr = parseFloat(arr[3]);
	  var steps = arr[4];
	  var box = self.getBBox();
	  var context = self.get('context');
	  var width = box.maxX - box.minX;
	  var height = box.maxY - box.minY;
	  var r = Math.sqrt(width * width + height * height) / 2;
	  var gradient = context.createRadialGradient(box.minX + width * fx, box.minY + height * fy, fr, box.minX + width / 2, box.minY + height / 2, r);
	  addStop(steps, gradient, opacity);
	  return gradient;
	}
	
	function parsePattern(color, self) {
	  var arr = regexPR.exec(color);
	  var repeat = arr[1];
	  var id = arr[2];
	  switch (repeat) {
	    case 'a':
	      repeat = 'repeat';
	      break;
	    case 'x':
	      repeat = 'repeat-x';
	      break;
	    case 'y':
	      repeat = 'repeat-y';
	      break;
	    case 'n':
	      repeat = 'no-repeat';
	      break;
	    default:
	      repeat = 'no-repeat';
	  }
	  var img = document.getElementById(id);
	  var context = self.get('context');
	  var pattern = context.createPattern(img, repeat);
	  return pattern;
	}
	
	module.exports = {
	  parsePath: function(path) {
	    path = path || [];
	    if (Util.isArray(path)) {
	      return path;
	    }
	
	    if (Util.isString(path)) {
	      path = path.match(regexTags);
	      Util.each(path, function(item, index) {
	        item = item.match(regexDot);
	        if (item[0].length > 1) {
	          var tag = item[0].charAt(0);
	          item.splice(1, 0, item[0].substr(1));
	          item[0] = tag;
	        }
	        Util.each(item, function(sub, i) {
	          if (!isNaN(sub)) {
	            item[i] = +sub;
	          }
	        });
	        path[index] = item;
	      });
	      return path;
	    }
	  },
	  parseStyle: function(color, self, opacity) {
	    if (Util.isString(color)) {
	      if (color[1] === '(' || color[2] === '(') {
	        if (color[0] === 'l') { // regexLG.test(color)
	          return parseLineGradient(color, self, opacity);
	        } else if (color[0] === 'r') { // regexRG.test(color)
	          return parseRadialGradient(color, self, opacity);
	        } else if (color[0] === 'p') {// regexPR.test(color)
	          return parsePattern(color, self);
	        }
	      }
	      if (Util.isNull(opacity)) {
	        return color;
	      }
	      return multiplyOpacity(color, opacity);
	    }
	  },
	  numberToColor: function(num) {
	    // 增加缓存
	    var color = numColorCache[num];
	    if (!color) {
	      var str = num.toString(16);
	      for (var i = str.length; i < 6; i++) {
	        str = '0' + str;
	      }
	      color = '#' + str;
	      numColorCache[num] = color;
	    }
	    return color;
	  }
	};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Event = __webpack_require__(219);
	
	module.exports = {
	  /**
	   * 事件分发器的处理函数
	   */
	  initEventDispatcher: function() {
	    this.__listeners = {};
	  },
	  /**
	   * 为对象注册事件
	   * @param  {String} type 事件类型
	   * @param  {Function} listener 回调函数
	   * @return {Object} this
	   */
	  on: function(type, listener) {
	    var listeners = this.__listeners;
	
	    if (Util.isNull(listeners[type])) {
	      listeners[type] = [];
	    }
	
	    if (listeners[type].indexOf(listener) === -1) {
	      listeners[type].push(listener);
	    }
	    return this;
	  },
	  /**
	   * 为对象取消事件回调
	   * 三个模式
	   * 模式1: 没有参数的时候，取消所有回调处理函数
	   * 模式2: 只有type的时候，取消所有type的回调类别
	   * 模式3: 同时具有type, listener参数时，只取消type中listener对应的回调
	   * @param  {String} type 事件类型
	   * @param  {Function} listener 回调函数
	   * @return {Object} this
	   */
	  off: function(type, listener) {
	    var listeners = this.__listeners;
	    if (arguments.length === 0) {
	      this.__listeners = {};
	      return this;
	    }
	
	    if (arguments.length === 1 && Util.isString(type)) {
	      listeners[type] = [];
	      return this;
	    }
	
	    if (arguments.length === 2 && Util.isString(type) && Util.isFunction(listener)) {
	      Util.remove(listeners[type], listener);
	      return this;
	    }
	  },
	  /**
	   * 判断某个listener是否是当前对象的回调函数
	   * @param  {String} type 事件类型
	   * @param  {Function} listener 回调函数
	   * @return {Object} this
	   */
	  has: function(type, listener) {
	    var listeners = this.__listeners;
	
	    if (arguments.length === 0) {
	      if (!Util.isBlank(listeners)) {
	        return true;
	      }
	    }
	
	    if (arguments.length === 1) {
	      if (listeners[type] && !Util.isBlank(listeners[type])) {
	        return true;
	      }
	    }
	
	    if (arguments.length === 2) {
	      if (listeners[type] && listeners[type].indexOf(listener) !== -1) {
	        return true;
	      }
	    }
	
	    return false;
	  },
	  trigger: function(event) {
	    var self = this;
	    var listeners = self.__listeners;
	    var listenersArray = listeners[event.type];
	    event.target = self;
	    if (Util.notNull(listenersArray)) {
	      listenersArray.forEach(function(listener) {
	        listener.call(self, event);
	      });
	    }
	    if (event.bubbles) {
	      var parent = self.get('parent');
	      if (parent && !event.propagationStopped) {
	        parent.trigger(event);
	      }
	    }
	    return self;
	  },
	  /**
	   * fire the event
	   * @param  {String} eventType event type
	   */
	  fire: function(eventType, eventObj) {
	    var event = new Event(eventType);
	    Util.each(eventObj, function(v, k) {
	      event[k] = v;
	    });
	    this.trigger(event);
	  }
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 事件基类
	 # @author hankaiai@126.com 韩凯
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Event = function(type, event, bubbles, cancelable) {
	  this.type = type; // 事件类型
	  this.target = null; // 目标
	  this.currentTarget = null; // 当前目标
	  this.bubbles = bubbles; // 冒泡
	  this.cancelable = cancelable; // 是否能够阻止
	  this.timeStamp = (new Date()).getTime(); // 时间戳
	  this.defaultPrevented = false; // 阻止默认
	  this.propagationStopped = false; // 阻止冒泡
	  this.removed = false; // 是否被移除
	  this.event = event; // 触发的原生事件
	};
	
	
	Util.augment(Event, {
	  preventDefault: function() {
	    this.defaultPrevented = this.cancelable && true;
	  },
	  stopPropagation: function() {
	    this.propagationStopped = true;
	  },
	  remove: function() {
	    this.remove = true;
	  },
	  clone: function() {
	    return Util.clone(this);
	  },
	  toString: function() {
	    return '[Event (type=' + this.type + ')]';
	  }
	});
	
	module.exports = Event;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	var Shape = {
	  Rect: __webpack_require__(221),
	  Circle: __webpack_require__(228),
	  Ellipse: __webpack_require__(229),
	  Path: __webpack_require__(230),
	  Text: __webpack_require__(234),
	  Line: __webpack_require__(235),
	  Image: __webpack_require__(236),
	  Polygon: __webpack_require__(237),
	  Polyline: __webpack_require__(238),
	  Arc: __webpack_require__(239),
	  Fan: __webpack_require__(240),
	  Cubic: __webpack_require__(241),
	  Quadratic: __webpack_require__(242),
	  Marker: __webpack_require__(243)
	};
	
	module.exports = Shape;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 矩形
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	
	var Rect = function(cfg) {
	  Rect.superclass.constructor.call(this, cfg);
	};
	
	Rect.ATTRS = {
	  x: 0,
	  y: 0,
	  width: 0,
	  height: 0,
	  radius: 0,
	  lineWidth: 1
	};
	
	Util.extend(Rect, Shape);
	
	Util.augment(Rect, {
	  canFill: true,
	  canStroke: true,
	  type: 'rect',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1,
	      radius: 0
	    };
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var width = attrs.width;
	    var height = attrs.height;
	    var lineWidth = attrs.lineWidth;
	
	    var halfWidth = lineWidth / 2;
	    return {
	      minX: x - halfWidth,
	      minY: y - halfWidth,
	      maxX: x + width + halfWidth,
	      maxY: y + height + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var fill = self.hasFill();
	    var stroke = self.hasStroke();
	
	    if (fill && stroke) {
	      return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return self.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return self.__isPointInStroke(x, y);
	    }
	
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var context = this.get('context');
	
	    if (!context) return false;
	    this.createPath();
	    return context.isPointInPath(x, y);
	  },
	  __isPointInStroke: function(x, y) {
	    var self = this;
	    var attrs = self.__attrs;
	    var rx = attrs.x;
	    var ry = attrs.y;
	    var width = attrs.width;
	    var height = attrs.height;
	    var radius = attrs.radius;
	    var lineWidth = attrs.lineWidth;
	
	    if (radius === 0) {
	      var halfWidth = lineWidth / 2;
	      return Inside.line(rx - halfWidth, ry, rx + width + halfWidth, ry, lineWidth, x, y) ||
	        Inside.line(rx + width, ry - halfWidth, rx + width, ry + height + halfWidth, lineWidth, x, y) ||
	        Inside.line(rx + width + halfWidth, ry + height, rx - halfWidth, ry + height, lineWidth, x, y) ||
	        Inside.line(rx, ry + height + halfWidth, rx, ry - halfWidth, lineWidth, x, y);
	    }
	
	    return Inside.line(rx + radius, ry, rx + width - radius, ry, lineWidth, x, y) ||
	      Inside.line(rx + width, ry + radius, rx + width, ry + height - radius, lineWidth, x, y) ||
	      Inside.line(rx + width - radius, ry + height, rx + radius, ry + height, lineWidth, x, y) ||
	      Inside.line(rx, ry + height - radius, rx, ry + radius, lineWidth, x, y) ||
	      Inside.arcline(rx + width - radius, ry + radius, radius, 1.5 * Math.PI, 2 * Math.PI, false, lineWidth, x, y) ||
	      Inside.arcline(rx + width - radius, ry + height - radius, radius, 0, 0.5 * Math.PI, false, lineWidth, x, y) ||
	      Inside.arcline(rx + radius, ry + height - radius, radius, 0.5 * Math.PI, Math.PI, false, lineWidth, x, y) ||
	      Inside.arcline(rx + radius, ry + radius, radius, Math.PI, 1.5 * Math.PI, false, lineWidth, x, y);
	  },
	  createPath: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var width = attrs.width;
	    var height = attrs.height;
	    var radius = attrs.radius;
	    context = context || self.get('context');
	
	    context.beginPath();
	    if (radius === 0) {
	      // 改成原生的rect方法
	      context.rect(x, y, width, height);
	    } else {
	      context.moveTo(x + radius, y);
	      context.lineTo(x + width - radius, y);
	      context.arc(x + width - radius, y + radius, radius, -Math.PI / 2, 0, false);
	      context.lineTo(x + width, y + height - radius);
	      context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2, false);
	      context.lineTo(x + radius, y + height);
	      context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI, false);
	      context.lineTo(x, y + radius);
	      context.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 3 / 2, false);
	      context.closePath();
	    }
	  }
	});
	
	module.exports = Rect;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Element = __webpack_require__(191);
	var Inside = __webpack_require__(223);
	var Vector3 = __webpack_require__(185).Vector3;
	
	var Shape = function(cfg) {
	  Shape.superclass.constructor.call(this, cfg);
	};
	
	Shape.ATTRS = {};
	
	Util.extend(Shape, Element);
	
	Util.augment(Shape, {
	  isShape: true,
	  createPath: function() {},
	  drawInner: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    self.createPath(context);
	    var originOpacity = context.globalAlpha;
	    if (self.hasFill()) {
	      var fillOpacity = attrs.fillOpacity;
	      if (!Util.isNull(fillOpacity) && fillOpacity !== 1) {
	        context.globalAlpha = fillOpacity;
	        context.fill();
	        context.globalAlpha = originOpacity;
	      } else {
	        context.fill();
	      }
	    }
	    if (self.hasStroke()) {
	      var lineWidth = self.__attrs.lineWidth;
	      if (lineWidth > 0) {
	        var strokeOpacity = attrs.strokeOpacity;
	        if (!Util.isNull(strokeOpacity) && strokeOpacity !== 1) {
	          context.globalAlpha = strokeOpacity;
	        }
	        context.stroke();
	      }
	    }
	  },
	  /**
	   * 节点是否在图形中
	   * @param  {Number}  x x 坐标
	   * @param  {Number}  y y 坐标
	   * @return {Boolean}  是否在图形中
	   */
	  isPointInPath: function() {
	    return false;
	  },
	  /**
	   * 击中图形时是否进行包围盒判断
	   * @return {Boolean} [description]
	   */
	  isHitBox: function() {
	    return true;
	  },
	  /**
	   * 节点是否能够被击中
	   * @param {Number} x x坐标
	   * @param {Number} y y坐标
	   * @return {Boolean} 是否在图形中
	   */
	  isHit: function(x, y) {
	    var self = this;
	    var v = new Vector3(x, y, 1);
	    self.invert(v); // canvas
	
	    if (self.isHitBox()) {
	      var box = self.getBBox();
	      if (box && !Inside.box(box.minX, box.maxX, box.minY, box.maxY, v.x, v.y)) {
	        return false;
	      }
	    }
	    var clip = self.__attrs.clip;
	    if (clip) {
	      if (clip.inside(x, y)) {
	        return self.isPointInPath(v.x, v.y);
	      }
	    } else {
	      return self.isPointInPath(v.x, v.y);
	    }
	    return false;
	  },
	  /**
	   * @protected
	   * 计算包围盒
	   * @return {Object} 包围盒
	   */
	  calculateBox: function() {
	    return null;
	  },
	  // 清除当前的矩阵
	  clearTotalMatrix: function() {
	    this.__cfg.totalMatrix = null;
	    this.__cfg.region = null;
	  },
	  clearBBox: function() {
	    this.__cfg.box = null;
	    this.__cfg.region = null;
	  },
	  getBBox: function() {
	    var box = this.__cfg.box;
	    // 延迟计算
	    if (!box) {
	      box = this.calculateBox();
	      if (box) {
	        box.x = box.minX;
	        box.y = box.minY;
	        box.width = box.maxX - box.minX;
	        box.height = box.maxY - box.minY;
	      }
	      this.__cfg.box = box;
	    }
	    return box;
	  }
	});
	
	module.exports = Shape;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview isInside
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Line = __webpack_require__(224);
	var Quadratic = __webpack_require__(225);
	var Cubic = __webpack_require__(226);
	var Arc = __webpack_require__(227);
	
	module.exports = {
	  line: function(x1, y1, x2, y2, lineWidth, x, y) {
	    var box = Line.box(x1, y1, x2, y2, lineWidth);
	
	    if (!this.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	      return false;
	    }
	
	    var d = Line.pointDistance(x1, y1, x2, y2, x, y);
	    if (isNaN(d)) {
	      return false;
	    }
	    return d <= lineWidth / 2;
	  },
	  polyline: function(points, lineWidth, x, y) {
	    var l = points.length - 1;
	    if (l < 1) {
	      return false;
	    }
	    for (var i = 0; i < l; i ++) {
	      var x1 = points[i][0];
	      var y1 = points[i][1];
	      var x2 = points[i + 1][0];
	      var y2 = points[i + 1][1];
	
	      if (this.line(x1, y1, x2, y2, lineWidth, x, y)) {
	        return true;
	      }
	    }
	
	    return false;
	  },
	  cubicline: function(x1, y1, x2, y2, x3, y3, x4, y4, lineWidth, x, y) {
	    return Cubic.pointDistance(x1, y1, x2, y2, x3, y3, x4, y4, x, y) <= lineWidth / 2;
	  },
	  quadraticline: function(x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	    return Quadratic.pointDistance(x1, y1, x2, y2, x3, y3, x, y) <= lineWidth / 2;
	  },
	  arcline: function(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y) {
	    return Arc.pointDistance(cx, cy, r, startAngle, endAngle, clockwise, x, y) <= lineWidth / 2;
	  },
	  rect: function(rx, ry, width, height, x, y) {
	    return rx <= x && x <= rx + width && ry <= y && y <= ry + height;
	  },
	  circle: function(cx, cy, r, x, y) {
	    return Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(r, 2);
	  },
	  box: function(minX, maxX, minY, maxY, x, y) {
	    return minX <= x && x <= maxX && minY <= y && y <= maxY;
	  }
	};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 直线算法
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Vector2 = __webpack_require__(185).Vector2;
	
	module.exports = {
	  at: function(p1, p2, t) {
	    return (p2 - p1) * t + p1;
	  },
	  pointDistance: function(x1, y1, x2, y2, x, y) {
	    var d = new Vector2(x2 - x1, y2 - y1);
	    if (d.isZero()) {
	      return NaN;
	    }
	
	    var u = d.vertical();
	    u.normalize();
	    var a = new Vector2(x - x1, y - y1);
	    return Math.abs(a.dot(u));
	  },
	  box: function(x1, y1, x2, y2, lineWidth) {
	    var halfWidth = lineWidth / 2;
	    var minX = Math.min(x1, x2);
	    var maxX = Math.max(x1, x2);
	    var minY = Math.min(y1, y2);
	    var maxY = Math.max(y1, y2);
	
	    return {
	      minX: minX - halfWidth,
	      minY: minY - halfWidth,
	      maxX: maxX + halfWidth,
	      maxY: maxY + halfWidth
	    };
	  },
	  len: function(x1, y1, x2, y2) {
	    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	  }
	};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 二次贝赛尔曲线算法
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Vector2 = __webpack_require__(185).Vector2;
	var GMath = __webpack_require__(187);
	
	function quadraticAt(p0, p1, p2, t) {
	  var onet = 1 - t;
	  return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}
	
	function quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, out) {
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  var d1;
	  var v1;
	  var v2;
	  var _t;
	  var d2;
	  var i;
	  var EPSILON = 0.0001;
	  var v0 = new Vector2(x, y);
	
	  for (_t = 0; _t < 1; _t += 0.05) {
	    v1 = new Vector2(
	      quadraticAt(x1, x2, x3, _t),
	      quadraticAt(y1, y2, y3, _t)
	    );
	
	    d1 = v1.distanceToSquared(v0);
	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }
	  d = Infinity;
	
	  for (i = 0; i < 32; i++) {
	    if (interval < EPSILON) {
	      break;
	    }
	
	    var prev = t - interval;
	    var next = t + interval;
	
	    v1 = new Vector2(
	      quadraticAt(x1, x2, x3, prev),
	      quadraticAt(y1, y2, y3, prev)
	    );
	
	    d1 = v1.distanceToSquared(v0);
	
	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      v2 = new Vector2(
	        quadraticAt(x1, x2, x3, next),
	        quadraticAt(y1, y2, y3, next)
	      );
	
	      d2 = v2.distanceToSquared(v0);
	
	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  }
	
	  if (out) {
	    out.x = quadraticAt(x1, x2, x3, t);
	    out.y = quadraticAt(y1, y2, y3, t);
	  }
	
	  return Math.sqrt(d);
	}
	
	
	function quadraticExtrema(p0, p1, p2) {
	  var a = p0 + p2 - 2 * p1;
	  if (GMath.equal(a, 0)) {
	    return [0.5];
	  }
	  var rst = (p0 - p1) / a;
	  if (rst <= 1 && rst >= 0) {
	    return [rst];
	  }
	  return [];
	}
	
	module.exports = {
	  at: quadraticAt,
	  projectPoint: function(x1, y1, x2, y2, x3, y3, x, y) {
	    var rst = {};
	    quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, rst);
	    return rst;
	  },
	  pointDistance: quadraticProjectPoint,
	  extrema: quadraticExtrema
	};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 三次贝赛尔曲线算法
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Vector2 = __webpack_require__(185).Vector2;
	var GMath = __webpack_require__(187);
	var Util = __webpack_require__(169);
	
	function cubicAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return onet * onet * (onet * p3 + 3 * t * p2) + t * t * (t * p0 + 3 * onet * p1);
	}
	
	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return 3 * (
	    ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet +
	    (p3 - p2) * t * t
	  );
	}
	
	function cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, out) {
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  var _t;
	  var v1;
	  var d1;
	  var d2;
	  var v2;
	  var prev;
	  var next;
	  var EPSILON = 0.0001;
	  var v0 = new Vector2(x, y);
	
	  for (_t = 0; _t < 1; _t += 0.05) {
	    v1 = new Vector2(
	      cubicAt(x1, x2, x3, x4, _t),
	      cubicAt(y1, y2, y3, y4, _t)
	    );
	
	
	    d1 = v1.distanceToSquared(v0);
	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }
	  d = Infinity;
	
	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON) {
	      break;
	    }
	
	    prev = t - interval;
	    next = t + interval;
	
	    v1 = new Vector2(
	      cubicAt(x1, x2, x3, x4, prev),
	      cubicAt(y1, y2, y3, y4, prev)
	    );
	
	    d1 = v1.distanceToSquared(v0);
	
	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      v2 = new Vector2(
	        cubicAt(x1, x2, x3, x4, next),
	        cubicAt(y1, y2, y3, y4, next)
	      );
	
	      d2 = v2.distanceToSquared(v0);
	
	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  }
	
	  if (out) {
	    out.x = cubicAt(x1, x2, x3, x4, t);
	    out.y = cubicAt(y1, y2, y3, y4, t);
	  }
	
	  return Math.sqrt(d);
	}
	
	function cubicExtrema(p0, p1, p2, p3) {
	  var a = 3 * p0 - 9 * p1 + 9 * p2 - 3 * p3;
	  var b = 6 * p1 - 12 * p2 + 6 * p3;
	  var c = 3 * p2 - 3 * p3;
	  var extrema = [];
	  var t1;
	  var t2;
	  var discSqrt;
	
	  if (GMath.equal(a, 0)) {
	    if (!GMath.equal(b, 0)) {
	      t1 = -c / b;
	      if (t1 >= 0 && t1 <= 1) {
	        extrema.push(t1);
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;
	    if (GMath.equal(disc, 0)) {
	      extrema.push(-b / (2 * a));
	    } else if (disc > 0) {
	      discSqrt = Math.sqrt(disc);
	      t1 = (-b + discSqrt) / (2 * a);
	      t2 = (-b - discSqrt) / (2 * a);
	      if (t1 >= 0 && t1 <= 1) {
	        extrema.push(t1);
	      }
	      if (t2 >= 0 && t2 <= 1) {
	        extrema.push(t2);
	      }
	    }
	  }
	  return extrema;
	}
	
	function base3(t, p1, p2, p3, p4) {
	  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
	  var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	  return t * t2 - 3 * p1 + 3 * p2;
	}
	
	function cubiclLen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	  if (Util.isNull(z)) {
	    z = 1;
	  }
	  z = z > 1 ? 1 : z < 0 ? 0 : z;
	  var z2 = z / 2;
	  var n = 12;
	  var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
	  var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
	  var sum = 0;
	  for (var i = 0; i < n; i++) {
	    var ct = z2 * Tvalues[i] + z2;
	    var xbase = base3(ct, x1, x2, x3, x4);
	    var ybase = base3(ct, y1, y2, y3, y4);
	    var comb = xbase * xbase + ybase * ybase;
	    sum += Cvalues[i] * Math.sqrt(comb);
	  }
	  return z2 * sum;
	}
	
	
	module.exports = {
	  at: cubicAt,
	  derivativeAt: cubicDerivativeAt,
	  projectPoint: function(x1, y1, x2, y2, x3, y3, x4, y4, x, y) {
	    var rst = {};
	    cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, rst);
	    return rst;
	  },
	  pointDistance: cubicProjectPoint,
	  extrema: cubicExtrema,
	  len: cubiclLen
	};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 圆弧线算法
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Vector2 = __webpack_require__(185).Vector2;
	var GMath = __webpack_require__(187);
	var Util = __webpack_require__(169);
	
	function circlePoint(cx, cy, r, angle) {
	  return {
	    x: Math.cos(angle) * r + cx,
	    y: Math.sin(angle) * r + cy
	  };
	}
	
	function angleNearTo(angle, min, max, out) {
	  var v1;
	  var v2;
	  if (out) {
	    if (angle < min) {
	      v1 = min - angle;
	      v2 = Math.PI * 2 - max + angle;
	    } else if (angle > max) {
	      v1 = Math.PI * 2 - angle + min;
	      v2 = angle - max;
	    }
	  } else {
	    v1 = angle - min;
	    v2 = max - angle;
	  }
	
	  return v1 > v2 ? max : min;
	}
	
	function nearAngle(angle, startAngle, endAngle, clockwise) {
	  var plus = 0;
	  if (endAngle - startAngle >= Math.PI * 2) {
	    plus = Math.PI * 2;
	  }
	  startAngle = GMath.mod(startAngle, Math.PI * 2);
	  endAngle = GMath.mod(endAngle, Math.PI * 2) + plus;
	  angle = GMath.mod(angle, Math.PI * 2);
	  if (clockwise) {
	    if (startAngle >= endAngle) {
	      if (angle > endAngle && angle < startAngle) {
	        return angle;
	      }
	      return angleNearTo(angle, endAngle, startAngle, true);
	    }
	    if (angle < startAngle || angle > endAngle) {
	      return angle;
	    }
	    return angleNearTo(angle, startAngle, endAngle);
	  }
	  if (startAngle <= endAngle) {
	    if (startAngle < angle && angle < endAngle) {
	      return angle;
	    }
	    return angleNearTo(angle, startAngle, endAngle, true);
	  }
	  if (angle > startAngle || angle < endAngle) {
	    return angle;
	  }
	  return angleNearTo(angle, endAngle, startAngle);
	}
	
	function arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, out) {
	  var v = new Vector2(x, y);
	  var v0 = new Vector2(cx, cy);
	  var v1 = new Vector2(1, 0);
	  var subv = Vector2.sub(v, v0);
	  var angle = v1.angleTo(subv);
	
	  angle = nearAngle(angle, startAngle, endAngle, clockwise);
	  var vpoint = new Vector2(r * Math.cos(angle) + cx, r * Math.sin(angle) + cy);
	  if (out) {
	    out.x = vpoint.x;
	    out.y = vpoint.y;
	  }
	  var d = v.distanceTo(vpoint);
	  return d;
	}
	
	function arcBox(cx, cy, r, startAngle, endAngle, clockwise) {
	  var angleRight = 0;
	  var angleBottom = Math.PI / 2;
	  var angleLeft = Math.PI;
	  var angleTop = Math.PI * 3 / 2;
	  var points = [];
	  var angle = nearAngle(angleRight, startAngle, endAngle, clockwise);
	  if (angle === angleRight) {
	    points.push(circlePoint(cx, cy, r, angleRight));
	  }
	
	  angle = nearAngle(angleBottom, startAngle, endAngle, clockwise);
	  if (angle === angleBottom) {
	    points.push(circlePoint(cx, cy, r, angleBottom));
	  }
	
	  angle = nearAngle(angleLeft, startAngle, endAngle, clockwise);
	  if (angle === angleLeft) {
	    points.push(circlePoint(cx, cy, r, angleLeft));
	  }
	
	  angle = nearAngle(angleTop, startAngle, endAngle, clockwise);
	  if (angle === angleTop) {
	    points.push(circlePoint(cx, cy, r, angleTop));
	  }
	
	  points.push(circlePoint(cx, cy, r, startAngle));
	  points.push(circlePoint(cx, cy, r, endAngle));
	  var minX = Infinity;
	  var maxX = -Infinity;
	  var minY = Infinity;
	  var maxY = -Infinity;
	  Util.each(points, function(point) {
	    if (minX > point.x) {
	      minX = point.x;
	    }
	    if (maxX < point.x) {
	      maxX = point.x;
	    }
	    if (minY > point.y) {
	      minY = point.y;
	    }
	    if (maxY < point.y) {
	      maxY = point.y;
	    }
	  });
	
	  return {
	    minX: minX,
	    minY: minY,
	    maxX: maxX,
	    maxY: maxY
	  };
	}
	
	module.exports = {
	  nearAngle: nearAngle,
	  projectPoint: function(cx, cy, r, startAngle, endAngle, clockwise, x, y) {
	    var rst = {};
	    arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, rst);
	    return rst;
	  },
	  pointDistance: arcProjectPoint,
	  box: arcBox
	};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview circle
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	
	var Circle = function(cfg) {
	  Circle.superclass.constructor.call(this, cfg);
	};
	
	Circle.ATTRS = {
	  x: 0,
	  y: 0,
	  r: 0,
	  lineWidth: 1
	};
	
	Util.extend(Circle, Shape);
	
	Util.augment(Circle, {
	  canFill: true,
	  canStroke: true,
	  type: 'circle',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    var lineWidth = attrs.lineWidth;
	    var halfWidth = lineWidth / 2 + r;
	    return {
	      minX: cx - halfWidth,
	      minY: cy - halfWidth,
	      maxX: cx + halfWidth,
	      maxY: cy + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var fill = this.hasFill();
	    var stroke = this.hasStroke();
	    if (fill && stroke) {
	      return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return this.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return this.__isPointInStroke(x, y);
	    }
	
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	
	    return Inside.circle(cx, cy, r, x, y);
	  },
	  __isPointInStroke: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    var lineWidth = attrs.lineWidth;
	
	    return Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    context = context || self.get('context');
	
	    context.beginPath();
	    context.arc(cx, cy, r, 0, Math.PI * 2, false);
	  }
	});
	
	module.exports = Circle;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Ellipse
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Matrix = __webpack_require__(185);
	var Matrix3 = Matrix.Matrix3;
	var Vector3 = Matrix.Vector3;
	
	var Ellipse = function(cfg) {
	  Ellipse.superclass.constructor.call(this, cfg);
	};
	
	Ellipse.ATTRS = {
	  x: 0,
	  y: 0,
	  rx: 1,
	  ry: 1,
	  lineWidth: 1
	};
	
	Util.extend(Ellipse, Shape);
	
	Util.augment(Ellipse, {
	  canFill: true,
	  canStroke: true,
	  type: 'ellipse',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rx = attrs.rx;
	    var ry = attrs.ry;
	    var lineWidth = attrs.lineWidth;
	    var halfXWidth = rx + lineWidth / 2;
	    var halfYWidth = ry + lineWidth / 2;
	
	    return {
	      minX: cx - halfXWidth,
	      minY: cy - halfYWidth,
	      maxX: cx + halfXWidth,
	      maxY: cy + halfYWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var fill = this.hasFill();
	    var stroke = this.hasStroke();
	
	    if (fill && stroke) {
	      return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return this.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return this.__isPointInStroke(x, y);
	    }
	
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rx = attrs.rx;
	    var ry = attrs.ry;
	
	    var r = (rx > ry) ? rx : ry;
	    var scaleX = (rx > ry) ? 1 : rx / ry;
	    var scaleY = (rx > ry) ? ry / rx : 1;
	
	    var p = new Vector3(x, y, 1);
	    var m = new Matrix3();
	    m.scale(scaleX, scaleY);
	    m.translate(cx, cy);
	    var inm = m.getInverse();
	    p.applyMatrix(inm);
	
	    return Inside.circle(0, 0, r, p.x, p.y);
	  },
	  __isPointInStroke: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rx = attrs.rx;
	    var ry = attrs.ry;
	    var lineWidth = attrs.lineWidth;
	
	    var r = (rx > ry) ? rx : ry;
	    var scaleX = (rx > ry) ? 1 : rx / ry;
	    var scaleY = (rx > ry) ? ry / rx : 1;
	
	    var p = new Vector3(x, y, 1);
	    var m = new Matrix3();
	    m.scale(scaleX, scaleY);
	    m.translate(cx, cy);
	    var inm = m.getInverse();
	    p.applyMatrix(inm);
	
	    return Inside.arcline(0, 0, r, 0, Math.PI * 2, false, lineWidth, p.x, p.y);
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rx = attrs.rx;
	    var ry = attrs.ry;
	
	    context = context || self.get('context');
	    var r = (rx > ry) ? rx : ry;
	    var scaleX = (rx > ry) ? 1 : rx / ry;
	    var scaleY = (rx > ry) ? ry / rx : 1;
	
	    var m = new Matrix3();
	    m.scale(scaleX, scaleY);
	    m.translate(cx, cy);
	    var mo = m.to2DObject();
	    context.beginPath();
	    context.save();
	    context.transform(mo.a, mo.b, mo.c, mo.d, mo.e, mo.f);
	    context.arc(0, 0, r, 0, Math.PI * 2);
	    context.restore();
	    context.closePath();
	  }
	});
	
	module.exports = Ellipse;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Path
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @see http://www.w3.org/TR/2011/REC-SVG11-20110816/paths.html#PathData
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var PathSegment = __webpack_require__(231);
	var Format = __webpack_require__(217);
	var Arrow = __webpack_require__(233);
	var pathUtil = __webpack_require__(178);
	var CubicMath = __webpack_require__(226);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Path = function(cfg) {
	  Path.superclass.constructor.call(this, cfg);
	};
	
	Path.ATTRS = {
	  path: null,
	  lineWidth: 1,
	  curve: null, // 曲线path
	  tCache: null
	};
	
	Util.extend(Path, Shape);
	
	Util.augment(Path, {
	  canFill: true,
	  canStroke: true,
	  type: 'path',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1
	    };
	  },
	  __afterSetAttrPath: function(path) {
	    var self = this;
	    if (Util.isNull(path)) {
	      self.setSilent('segments', null);
	      self.setSilent('box', undefined);
	      return;
	    }
	    var pathArray = Format.parsePath(path);
	    var preSegment;
	    var segments = [];
	
	    if (!Util.isArray(pathArray) ||
	      pathArray.length === 0 ||
	      (pathArray[0][0] !== 'M' &&
	        pathArray[0][0] !== 'm')
	    ) {
	      return;
	    }
	    var count = pathArray.length;
	    for (var i = 0; i < pathArray.length; i++) {
	      var item = pathArray[i];
	      preSegment = new PathSegment(item, preSegment, i === count - 1);
	      segments.push(preSegment);
	    }
	    self.setSilent('segments', segments);
	    self.set('tCache', null);
	    this.setSilent('box', null);
	  },
	  __afterSetAttrAll: function(objs) {
	    if (objs.path) {
	      this.__afterSetAttrPath(objs.path);
	    }
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var lineWidth = attrs.lineWidth;
	    var lineAppendWidth = attrs.lineAppendWidth || 0;
	    var segments = self.get('segments');
	
	    if (!segments) {
	      return null;
	    }
	    lineWidth += lineAppendWidth;
	    var minX = Infinity;
	    var maxX = -Infinity;
	    var minY = Infinity;
	    var maxY = -Infinity;
	    Util.each(segments, function(segment) {
	      segment.getBBox(lineWidth);
	      var box = segment.box;
	      if (box) {
	        if (box.minX < minX) {
	          minX = box.minX;
	        }
	
	        if (box.maxX > maxX) {
	          maxX = box.maxX;
	        }
	
	        if (box.minY < minY) {
	          minY = box.minY;
	        }
	
	        if (box.maxY > maxY) {
	          maxY = box.maxY;
	        }
	      }
	    });
	    return {
	      minX: minX,
	      minY: minY,
	      maxX: maxX,
	      maxY: maxY
	    };
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var fill = self.hasFill();
	    var stroke = self.hasStroke();
	
	    if (fill && stroke) {
	      return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return self.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return self.__isPointInStroke(x, y);
	    }
	
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var self = this;
	    var context = self.get('context');
	    if (!context) return undefined;
	    self.createPath();
	    return context.isPointInPath(x, y);
	  },
	  __isPointInStroke: function(x, y) {
	    var self = this;
	    var segments = self.get('segments');
	    var attrs = self.__attrs;
	    var lineWidth = attrs.lineWidth;
	    var appendWidth = attrs.lineAppendWidth || 0;
	    lineWidth += appendWidth;
	    for (var i = 0, l = segments.length; i < l; i++) {
	      if (segments[i].isInside(x, y, lineWidth)) {
	        return true;
	      }
	    }
	
	    return false;
	  },
	  __setTcache: function() {
	    var totalLength = 0;
	    var tempLength = 0;
	    var tCache = [];
	    var segmentT;
	    var segmentL;
	    var segmentN;
	    var l;
	    var curve = this.curve;
	
	    if (!curve) {
	      return;
	    }
	
	    Util.each(curve, function(segment, i) {
	      segmentN = curve[i + 1];
	      l = segment.length;
	      if (segmentN) {
	        totalLength += CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	      }
	    });
	
	    Util.each(curve, function(segment, i) {
	      segmentN = curve[i + 1];
	      l = segment.length;
	      if (segmentN) {
	        segmentT = [];
	        segmentT[0] = tempLength / totalLength;
	        segmentL = CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	        tempLength += segmentL;
	        segmentT[1] = tempLength / totalLength;
	        tCache.push(segmentT);
	      }
	    });
	
	    this.tCache = tCache;
	  },
	  __calculateCurve: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var path = attrs.path;
	    this.curve = pathUtil.toCurve(path);
	  },
	  getPoint: function(t) {
	    var tCache = this.tCache;
	    var curve;
	    var subt;
	    var index;
	    var seg;
	    var l;
	    var nextSeg;
	
	    if (!tCache) {
	      this.__calculateCurve();
	      this.__setTcache();
	      tCache = this.tCache;
	    }
	
	    curve = this.curve;
	
	    if (!tCache) {
	      if (curve) {
	        return {
	          x: curve[0][1],
	          y: curve[0][2]
	        };
	      }
	      return null;
	    }
	    Util.each(tCache, function(v, i) {
	      if (t >= v[0] && t <= v[1]) {
	        subt = (t - v[0]) / (v[1] - v[0]);
	        index = i;
	      }
	    });
	    seg = curve[index];
	    if (Util.isNull(seg) || Util.isNull(index)) {
	      return null;
	    }
	    l = seg.length;
	    nextSeg = curve[index + 1];
	    return {
	      x: CubicMath.at(seg[l - 2], nextSeg[1], nextSeg[3], nextSeg[5], 1 - subt),
	      y: CubicMath.at(seg[l - 1], nextSeg[2], nextSeg[4], nextSeg[6], 1 - subt)
	    };
	  },
	  createPath: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var segments = self.get('segments');
	    var lineWidth = attrs.lineWidth;
	    var arrow = attrs.arrow;
	
	    if (!Util.isArray(segments)) return;
	    context = context || self.get('context');
	    context.beginPath();
	    for (var i = 0, l = segments.length; i < l; i++) {
	      if (i === l - 1 && arrow) {
	        var lastSeg = segments[i];
	        var endTangent = segments[i].endTangent;
	        var endPoint = {
	          x: lastSeg.params[lastSeg.params.length - 1].x,
	          y: lastSeg.params[lastSeg.params.length - 1].y
	        };
	        if (lastSeg && Util.isFunction(endTangent)) {
	          var v = endTangent();
	          var end = Arrow.getEndPoint(v, new Vector2(endPoint.x, endPoint.y), lineWidth);
	          lastSeg.params[lastSeg.params.length - 1] = end;
	          segments[i].draw(context);
	          Arrow.makeArrow(context, v, end, lineWidth);
	          lastSeg.params[lastSeg.params.length - 1] = endPoint;
	        }
	      } else {
	        segments[i].draw(context);
	      }
	    }
	  }
	});
	
	module.exports = Path;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Path
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var GMath = __webpack_require__(187);
	var Inside = __webpack_require__(223);
	var Cubic = __webpack_require__(226);
	var Quadratic = __webpack_require__(225);
	var Ellipse = __webpack_require__(232);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	var Vector3 = Matrix.Vector3;
	var Matrix3 = Matrix.Matrix3;
	
	
	var ARR_CMD = ['m', 'l', 'c', 'a', 'q', 'h', 'v', 't', 's', 'z'];
	
	function toAbsolute(x, y, curPoint) { // 获取绝对坐标
	  return {
	    x: curPoint.x + x,
	    y: curPoint.y + y
	  };
	}
	
	function toSymmetry(point, center) { // 点对称
	  return {
	    x: center.x + (center.x - point.x),
	    y: center.y + (center.y - point.y)
	  };
	}
	
	function vMag(v) {
	  return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	}
	
	function vRatio(u, v) {
	  return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	}
	
	function vAngle(u, v) {
	  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	}
	
	function getArcParams(point1, point2, fa, fs, rx, ry, psiDeg) {
	  var psi = GMath.mod(GMath.degreeToRad(psiDeg), Math.PI * 2);
	  var x1 = point1.x;
	  var y1 = point1.y;
	  var x2 = point2.x;
	  var y2 = point2.y;
	  var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;
	  var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;
	  var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
	
	  if (lambda > 1) {
	    rx *= Math.sqrt(lambda);
	    ry *= Math.sqrt(lambda);
	  }
	
	  var f = Math.sqrt((((rx * rx) * (ry * ry)) - ((rx * rx) * (yp * yp)) - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp) + (ry * ry) * (xp * xp)));
	
	  if (fa === fs) {
	    f *= -1;
	  }
	  if (isNaN(f)) {
	    f = 0;
	  }
	
	  var cxp = f * rx * yp / ry;
	  var cyp = f * -ry * xp / rx;
	
	  var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
	  var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
	
	  var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	  var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	  var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	  var dTheta = vAngle(u, v);
	
	  if (vRatio(u, v) <= -1) {
	    dTheta = Math.PI;
	  }
	  if (vRatio(u, v) >= 1) {
	    dTheta = 0;
	  }
	  if (fs === 0 && dTheta > 0) {
	    dTheta = dTheta - 2 * Math.PI;
	  }
	  if (fs === 1 && dTheta < 0) {
	    dTheta = dTheta + 2 * Math.PI;
	  }
	  return [point1, cx, cy, rx, ry, theta, dTheta, psi, fs];
	}
	
	var PathSegment = function(item, preSegment, isLast) {
	  this.preSegment = preSegment;
	  this.isLast = isLast;
	  this.init(item, preSegment);
	};
	
	Util.augment(PathSegment, {
	  init: function(item, preSegment) {
	    var command = item[0];
	    preSegment = preSegment || {
	      endPoint: {
	        x: 0,
	        y: 0
	      }
	    };
	    var relative = ARR_CMD.indexOf(command) >= 0; // /[a-z]/.test(command);
	    var cmd = relative ? command.toUpperCase() : command;
	    var p = item;
	    var point1;
	    var point2;
	    var point3;
	    var point;
	    var preEndPoint = preSegment.endPoint;
	
	    var p1 = p[1];
	    var p2 = p[2];
	    switch (cmd) {
	      default: break;
	      case 'M':
	        if (relative) {
	          point = toAbsolute(p1, p2, preEndPoint);
	        } else {
	          point = {
	            x: p1,
	            y: p2
	          };
	        }
	        this.command = 'M';
	        this.params = [preEndPoint, point];
	        this.subStart = point;
	        this.endPoint = point;
	        break;
	      case 'L':
	        if (relative) {
	          point = toAbsolute(p1, p2, preEndPoint);
	        } else {
	          point = {
	            x: p1,
	            y: p2
	          };
	        }
	        this.command = 'L';
	        this.params = [preEndPoint, point];
	        this.subStart = preSegment.subStart;
	        this.endPoint = point;
	        if (this.isLast) {
	          this.endTangent = function() {
	            return new Vector2(point.x - preEndPoint.x, point.y - preEndPoint.y);
	          };
	        }
	        break;
	      case 'H':
	        if (relative) {
	          point = toAbsolute(p1, 0, preEndPoint);
	        } else {
	          point = {
	            x: p1,
	            y: preEndPoint.y
	          };
	        }
	        this.command = 'L';
	        this.params = [preEndPoint, point];
	        this.subStart = preSegment.subStart;
	        this.endPoint = point;
	        this.endTangent = function() {
	          return new Vector2(point.x - preEndPoint.x, point.y - preEndPoint.y);
	        };
	        break;
	      case 'V':
	        if (relative) {
	          point = toAbsolute(0, p1, preEndPoint);
	        } else {
	          point = {
	            x: preEndPoint.x,
	            y: p1
	          };
	        }
	        this.command = 'L';
	        this.params = [preEndPoint, point];
	        this.subStart = preSegment.subStart;
	        this.endPoint = point;
	        this.endTangent = function() {
	          return new Vector2(point.x - preEndPoint.x, point.y - preEndPoint.y);
	        };
	        break;
	      case 'Q':
	        if (relative) {
	          point1 = toAbsolute(p1, p2, preEndPoint);
	          point2 = toAbsolute(p[3], p[4], preEndPoint);
	        } else {
	          point1 = {
	            x: p1,
	            y: p2
	          };
	          point2 = {
	            x: p[3],
	            y: p[4]
	          };
	        }
	        this.command = 'Q';
	        this.params = [preEndPoint, point1, point2];
	        this.subStart = preSegment.subStart;
	        this.endPoint = point2;
	        this.endTangent = function() {
	          return new Vector2(point2.x - point1.x, point2.y - point1.y);
	        };
	        break;
	      case 'T':
	        if (relative) {
	          point2 = toAbsolute(p1, p2, preEndPoint);
	        } else {
	          point2 = {
	            x: p1,
	            y: p2
	          };
	        }
	        if (preSegment.command === 'Q') {
	          point1 = toSymmetry(preSegment.params[1], preEndPoint);
	          this.command = 'Q';
	          this.params = [preEndPoint, point1, point2];
	          this.subStart = preSegment.subStart;
	          this.endPoint = point2;
	          this.endTangent = function() {
	            return new Vector2(point2.x - point1.x, point2.y - point1.y);
	          };
	        } else {
	          this.command = 'TL';
	          this.params = [preEndPoint, point2];
	          this.subStart = preSegment.subStart;
	          this.endPoint = point2;
	          this.endTangent = function() {
	            return new Vector2(point2.x - preEndPoint.x, point2.y - preEndPoint.y);
	          };
	        }
	
	        break;
	      case 'C':
	        if (relative) {
	          point1 = toAbsolute(p1, p2, preEndPoint);
	          point2 = toAbsolute(p[3], p[4], preEndPoint);
	          point3 = toAbsolute(p[5], p[6], preEndPoint);
	        } else {
	          point1 = {
	            x: p1,
	            y: p2
	          };
	          point2 = {
	            x: p[3],
	            y: p[4]
	          };
	          point3 = {
	            x: p[5],
	            y: p[6]
	          };
	        }
	        this.command = 'C';
	        this.params = [preEndPoint, point1, point2, point3];
	        this.subStart = preSegment.subStart;
	        this.endPoint = point3;
	        this.endTangent = function() {
	          return new Vector2(point3.x - point2.x, point3.y - point2.y);
	        };
	        break;
	      case 'S':
	        if (relative) {
	          point2 = toAbsolute(p1, p2, preEndPoint);
	          point3 = toAbsolute(p[3], p[4], preEndPoint);
	        } else {
	          point2 = {
	            x: p1,
	            y: p2
	          };
	          point3 = {
	            x: p[3],
	            y: p[4]
	          };
	        }
	        if (preSegment.command === 'C') {
	          point1 = toSymmetry(preSegment.params[2], preEndPoint);
	          this.command = 'C';
	          this.params = [preEndPoint, point1, point2, point3];
	          this.subStart = preSegment.subStart;
	          this.endPoint = point3;
	          this.endTangent = function() {
	            return new Vector2(point3.x - point2.x, point3.y - point2.y);
	          };
	        } else {
	          this.command = 'SQ';
	          this.params = [preEndPoint, point2, point3];
	          this.subStart = preSegment.subStart;
	          this.endPoint = point3;
	          this.endTangent = function() {
	            return new Vector2(point3.x - point2.x, point3.y - point2.y);
	          };
	        }
	        break;
	      case 'A':
	        var rx = p1;
	        var ry = p2;
	        var psi = p[3];
	        var fa = p[4];
	        var fs = p[5];
	        if (relative) {
	          point = toAbsolute(p[6], p[7], preEndPoint);
	        } else {
	          point = {
	            x: p[6],
	            y: p[7]
	          };
	        }
	
	        this.command = 'A';
	        this.params = getArcParams(preEndPoint, point, fa, fs, rx, ry, psi);
	        this.subStart = preSegment.subStart;
	        this.endPoint = point;
	        break;
	      case 'Z':
	        this.command = 'Z';
	        this.params = [preEndPoint, preSegment.subStart];
	        this.subStart = preSegment.subStart;
	        this.endPoint = preSegment.subStart;
	    }
	  },
	  isInside: function(x, y, lineWidth) {
	    var self = this;
	    var command = self.command;
	    var params = self.params;
	    var box = self.box;
	    if (box) {
	      if (!Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	        return false;
	      }
	    }
	    switch (command) {
	      default: break;
	      case 'M':
	        return false;
	      case 'TL':
	      case 'L':
	      case 'Z':
	        return Inside.line(
	          params[0].x, params[0].y,
	          params[1].x, params[1].y,
	          lineWidth, x, y
	        );
	      case 'SQ':
	      case 'Q':
	        return Inside.quadraticline(
	          params[0].x, params[0].y,
	          params[1].x, params[1].y,
	          params[2].x, params[2].y,
	          lineWidth, x, y
	        );
	      case 'C':
	        return Inside.cubicline(
	          params[0].x, params[0].y,
	          params[1].x, params[1].y,
	          params[2].x, params[2].y,
	          params[3].x, params[3].y,
	          lineWidth, x, y
	        );
	      case 'A':
	        var p = params;
	        var cx = p[1];
	        var cy = p[2];
	        var rx = p[3];
	        var ry = p[4];
	        var theta = p[5];
	        var dTheta = p[6];
	        var psi = p[7];
	        var fs = p[8];
	
	        var r = (rx > ry) ? rx : ry;
	        var scaleX = (rx > ry) ? 1 : rx / ry;
	        var scaleY = (rx > ry) ? ry / rx : 1;
	
	        p = new Vector3(x, y, 1);
	        var m = new Matrix3();
	        m.translate(-cx, -cy);
	        m.rotate(-psi);
	        m.scale(1 / scaleX, 1 / scaleY);
	        p.applyMatrix(m);
	        return Inside.arcline(0, 0, r, theta, theta + dTheta, 1 - fs, lineWidth, p.x, p.y);
	    }
	    return false;
	  },
	  draw: function(context) {
	    var command = this.command;
	    var params = this.params;
	    var point1;
	    var point2;
	    var point3;
	
	    switch (command) {
	      default: break;
	      case 'M':
	        context.moveTo(params[1].x, params[1].y);
	        break;
	      case 'TL':
	      case 'L':
	        context.lineTo(params[1].x, params[1].y);
	        break;
	      case 'SQ':
	      case 'Q':
	        point1 = params[1];
	        point2 = params[2];
	        context.quadraticCurveTo(point1.x, point1.y, point2.x, point2.y);
	        break;
	      case 'C':
	        point1 = params[1];
	        point2 = params[2];
	        point3 = params[3];
	        context.bezierCurveTo(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y);
	        break;
	      case 'A':
	        var p = params;
	        var p1 = p[1];
	        var p2 = p[2];
	        var cx = p1;
	        var cy = p2;
	        var rx = p[3];
	        var ry = p[4];
	        var theta = p[5];
	        var dTheta = p[6];
	        var psi = p[7];
	        var fs = p[8];
	
	        var r = (rx > ry) ? rx : ry;
	        var scaleX = (rx > ry) ? 1 : rx / ry;
	        var scaleY = (rx > ry) ? ry / rx : 1;
	
	        context.translate(cx, cy);
	        context.rotate(psi);
	        context.scale(scaleX, scaleY);
	        context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	        context.scale(1 / scaleX, 1 / scaleY);
	        context.rotate(-psi);
	        context.translate(-cx, -cy);
	        break;
	      case 'Z':
	        context.closePath();
	        break;
	    }
	  },
	  getBBox: function(lineWidth) {
	    var halfWidth = lineWidth / 2;
	    var params = this.params;
	    var yDims;
	    var xDims;
	    var i;
	    var l;
	
	    switch (this.command) {
	      default:
	      case 'M':
	      case 'Z':
	        break;
	      case 'TL':
	      case 'L':
	        this.box = {
	          minX: Math.min(params[0].x, params[1].x) - halfWidth,
	          maxX: Math.max(params[0].x, params[1].x) + halfWidth,
	          minY: Math.min(params[0].y, params[1].y) - halfWidth,
	          maxY: Math.max(params[0].y, params[1].y) + halfWidth
	        };
	        break;
	      case 'SQ':
	      case 'Q':
	        xDims = Quadratic.extrema(params[0].x, params[1].x, params[2].x);
	        for (i = 0, l = xDims.length; i < l; i++) {
	          xDims[i] = Quadratic.at(params[0].x, params[1].x, params[2].x, xDims[i]);
	        }
	        xDims.push(params[0].x, params[2].x);
	        yDims = Quadratic.extrema(params[0].y, params[1].y, params[2].y);
	        for (i = 0, l = yDims.length; i < l; i++) {
	          yDims[i] = Quadratic.at(params[0].y, params[1].y, params[2].y, yDims);
	        }
	        yDims.push(params[0].y, params[2].y);
	        this.box = {
	          minX: Math.min.apply(Math, xDims) - halfWidth,
	          maxX: Math.max.apply(Math, xDims) + halfWidth,
	          minY: Math.min.apply(Math, yDims) - halfWidth,
	          maxY: Math.max.apply(Math, yDims) + halfWidth
	        };
	        break;
	      case 'C':
	        xDims = Cubic.extrema(params[0].x, params[1].x, params[2].x, params[3].x);
	        for (i = 0, l = xDims.length; i < l; i++) {
	          xDims[i] = Cubic.at(params[0].x, params[1].x, params[2].x, params[3].x, xDims[i]);
	        }
	        yDims = Cubic.extrema(params[0].y, params[1].y, params[2].y, params[3].y);
	        for (i = 0, l = yDims.length; i < l; i++) {
	          yDims[i] = Cubic.at(params[0].y, params[1].y, params[2].y, params[3].y, yDims[i]);
	        }
	        xDims.push(params[0].x, params[3].x);
	        yDims.push(params[0].y, params[3].y);
	        this.box = {
	          minX: Math.min.apply(Math, xDims) - halfWidth,
	          maxX: Math.max.apply(Math, xDims) + halfWidth,
	          minY: Math.min.apply(Math, yDims) - halfWidth,
	          maxY: Math.max.apply(Math, yDims) + halfWidth
	        };
	        break;
	      case 'A':
	        // todo 待优化
	        var p = params;
	        var cx = p[1];
	        var cy = p[2];
	        var rx = p[3];
	        var ry = p[4];
	        var theta = p[5];
	        var dTheta = p[6];
	        var psi = p[7];
	        var fs = p[8];
	        var start = theta;
	        var end = theta + dTheta;
	
	        var xDim = Ellipse.xExtrema(psi, rx, ry);
	        var minX = Infinity;
	        var maxX = -Infinity;
	        var xs = [start, end];
	        for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	          var xAngle = xDim + i;
	          if (fs === 1) {
	            if (start < xAngle && xAngle < end) {
	              xs.push(xAngle);
	            }
	          } else {
	            if (end < xAngle && xAngle < start) {
	              xs.push(xAngle);
	            }
	          }
	        }
	
	        for (i = 0, l = xs.length; i < l; i++) {
	          var x = Ellipse.xAt(psi, rx, ry, cx, xs[i]);
	          if (x < minX) {
	            minX = x;
	          }
	          if (x > maxX) {
	            maxX = x;
	          }
	        }
	
	        var yDim = Ellipse.yExtrema(psi, rx, ry);
	        var minY = Infinity;
	        var maxY = -Infinity;
	        var ys = [start, end];
	        for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	          var yAngle = yDim + i;
	          if (fs === 1) {
	            if (start < yAngle && yAngle < end) {
	              ys.push(yAngle);
	            }
	          } else {
	            if (end < yAngle && yAngle < start) {
	              ys.push(yAngle);
	            }
	          }
	        }
	
	        for (i = 0, l = ys.length; i < l; i++) {
	          var y = Ellipse.yAt(psi, rx, ry, cy, ys[i]);
	          if (y < minY) {
	            minY = y;
	          }
	          if (y > maxY) {
	            maxY = y;
	          }
	        }
	        this.box = {
	          minX: minX - halfWidth,
	          maxX: maxX + halfWidth,
	          minY: minY - halfWidth,
	          maxY: maxY + halfWidth
	        };
	        break;
	    }
	  }
	});
	
	module.exports = PathSegment;


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview ellipse math
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	module.exports = {
	  xAt: function(psi, rx, ry, cx, t) {
	    return rx * Math.cos(psi) * Math.cos(t) - ry * Math.sin(psi) * Math.sin(t) + cx;
	  },
	  yAt: function(psi, rx, ry, cy, t) {
	    return rx * Math.sin(psi) * Math.cos(t) + ry * Math.cos(psi) * Math.sin(t) + cy;
	  },
	  xExtrema: function(psi, rx, ry) {
	    return Math.atan((-ry / rx) * Math.tan(psi));
	  },
	  yExtrema: function(psi, rx, ry) {
	    return Math.atan((ry / (rx * Math.tan(psi))));
	  }
	};


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var Vector2 = __webpack_require__(185).Vector2;
	
	var THETA = Math.PI / 6;
	
	function calculatePoints(vector, end, lineWidth) {
	  var angle = (new Vector2(1, 0)).angleTo(vector);
	  var downAngle = angle - THETA;
	  var upAngle = angle + THETA;
	  var length = 6 + lineWidth * 3;
	  return [
	    {
	      x: end.x - length * Math.cos(downAngle),
	      y: end.y - length * Math.sin(downAngle)
	    },
	    end,
	    {
	      x: end.x - length * Math.cos(upAngle),
	      y: end.y - length * Math.sin(upAngle)
	    }
	  ];
	}
	
	function arrow(context, points) {
	  context.moveTo(points[0].x, points[0].y);
	  context.lineTo(points[1].x, points[1].y);
	  context.lineTo(points[2].x, points[2].y);
	}
	
	function makeArrow(context, vector, end, lineWidth) {
	  arrow(context, calculatePoints(vector, end, lineWidth));
	}
	
	function getEndPoint(vector, end, lineWidth) {
	  var miterLimit = lineWidth / Math.sin(THETA);
	  vector.setLength(miterLimit / 2);
	  end.sub(vector);
	  return end;
	}
	
	module.exports = {
	  makeArrow: makeArrow,
	  getEndPoint: getEndPoint
	};


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview text 文本
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Common = __webpack_require__(183);
	
	var CText = function(cfg) {
	  CText.superclass.constructor.call(this, cfg);
	};
	
	CText.ATTRS = {
	  x: 0,
	  y: 0,
	  text: null,
	  fontSize: 12,
	  fontFamily: 'sans-serif',
	  fontStyle: 'normal',
	  fontWeight: 'normal',
	  fontVariant: 'normal',
	  textAlign: 'start',
	  textBaseline: 'bottom',
	  lineHeight: null,
	  textArr: null
	};
	
	Util.extend(CText, Shape);
	
	Util.augment(CText, {
	  canFill: true,
	  canStroke: true,
	  type: 'text',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1,
	      lineCount: 1,
	      fontSize: 12,
	      fontFamily: 'sans-serif',
	      fontStyle: 'normal',
	      fontWeight: 'normal',
	      fontVariant: 'normal',
	      textAlign: 'start',
	      textBaseline: 'bottom'
	    };
	  },
	  __assembleFont: function() {
	    // var self = this;
	    var attrs = this.__attrs;
	    var fontSize = attrs.fontSize;
	    var fontFamily = attrs.fontFamily;
	    var fontWeight = attrs.fontWeight;
	    var fontStyle = attrs.fontStyle; // self.attr('fontStyle');
	    var fontVariant = attrs.fontVariant; // self.attr('fontVariant');
	    // self.attr('font', [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' '));
	    attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');
	  },
	  __afterSetAttrFontSize: function() {
	    /* this.attr({
	      height: this.__getTextHeight()
	    }); */
	    this.__assembleFont();
	  },
	  __afterSetAttrFontFamily: function() {
	    this.__assembleFont();
	  },
	  __afterSetAttrFontWeight: function() {
	    this.__assembleFont();
	  },
	  __afterSetAttrFontStyle: function() {
	    this.__assembleFont();
	  },
	  __afterSetAttrFontVariant: function() {
	    this.__assembleFont();
	  },
	  __afterSetAttrFont: function() {
	    // this.attr('width', this.measureText());
	  },
	  __afterSetAttrText: function() {
	    var attrs = this.__attrs;
	    var text = attrs.text;
	    var textArr;
	    if (Util.isString(text) && (text.indexOf('\n') !== -1)) {
	      textArr = text.split('\n');
	      var lineCount = textArr.length;
	      attrs.lineCount = lineCount;
	      attrs.textArr = textArr;
	    }
	    // attrs.height = this.__getTextHeight();
	    // attrs.width = this.measureText();
	  },
	  __getTextHeight: function() {
	    var attrs = this.__attrs;
	    var lineCount = attrs.lineCount;
	    var fontSize = attrs.fontSize;
	    if (lineCount > 1) {
	      var spaceingY = this.__getSpaceingY();
	      return fontSize * lineCount + spaceingY * (lineCount - 1);
	    }
	    return fontSize;
	  },
	  // 计算浪费，效率低，待优化
	  __afterSetAttrAll: function(objs) {
	    var self = this;
	    if (
	      'fontSize' in objs ||
	      'fontWeight' in objs ||
	      'fontStyle' in objs ||
	      'fontVariant' in objs ||
	      'fontFamily' in objs
	    ) {
	      self.__assembleFont();
	    }
	
	    if (
	      'text' in objs
	    ) {
	      self.__afterSetAttrText(objs.text);
	    }
	  },
	  isHitBox: function() {
	    return false;
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var width = self.measureText(); // attrs.width
	    if (!width) {
	      // 如果width不存在，四点共其实点
	      return {
	        minX: x,
	        minY: y,
	        maxX: x,
	        maxY: y
	      };
	    }
	    var height = self.__getTextHeight(); // attrs.height
	    var textAlign = attrs.textAlign;
	    var textBaseline = attrs.textBaseline;
	    var lineWidth = attrs.lineWidth;
	    var point = {
	      x: x,
	      y: y - height
	    };
	
	    if (textAlign) {
	      if (textAlign === 'end' || textAlign === 'right') {
	        point.x -= width;
	      } else if (textAlign === 'center') {
	        point.x -= width / 2;
	      }
	    }
	
	    if (textBaseline) {
	      if (textBaseline === 'top') {
	        point.y += height;
	      } else if (textBaseline === 'middle') {
	        point.y += height / 2;
	      }
	    }
	
	    this.set('startPoint', point);
	    var halfWidth = lineWidth / 2;
	    return {
	      minX: point.x - halfWidth,
	      minY: point.y - halfWidth,
	      maxX: point.x + width + halfWidth,
	      maxY: point.y + height + halfWidth
	    };
	  },
	  __getSpaceingY: function() {
	    var attrs = this.__attrs;
	    var lineHeight = attrs.lineHeight;
	    var fontSize = attrs.fontSize;
	    return lineHeight ? (lineHeight - fontSize) : fontSize * 0.14;
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var box = self.getBBox();
	    if (self.hasFill() || self.hasStroke()) {
	      return Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y);
	    }
	  },
	  drawInner: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var text = attrs.text;
	    if (!text) {
	      return;
	    }
	    var textArr = attrs.textArr;
	    var fontSize = attrs.fontSize;
	    var spaceingY = self.__getSpaceingY();
	    var x = attrs.x;
	    var y = attrs.y;
	    var textBaseline = attrs.textBaseline;
	    var height;
	    if (textArr) {
	      var box = self.getBBox();
	      height = box.maxY - box.minY;
	    }
	    var subY;
	
	    context.beginPath();
	    if (self.hasFill()) {
	      var fillOpacity = attrs.fillOpacity;
	      if (!Util.isNull(fillOpacity) && fillOpacity !== 1) {
	        context.globalAlpha = fillOpacity;
	      }
	      if (textArr) {
	        Util.each(textArr, function(subText, index) {
	          subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	          if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	          if (textBaseline === 'top') subY += height - fontSize;
	          context.fillText(subText, x, subY);
	        });
	      } else {
	        context.fillText(text, x, y);
	      }
	    }
	
	    if (self.hasStroke()) {
	      if (textArr) {
	        Util.each(textArr, function(subText, index) {
	          subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	          if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	          if (textBaseline === 'top') subY += height - fontSize;
	          context.strokeText(subText, x, subY);
	        });
	      } else {
	        context.strokeText(text, x, y);
	      }
	    }
	  },
	  measureText: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var text = attrs.text;
	    var font = attrs.font;
	    var textArr = attrs.textArr;
	    var measureWidth;
	    var width = 0;
	
	    if (Util.isNull(text)) return undefined;
	    var context = Common.backupContext;
	    context.save();
	    context.font = font;
	    if (textArr) {
	      Util.each(textArr, function(subText) {
	        measureWidth = context.measureText(subText).width;
	        if (width < measureWidth) {
	          width = measureWidth;
	        }
	        context.restore();
	      });
	    } else {
	      width = context.measureText(text).width;
	      context.restore();
	    }
	    return width;
	  }
	});
	
	module.exports = CText;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 直线
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Arrow = __webpack_require__(233);
	var LineMath = __webpack_require__(224);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Line = function(cfg) {
	  Line.superclass.constructor.call(this, cfg);
	};
	
	Line.ATTRS = {
	  x1: 0,
	  y1: 0,
	  x2: 0,
	  y2: 0,
	  lineWidth: 1,
	  arrow: false
	};
	
	Util.extend(Line, Shape);
	
	Util.augment(Line, {
	  canStroke: true,
	  type: 'line',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1,
	      arrow: false
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var x1 = attrs.x1;
	    var y1 = attrs.y1;
	    var x2 = attrs.x2;
	    var y2 = attrs.y2;
	    var lineWidth = attrs.lineWidth;
	
	    return LineMath.box(x1, y1, x2, y2, lineWidth);
	  },
	  isPointInPath: function(x, y) {
	    var attrs = this.__attrs;
	    var x1 = attrs.x1;
	    var y1 = attrs.y1;
	    var x2 = attrs.x2;
	    var y2 = attrs.y2;
	    var lineWidth = attrs.lineWidth;
	    if (this.hasStroke()) {
	      return Inside.line(x1, y1, x2, y2, lineWidth, x, y);
	    }
	
	    return false;
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var x1 = attrs.x1;
	    var y1 = attrs.y1;
	    var x2 = attrs.x2;
	    var y2 = attrs.y2;
	    var arrow = attrs.arrow;
	    var lineWidth = attrs.lineWidth;
	    context = context || self.get('context');
	    context.beginPath();
	    context.moveTo(x1, y1);
	    if (arrow) {
	      var v = new Vector2(x2 - x1, y2 - y1);
	      var end = Arrow.getEndPoint(v, new Vector2(x2, y2), lineWidth);
	      context.lineTo(end.x, end.y);
	      Arrow.makeArrow(context, v, end, lineWidth);
	    } else {
	      context.lineTo(x2, y2);
	    }
	  },
	  getPoint: function(t) {
	    var attrs = this.__attrs;
	    return {
	      x: LineMath.at(attrs.x1, attrs.x2, t),
	      y: LineMath.at(attrs.y1, attrs.y2, t)
	    };
	  }
	});
	
	module.exports = Line;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 图像
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	
	var CImage = function(cfg) {
	  CImage.superclass.constructor.call(this, cfg);
	};
	
	CImage.ATTRS = {
	  x: 0,
	  y: 0,
	  img: undefined,
	  width: 0,
	  height: 0,
	  sx: null,
	  sy: null,
	  swidth: null,
	  sheight: null
	};
	
	Util.extend(CImage, Shape);
	
	Util.augment(CImage, {
	  type: 'image',
	  __afterSetAttrImg: function(img) {
	    this.__setAttrImg(img);
	  },
	  __afterSetAttrAll: function(params) {
	    if (params.img) {
	      this.__setAttrImg(params.img);
	    }
	  },
	  isHitBox: function() {
	    return false;
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var width = attrs.width;
	    var height = attrs.height;
	
	    return {
	      minX: x,
	      minY: y,
	      maxX: x + width,
	      maxY: y + height
	    };
	  },
	  isPointInPath: function(x, y) {
	    var attrs = this.__attrs;
	    if (this.get('toDraw') || !attrs.img) {
	      return false;
	    }
	    var rx = attrs.x;
	    var ry = attrs.y;
	    var width = attrs.width;
	    var height = attrs.height;
	    return Inside.rect(rx, ry, width, height, x, y);
	  },
	  __setLoading: function(loading) {
	    var canvas = this.get('canvas');
	    if (loading === false && this.get('toDraw') === true) {
	      this.__cfg.loading = false;
	      canvas.draw();
	    }
	    return loading;
	  },
	  __setAttrImg: function(img) {
	    var self = this;
	    var attrs = self.__attrs;
	    if (Util.isString(img)) {
	      var image = new Image();
	      image.onload = function() {
	        if (self.get('destroyed')) return false;
	        self.attr('imgSrc', img);
	        self.attr('img', image);
	        var callback = self.get('callback');
	        if (callback) {
	          callback.call(self);
	        }
	        self.set('loading', false);
	      };
	      image.src = img;
	      self.set('loading', true);
	    } else if (img instanceof Image) {
	      if (!attrs.width) {
	        self.attr('width', img.width);
	      }
	
	      if (!attrs.height) {
	        self.attr('height', img.height);
	      }
	      return img;
	    } else if (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
	      if (!attrs.width) {
	        self.attr('width', Number(img.getAttribute('width')));
	      }
	
	      if (!attrs.height) {
	        self.attr('height', Number(img.getAttribute('height')));
	      }
	      return img;
	    } else if (img instanceof ImageData) {
	      if (!attrs.width) {
	        self.attr('width', img.width);
	      }
	
	      if (!attrs.height) {
	        self.attr('height', img.height);
	      }
	      return img;
	    } else {
	      return null;
	    }
	  },
	  drawInner: function(context) {
	    if (this.get('loading')) {
	      this.set('toDraw', true);
	      return;
	    }
	    this.__drawImage(context);
	  },
	  __drawImage: function(context) {
	    var attrs = this.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var img = attrs.img;
	    var width = attrs.width;
	    var height = attrs.height;
	    var sx = attrs.sx;
	    var sy = attrs.sy;
	    var swidth = attrs.swidth;
	    var sheight = attrs.sheight;
	    this.set('toDraw', false);
	
	    if (img instanceof Image || (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS')) {
	      if (
	        Util.isNull(sx) ||
	        Util.isNull(sy) ||
	        Util.isNull(swidth) ||
	        Util.isNull(sheight)
	      ) {
	        context.drawImage(img, x, y, width, height);
	        return;
	      }
	      if (
	        Util.notNull(sx) &&
	        Util.notNull(sy) &&
	        Util.notNull(swidth) &&
	        Util.notNull(sheight)
	      ) {
	        context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
	        return;
	      }
	    } else if (img instanceof ImageData) {
	      context.putImageData(img, x, y, sx || 0, sy || 0, swidth || width, sheight || height);
	      return;
	    }
	    return;
	  }
	});
	
	module.exports = CImage;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview polygon
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	
	var Polygon = function(cfg) {
	  Polygon.superclass.constructor.call(this, cfg);
	};
	
	Polygon.ATTRS = {
	  points: null,
	  lineWidth: 1
	};
	
	Util.extend(Polygon, Shape);
	
	Util.augment(Polygon, {
	  canFill: true,
	  canStroke: true,
	  type: 'polygon',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1
	    };
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var points = attrs.points;
	    var lineWidth = attrs.lineWidth;
	    if (!points || points.length === 0) {
	      return null;
	    }
	    var minX = Infinity;
	    var minY = Infinity;
	    var maxX = -Infinity;
	    var maxY = -Infinity;
	
	    Util.each(points, function(point) {
	      var x = point[0];
	      var y = point[1];
	      if (x < minX) {
	        minX = x;
	      }
	      if (x > maxX) {
	        maxX = x;
	      }
	
	      if (y < minY) {
	        minY = y;
	      }
	
	      if (y > maxY) {
	        maxY = y;
	      }
	    });
	
	    var halfWidth = lineWidth / 2;
	    return {
	      minX: minX - halfWidth,
	      minY: minY - halfWidth,
	      maxX: maxX + halfWidth,
	      maxY: maxY + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var fill = self.hasFill();
	    var stroke = self.hasStroke();
	
	    if (fill && stroke) {
	      return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return self.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return self.__isPointInStroke(x, y);
	    }
	
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var self = this;
	    var context = self.get('context');
	    self.createPath();
	    return context.isPointInPath(x, y);
	  },
	  __isPointInStroke: function(x, y) {
	    var self = this;
	    var attrs = self.__attrs;
	    var points = attrs.points;
	    if (points.length < 2) {
	      return false;
	    }
	    var lineWidth = attrs.lineWidth;
	    var outPoints = points.slice(0);
	    if (points.length >= 3) {
	      outPoints.push(points[0]);
	    }
	
	    return Inside.polyline(outPoints, lineWidth, x, y);
	  },
	  createPath: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var points = attrs.points;
	    if (points.length < 2) {
	      return;
	    }
	    context = context || self.get('context');
	    context.beginPath();
	    Util.each(points, function(point, index) {
	      if (index === 0) {
	        context.moveTo(point[0], point[1]);
	      } else {
	        context.lineTo(point[0], point[1]);
	      }
	    });
	    context.closePath();
	  }
	});
	
	module.exports = Polygon;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview polyline
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Arrow = __webpack_require__(233);
	var LineMath = __webpack_require__(224);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Polyline = function(cfg) {
	  Polyline.superclass.constructor.call(this, cfg);
	};
	
	Polyline.ATTRS = {
	  points: null,
	  lineWidth: 1,
	  arrow: false,
	  tCache: null
	};
	
	Util.extend(Polyline, Shape);
	
	Util.augment(Polyline, {
	  canStroke: true,
	  type: 'polyline',
	  tCache: null, // 缓存各点的t
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1,
	      arrow: false
	    };
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var lineWidth = attrs.lineWidth;
	    var points = attrs.points;
	    if (!points || points.length === 0) {
	      return null;
	    }
	    var minX = Infinity;
	    var minY = Infinity;
	    var maxX = -Infinity;
	    var maxY = -Infinity;
	
	    Util.each(points, function(point) {
	      var x = point[0];
	      var y = point[1];
	      if (x < minX) {
	        minX = x;
	      }
	      if (x > maxX) {
	        maxX = x;
	      }
	
	      if (y < minY) {
	        minY = y;
	      }
	
	      if (y > maxY) {
	        maxY = y;
	      }
	    });
	
	    var halfWidth = lineWidth / 2;
	    return {
	      minX: minX - halfWidth,
	      minY: minY - halfWidth,
	      maxX: maxX + halfWidth,
	      maxY: maxY + halfWidth
	    };
	  },
	  __setTcache: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var points = attrs.points;
	    var totalLength = 0;
	    var tempLength = 0;
	    var tCache = [];
	    var segmentT;
	    var segmentL;
	    if (!points || points.length === 0) {
	      return;
	    }
	
	    Util.each(points, function(p, i) {
	      if (points[i + 1]) {
	        totalLength += LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	      }
	    });
	    if (totalLength <= 0) {
	      return;
	    }
	    Util.each(points, function(p, i) {
	      if (points[i + 1]) {
	        segmentT = [];
	        segmentT[0] = tempLength / totalLength;
	        segmentL = LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	        tempLength += segmentL;
	        segmentT[1] = tempLength / totalLength;
	        tCache.push(segmentT);
	      }
	    });
	    this.tCache = tCache;
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var attrs = self.__attrs;
	    if (self.hasStroke()) {
	      var points = attrs.points;
	      if (points.length < 2) {
	        return false;
	      }
	      var lineWidth = attrs.lineWidth;
	      return Inside.polyline(points, lineWidth, x, y);
	    }
	    return false;
	  },
	  createPath: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var points = attrs.points;
	    var arrow = attrs.arrow;
	    var lineWidth = attrs.lineWidth;
	    var l;
	    var i;
	
	    if (points.length < 2) {
	      return;
	    }
	    context = context || self.get('context');
	    context.beginPath();
	    context.moveTo(points[0][0], points[0][1]);
	    for (i = 1, l = points.length - 1; i < l; i++) {
	      context.lineTo(points[i][0], points[i][1]);
	    }
	    if (arrow) {
	      var v = new Vector2(points[l][0] - points[l - 1][0], points[l][1] - points[l - 1][1]);
	      var end = Arrow.getEndPoint(v, new Vector2(points[l][0], points[l][1]), lineWidth);
	      context.lineTo(end.x, end.y);
	      Arrow.makeArrow(context, v, end, lineWidth);
	    } else {
	      context.lineTo(points[l][0], points[l][1]);
	    }
	  },
	  getPoint: function(t) {
	    var attrs = this.__attrs;
	    var points = attrs.points;
	    var tCache = this.tCache;
	    var subt;
	    var index;
	    if (!tCache) {
	      this.__setTcache();
	      tCache = this.tCache;
	    }
	    Util.each(tCache, function(v, i) {
	      if (t >= v[0] && t <= v[1]) {
	        subt = (t - v[0]) / (v[1] - v[0]);
	        index = i;
	      }
	    });
	    return {
	      x: LineMath.at(points[index][0], points[index + 1][0], subt),
	      y: LineMath.at(points[index][1], points[index + 1][1], subt)
	    };
	  }
	});
	
	module.exports = Polyline;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview arc
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	
	var Util = __webpack_require__(169);
	var Vector2 = __webpack_require__(185).Vector2;
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var ArcMath = __webpack_require__(227);
	var Arrow = __webpack_require__(233);
	
	var Arc = function(cfg) {
	  Arc.superclass.constructor.call(this, cfg);
	};
	
	Arc.ATTRS = {
	  x: 0,
	  y: 0,
	  r: 0,
	  startAngle: 0,
	  endAngle: 0,
	  clockwise: false,
	  lineWidth: 1,
	  arrow: false
	};
	
	Util.extend(Arc, Shape);
	
	Util.augment(Arc, {
	  canStroke: true,
	  type: 'arc',
	  getDefaultAttrs: function() {
	    return {
	      x: 0,
	      y: 0,
	      r: 0,
	      startAngle: 0,
	      endAngle: 0,
	      clockwise: false,
	      lineWidth: 1,
	      arrow: false
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	    var lineWidth = attrs.lineWidth;
	    var halfWidth = lineWidth / 2;
	    var box = ArcMath.box(cx, cy, r, startAngle, endAngle, clockwise);
	    box.minX -= halfWidth;
	    box.minY -= halfWidth;
	    box.maxX += halfWidth;
	    box.maxY += halfWidth;
	    return box;
	  },
	  isPointInPath: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	    var lineWidth = attrs.lineWidth;
	
	    if (this.hasStroke()) {
	      return Inside.arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y);
	    }
	    return false;
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.r;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	    var lineWidth = attrs.lineWidth;
	    var arrow = attrs.arrow;
	    context = context || self.get('context');
	
	    context.beginPath();
	    context.arc(cx, cy, r, startAngle, endAngle, clockwise);
	
	    if (arrow) {
	      var end = {
	        x: cx + r * Math.cos(endAngle),
	        y: cy + r * Math.sin(endAngle)
	      };
	
	      var v = new Vector2(-r * Math.sin(endAngle), r * Math.cos(endAngle));
	      if (clockwise) {
	        v.multiplyScaler(-1);
	      }
	      Arrow.makeArrow(context, v, end, lineWidth);
	    }
	  }
	});
	
	module.exports = Arc;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 扇形
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var gMath = __webpack_require__(187);
	var ArcMath = __webpack_require__(227);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Fan = function(cfg) {
	  Fan.superclass.constructor.call(this, cfg);
	};
	
	Fan.ATTRS = {
	  x: 0,
	  y: 0,
	  rs: 0,
	  re: 0,
	  startAngle: 0,
	  endAngle: 0,
	  clockwise: false,
	  lineWidth: 1
	};
	
	Util.extend(Fan, Shape);
	
	Util.augment(Fan, {
	  canFill: true,
	  canStroke: true,
	  type: 'fan',
	  getDefaultAttrs: function() {
	    return {
	      clockwise: false,
	      lineWidth: 1,
	      rs: 0,
	      re: 0
	    };
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rs = attrs.rs;
	    var re = attrs.re;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	    var lineWidth = attrs.lineWidth;
	
	    var boxs = ArcMath.box(cx, cy, rs, startAngle, endAngle, clockwise);
	    var boxe = ArcMath.box(cx, cy, re, startAngle, endAngle, clockwise);
	    var minX = Math.min(boxs.minX, boxe.minX);
	    var minY = Math.min(boxs.minY, boxe.minY);
	    var maxX = Math.max(boxs.maxX, boxe.maxX);
	    var maxY = Math.max(boxs.maxY, boxe.maxY);
	
	    var halfWidth = lineWidth / 2;
	    return {
	      minX: minX - halfWidth,
	      minY: minY - halfWidth,
	      maxX: maxX + halfWidth,
	      maxY: maxY + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var fill = this.hasFill();
	    var stroke = this.hasStroke();
	
	    if (fill && stroke) {
	      return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	    }
	
	    if (fill) {
	      return this.__isPointInFill(x, y);
	    }
	
	    if (stroke) {
	      return this.__isPointInStroke(x, y);
	    }
	    return false;
	  },
	  __isPointInFill: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rs = attrs.rs;
	    var re = attrs.re;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	
	    var v1 = new Vector2(1, 0);
	    var subv = new Vector2(x - cx, y - cy);
	    var angle = v1.angleTo(subv);
	
	
	    var angle1 = ArcMath.nearAngle(angle, startAngle, endAngle, clockwise);
	
	    if (gMath.equal(angle, angle1)) {
	      var ls = subv.lengthSq();
	      if (rs * rs <= ls && ls <= re * re) {
	        return true;
	      }
	    }
	    return false;
	  },
	  __isPointInStroke: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rs = attrs.rs;
	    var re = attrs.re;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	    var lineWidth = attrs.lineWidth;
	
	    var ssp = {
	      x: Math.cos(startAngle) * rs + cx,
	      y: Math.sin(startAngle) * rs + cy
	    };
	    var sep = {
	      x: Math.cos(startAngle) * re + cx,
	      y: Math.sin(startAngle) * re + cy
	    };
	    var esp = {
	      x: Math.cos(endAngle) * rs + cx,
	      y: Math.sin(endAngle) * rs + cy
	    };
	    var eep = {
	      x: Math.cos(endAngle) * re + cx,
	      y: Math.sin(endAngle) * re + cy
	    };
	
	    if (Inside.line(ssp.x, ssp.y, sep.x, sep.y, lineWidth, x, y)) {
	      return true;
	    }
	
	    if (Inside.line(esp.x, esp.y, eep.x, eep.y, lineWidth, x, y)) {
	      return true;
	    }
	
	    if (Inside.arcline(cx, cy, rs, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	      return true;
	    }
	
	    if (Inside.arcline(cx, cy, re, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	      return true;
	    }
	
	    return false;
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var rs = attrs.rs;
	    var re = attrs.re;
	    var startAngle = attrs.startAngle;
	    var endAngle = attrs.endAngle;
	    var clockwise = attrs.clockwise;
	
	    var ssp = {
	      x: Math.cos(startAngle) * rs + cx,
	      y: Math.sin(startAngle) * rs + cy
	    };
	    var sep = {
	      x: Math.cos(startAngle) * re + cx,
	      y: Math.sin(startAngle) * re + cy
	    };
	    var esp = {
	      x: Math.cos(endAngle) * rs + cx,
	      y: Math.sin(endAngle) * rs + cy
	    };
	
	    context = context || self.get('context');
	    context.beginPath();
	    context.moveTo(ssp.x, ssp.y);
	    context.lineTo(sep.x, sep.y);
	    context.arc(cx, cy, re, startAngle, endAngle, clockwise);
	    context.lineTo(esp.x, esp.y);
	    context.arc(cx, cy, rs, endAngle, startAngle, !clockwise);
	    context.closePath();
	  }
	});
	
	module.exports = Fan;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Cubic
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Arrow = __webpack_require__(233);
	var CubicMath = __webpack_require__(226);
	var Vector2 = __webpack_require__(185).Vector2;
	
	var Cubic = function(cfg) {
	  Cubic.superclass.constructor.call(this, cfg);
	};
	
	Cubic.ATTRS = {
	  p1: null,
	  p2: null,
	  p3: null,
	  p4: null,
	  lineWidth: 1,
	  arrow: false
	};
	
	Util.extend(Cubic, Shape);
	
	Util.augment(Cubic, {
	  canStroke: true,
	  type: 'cubic',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var p4 = attrs.p4;
	    var i;
	    var l;
	
	    if (
	      Util.isNull(p1) ||
	      Util.isNull(p2) ||
	      Util.isNull(p3) ||
	      Util.isNull(p4)
	    ) {
	      return null;
	    }
	    var halfWidth = attrs.lineWidth / 2;
	
	    var xDim = CubicMath.extrema(p1[0], p2[0], p3[0], p4[0]);
	    for (i = 0, l = xDim.length; i < l; i++) {
	      xDim[i] = CubicMath.at(p1[0], p2[0], p3[0], p4[0], xDim[i]);
	    }
	    var yDim = CubicMath.extrema(p1[1], p2[1], p3[1], p4[1]);
	    for (i = 0, l = yDim.length; i < l; i++) {
	      yDim[i] = CubicMath.at(p1[1], p2[1], p3[1], p4[1], yDim[i]);
	    }
	    xDim.push(p1[0], p4[0]);
	    yDim.push(p1[1], p4[1]);
	
	    return {
	      minX: Math.min.apply(Math, xDim) - halfWidth,
	      maxX: Math.max.apply(Math, xDim) + halfWidth,
	      minY: Math.min.apply(Math, yDim) - halfWidth,
	      maxY: Math.max.apply(Math, yDim) + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var attrs = this.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var p4 = attrs.p4;
	    var lineWidth = attrs.lineWidth;
	
	    return Inside.cubicline(
	      p1[0], p1[1],
	      p2[0], p2[1],
	      p3[0], p3[1],
	      p4[0], p4[1],
	      lineWidth, x, y
	    );
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var p4 = attrs.p4;
	    var lineWidth = attrs.lineWidth;
	    var arrow = attrs.arrow;
	    context = context || self.get('context');
	    if (
	      Util.isNull(p1) ||
	      Util.isNull(p2) ||
	      Util.isNull(p3) ||
	      Util.isNull(p4)
	    ) {
	      return;
	    }
	
	    context.beginPath();
	    context.moveTo(p1[0], p1[1]);
	
	    if (arrow) {
	      var v = new Vector2(p4[0] - p3[0], p4[1] - p3[1]);
	      var end = Arrow.getEndPoint(v, new Vector2(p4[0], p4[1]), lineWidth);
	      context.bezierCurveTo(p2[0], p2[1], p3[0], p3[1], end.x, end.y);
	      Arrow.makeArrow(context, v, end, lineWidth);
	    } else {
	      context.bezierCurveTo(p2[0], p2[1], p3[0], p3[1], p4[0], p4[1]);
	    }
	  },
	  getPoint: function(t) {
	    var attrs = this.__attrs;
	    return {
	      x: CubicMath.at(attrs.p4[0], attrs.p3[0], attrs.p2[0], attrs.p1[0], t),
	      y: CubicMath.at(attrs.p4[1], attrs.p3[1], attrs.p2[1], attrs.p1[1], t)
	    };
	  }
	});
	
	module.exports = Cubic;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Quadratic
	 * @author hankaiai@126.com
	 * @ignore
	 */
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	var Arrow = __webpack_require__(233);
	var QuadraticMath = __webpack_require__(225);
	var Vector2 = __webpack_require__(185).Vector2;
	
	var Quadratic = function(cfg) {
	  Quadratic.superclass.constructor.call(this, cfg);
	};
	
	Quadratic.ATTRS = {
	  p1: null,
	  p2: null,
	  p3: null,
	  lineWidth: 1,
	  arrow: false
	};
	
	Util.extend(Quadratic, Shape);
	
	Util.augment(Quadratic, {
	  canStroke: true,
	  type: 'quadratic',
	  getDefaultAttrs: function() {
	    return {
	      lineWidth: 1,
	      arrow: false
	    };
	  },
	  calculateBox: function() {
	    var self = this;
	    var attrs = self.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var i;
	    var l;
	
	    if (
	      Util.isNull(p1) ||
	      Util.isNull(p2) ||
	      Util.isNull(p3)
	    ) {
	      return null;
	    }
	    var halfWidth = attrs.lineWidth / 2;
	
	
	    var xDims = QuadraticMath.extrema(p1[0], p2[0], p3[0]);
	    for (i = 0, l = xDims.length; i < l; i++) {
	      xDims[i] = QuadraticMath.at(p1[0], p2[0], p3[0], xDims[i]);
	    }
	    xDims.push(p1[0], p3[0]);
	    var yDims = QuadraticMath.extrema(p1[1], p2[1], p3[1]);
	    for (i = 0, l = yDims.length; i < l; i++) {
	      yDims[i] = QuadraticMath.at(p1[1], p2[1], p3[1], yDims[i]);
	    }
	    yDims.push(p1[1], p3[1]);
	
	    return {
	      minX: Math.min.apply(Math, xDims) - halfWidth,
	      maxX: Math.max.apply(Math, xDims) + halfWidth,
	      minY: Math.min.apply(Math, yDims) - halfWidth,
	      maxY: Math.max.apply(Math, yDims) + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var self = this;
	    var attrs = self.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var lineWidth = attrs.lineWidth;
	
	    return Inside.quadraticline(
	      p1[0], p1[1],
	      p2[0], p2[1],
	      p3[0], p3[1],
	      lineWidth, x, y
	    );
	  },
	  createPath: function(context) {
	    var self = this;
	    var attrs = self.__attrs;
	    var p1 = attrs.p1;
	    var p2 = attrs.p2;
	    var p3 = attrs.p3;
	    var lineWidth = attrs.lineWidth;
	    var arrow = attrs.arrow;
	
	    if (
	      Util.isNull(p1) ||
	      Util.isNull(p2) ||
	      Util.isNull(p3)
	    ) {
	      return;
	    }
	    context = context || self.get('context');
	    context.beginPath();
	    context.moveTo(p1[0], p1[1]);
	
	
	    if (arrow) {
	      var v = new Vector2(p3[0] - p2[0], p3[1] - p2[1]);
	      var end = Arrow.getEndPoint(v, new Vector2(p3[0], p3[1]), lineWidth);
	      context.quadraticCurveTo(p2[0], p2[1], end.x, end.y);
	      Arrow.makeArrow(context, v, end, lineWidth);
	    } else {
	      context.quadraticCurveTo(p2[0], p2[1], p3[0], p3[1]);
	    }
	  },
	  getPoint: function(t) {
	    var attrs = this.__attrs;
	    return {
	      x: QuadraticMath.at(attrs.p1[0], attrs.p2[0], attrs.p3[0], t),
	      y: QuadraticMath.at(attrs.p1[1], attrs.p2[1], attrs.p3[1], t)
	    };
	  }
	});
	
	module.exports = Quadratic;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(222);
	var Inside = __webpack_require__(223);
	
	var Marker = function(cfg) {
	  Marker.superclass.constructor.call(this, cfg);
	};
	
	Marker.Symbols = {
	  // 圆
	  circle: function(x, y, r, ctx) {
	    ctx.arc(x, y, r, 0, Math.PI * 2, false);
	  },
	  // 正方形
	  square: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.lineTo(x - r, y + r);
	    ctx.closePath();
	  },
	  // 菱形
	  diamond: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x, y - r);
	    ctx.lineTo(x + r, y);
	    ctx.lineTo(x, y + r);
	    ctx.closePath();
	  },
	  // 三角形
	  triangle: function(x, y, r, ctx) {
	    var diffX = r / 0.966;
	    var diffY = r;
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x + diffX, y + diffY);
	    ctx.lineTo(x - diffX, y + diffY);
	    ctx.closePath();
	  },
	  // 倒三角形
	  'triangle-down': function(x, y, r, ctx) {
	    var diffX = r / 0.966;
	    var diffY = r;
	    ctx.moveTo(x, y + r);
	    ctx.lineTo(x + diffX, y - diffY);
	    ctx.lineTo(x - diffX, y - diffY);
	    ctx.closePath();
	  }
	};
	
	Marker.ATTRS = {
	  path: null,
	  lineWidth: 1
	};
	
	Util.extend(Marker, Shape);
	
	Util.augment(Marker, {
	  type: 'marker',
	  canFill: true,
	  canStroke: true,
	  getDefaultAttrs: function() {
	    return {
	      x: 0,
	      y: 0,
	      lineWidth: 1
	    };
	  },
	  calculateBox: function() {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.radius;
	    var lineWidth = attrs.lineWidth;
	    var halfWidth = lineWidth / 2 + r;
	    return {
	      minX: cx - halfWidth,
	      minY: cy - halfWidth,
	      maxX: cx + halfWidth,
	      maxY: cy + halfWidth
	    };
	  },
	  isPointInPath: function(x, y) {
	    var attrs = this.__attrs;
	    var cx = attrs.x;
	    var cy = attrs.y;
	    var r = attrs.radius;
	    return Inside.circle(cx, cy, r, x, y);
	  },
	  createPath: function(context) {
	    var attrs = this.__attrs;
	    var x = attrs.x;
	    var y = attrs.y;
	    var r = attrs.radius;
	    var symbol = attrs.symbol || 'circle';
	    var method;
	    if (Util.isFunction(symbol)) {
	      method = symbol;
	    } else {
	      method = Marker.Symbols[symbol];
	    }
	    context.beginPath();
	    method(x, y, r, context);
	  }/**/
	});
	
	module.exports = Marker;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var Components = {
	  Axis: __webpack_require__(245),
	  Plot: {
	    Back: __webpack_require__(255),
	    Range: __webpack_require__(256)
	  },
	  Labels: __webpack_require__(248),
	  Tooltip: __webpack_require__(257),
	  Legend: __webpack_require__(259),
	  Range: __webpack_require__(263)
	};
	
	module.exports = Components;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var Axis = __webpack_require__(246);
	
	Axis.Abstract = __webpack_require__(247);
	Axis.Circle = __webpack_require__(252);
	Axis.MultLine = __webpack_require__(253);
	Axis.Helix = __webpack_require__(254);
	
	module.exports = Axis;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 坐标轴的基类
	 * @ignore
	 */
	
	'use strict';
	
	var Abstract = __webpack_require__(247);
	var Util = __webpack_require__(169);
	var CLS_AXIS = 'x-chart-axis';
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	var MMath = __webpack_require__(187);
	
	function Axis(cfg) {
	  Axis.superclass.constructor.call(this, cfg);
	}
	
	Axis.CFG = {
	  zIndex: 4, // @type {Number} Z 轴位置
	  x: null, // @type {Number} 距离初始位置的x轴偏移量,仅对于左侧、右侧的纵向坐标有效
	  y: null, // @type {Number} 距离初始位置的y轴偏移量，仅对顶部、底部的横向坐标轴有效
	  elCls: CLS_AXIS, // @type {String} 附加的样式
	  line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	    lineWidth: 1,
	    stroke: '#C0D0E0'
	  },
	  tickLine: { // @type {Attrs} 标注坐标线的图形属性
	    lineWidth: 1,
	    stroke: '#C0D0E0',
	    value: 5
	  },
	  isVertical: false,
	  start: null, // @type {Object} 起点
	  end: null // @type {Object} 终点
	};
	
	Util.extend(Axis, Abstract);
	
	Util.augment(Axis, {
	  _getAvgLabelLength: function(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    return labels[1].attr('x') - labels[0].attr('x');
	  },
	  // 获取偏移位置的向量
	  getSideVector: function(offset) {
	    var self = this;
	    var factor = self.get('factor');
	    var isVertical = self.get('isVertical');
	    var start = self.get('start');
	    var end = self.get('end');
	    var axisVector = self.getAxisVector();
	    var normal = axisVector.normalize(); // 转换成单位向量
	    var direction = false;
	    if ((isVertical && (start.y < end.y)) || (!isVertical && (start.x > end.x))) {
	      direction = true;
	    }
	    var verticalVector = normal.vertical(direction);
	    return verticalVector.multiplyScaler(offset * factor);
	  },
	  getAxisVector: function() {
	    var start = this.get('start');
	    var end = this.get('end');
	    return new Vector2(end.x - start.x, end.y - start.y);
	  },
	  /**
	   * @protected
	   * 获取坐标轴的path
	   * @return {String|Array} path
	   */
	  getLinePath: function() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    return path;
	  },
	  getTickEnd: function(start, value) {
	    var self = this;
	    var lineAttrs = self.get('tickLine');
	    var offsetVector;
	    value = value ? value : lineAttrs.value;
	    offsetVector = self.getSideVector(value);
	    return {
	      x: start.x + offsetVector.x,
	      y: start.y + offsetVector.y
	    };
	  },
	  // 获取坐标轴上的节点位置
	  getTickPoint: function(tickValue) {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var rangeX = end.x - start.x;
	    var rangeY = end.y - start.y;
	    return {
	      x: start.x + rangeX * tickValue,
	      y: start.y + rangeY * tickValue
	    };
	  },
	  // 渲染标题
	  renderTitle: function() {
	    var self = this;
	    var title = self.get('title');
	    var offsetPoint = self.getTickPoint(0.5);
	    var titleOffset = self.get('titleOffset');
	    var labelsGroup = self.get('labelsGroup');
	    if (labelsGroup) {
	      var labelLength = self.getMaxLabelWidth(labelsGroup);
	      var labelOffset = self.get('labelOffset') || 10;
	      if ((labelLength + labelOffset + 20) < titleOffset) {
	        titleOffset = (labelLength + labelOffset + 20);
	      }
	    }
	    var cfg = Util.mix({}, title);
	    if (title.text) {
	      var sideVector = self.getSideVector(titleOffset);
	      var point = {
	        x: offsetPoint.x + sideVector.x,
	        y: offsetPoint.y + sideVector.y
	      };
	
	      var vector = self.getAxisVector(); // 坐标轴方向的向量
	      var angle = 0;
	      if (!MMath.equal(vector.y, 0)) { // 所有水平坐标轴，文本不转置
	        var v1 = new Vector2(1, 0);
	        var v2 = new Vector2(vector.x, vector.y);
	        angle = v2.angleTo(v1, true);
	      }
	
	      cfg.rotate = angle * (180 / Math.PI); //* -1;
	      cfg.x = point.x; // + (title.x || 0);
	      cfg.y = point.y; // + (title.y || 0);
	      self.addShape('Text', {
	        elCls: CLS_AXIS + '-title',
	        attrs: cfg
	      });
	    }
	  },
	  autoRotateLabels: function() {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var title = self.get('title');
	    if (labelsGroup) {
	      var offset = self.get('labelOffset') || 10;
	      var append = offset;
	      var titleOffset = self.get('titleOffset');
	      var vector = self.getAxisVector(); // 坐标轴的向量，仅处理水平或者垂直的场景
	      var angle;
	      var maxWidth;
	      if (MMath.equal(vector.x, 0) && title && title.text) { // 坐标轴垂直，由于不知道边距，只能防止跟title重合，如果title不存在，则不自动旋转
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if ((maxWidth + offset) > (titleOffset - append)) {
	          angle = Math.acos((titleOffset - append) / (maxWidth + offset)) * -1;
	        }
	      } else if (MMath.equal(vector.y, 0) && labelsGroup.getCount() > 1) { // 坐标轴水平，不考虑边距，根据最长的和平均值进行翻转
	        var avgWidth = Math.abs(self._getAvgLabelLength(labelsGroup)); // Math.abs(vector.x) / (self.get('ticks').length - 1);,平均计算存在问题，分类坐标轴的点前后有空白
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if (maxWidth > avgWidth) {
	          angle = Math.atan2(offset * 1.5, avgWidth);
	        }
	      }
	
	      if (angle) {
	        var factor = self.get('factor');
	        Util.each(labelsGroup.get('children'), function(label) {
	          label.rotateAtStart(angle);
	          if (MMath.equal(vector.y, 0)) {
	            if (factor > 0) {
	              label.attr('textAlign', 'left');
	            } else {
	              label.attr('textAlign', 'right');
	            }
	          }
	        });
	      }
	    }
	  }
	});
	
	module.exports = Axis;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Labels = __webpack_require__(248);
	var Group = __webpack_require__(173).Group;
	var ShowLabels = Labels.ShowLabels;
	var CLS_AXIS = 'x-chart-axis';
	var Grid = __webpack_require__(251);
	
	var Abstract = function(cfg) {
	  Abstract.superclass.constructor.call(this, cfg);
	};
	
	Abstract.CFG = {
	  zIndex: 4,
	  ticks: null, // @type {Object} 坐标轴上的坐标点
	  line: null, // @type {Attrs} 坐标轴线的配置信息,如果设置成null，则不显示轴线
	  tickLine: null, // @type {Attrs} 标注坐标线的配置,如果设置成null，则不显示轴线
	  subTick: null, // @type {Number} 次坐标划分度
	  grid: null, // @type {Grid} 栅格配置
	  labels: { // @type {LabelCfg} 坐标轴上的文本
	    label: {},
	    autoRotate: true
	  },
	  title: {}, // @type {Attrs} 标题
	  autoPaint: true, // @type {Boolean} 是否自动绘制
	  labelOffset: 10, // @type {Number} 距离坐标轴的距离
	  titleOffset: 20, // @type {Number} 标题距离坐标轴的位置
	  formatter: null, // @type {Function} 格式化坐标轴上的节点
	  firstTick: true // @type {Boolean} 是否显示第一个标注
	};
	
	Util.mixin(Abstract, [ShowLabels]);
	
	Util.extend(Abstract, Group);
	
	Util.augment(Abstract, {
	  // 覆写GroupBase方法 渲染
	  _renderUI: function() {
	    var labels = this.get('labels');
	    if (labels) {
	      this.renderLabels();
	    }
	    if (this.get('autoPaint')) {
	      this.paint();
	    }
	    if (!Util.isNull(this.get('title'))) {
	      this.renderTitle();
	    }
	    this.sort();
	  },
	  /**
	   * 格式化ticks,将tick格式化成 text,value的形式
	   * @protected
	   */
	  _parseTicks: function(ticks) {
	    ticks = ticks || [];
	    var length = ticks.length;
	    for (var i = 0; i < length; i++) {
	      var item = ticks[i];
	      if (!Util.isObject(item)) {
	        ticks[i] = this.parseTick(item, i, length);
	      }
	    }
	    this.set('ticks', ticks);
	    return ticks;
	  },
	  // 添加坐标轴上的坐标点
	  _addTickItem: function(index, point, length) {
	    var tickItems = this.get('tickItems');
	    var cfg = {
	      x1: point.x,
	      y1: point.y
	    };
	    var end = this.getTickEnd(point, length, index);
	    cfg.x2 = end.x;
	    cfg.y2 = end.y;
	    if (!tickItems) {
	      tickItems = [];
	      this.set('tickItems', tickItems);
	    }
	    tickItems.push(cfg);
	  },
	  /**
	   * 格式化坐标轴上的节点，用于展示
	   * @param  {*} value 格式化文本
	   * @return {String}  格式化后的信息
	   */
	  _formatPoint: function(value) {
	    var formatter = this.get('formatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  },
	  _renderLines: function() {
	    var lineAttrs = this.get('line');
	    var id = this.get('id');
	    var path;
	    if (lineAttrs) {
	      path = this.getLinePath();
	      lineAttrs = Util.mix({
	        path: path
	      }, lineAttrs);
	      var lineShape = this.addShape('path', {
	        elCls: CLS_AXIS + '-line',
	        attrs: lineAttrs
	      });
	      lineShape.id = id + 'axisLine';
	      lineShape.animateType = 'axisLine';
	      this.set('lineShape', lineShape);
	    }
	  },
	  // 处理节点
	  _processTicks: function() {
	    var self = this;
	    var labels = self.get('labels');
	    var subTickCount = self.get('subTick');
	    var tickLineCfg = self.get('tickLine');
	    var ticks = self.get('ticks');
	    ticks = self._parseTicks(ticks);
	
	    Util.each(ticks, function(tick, index) {
	      var tickPoint = self.getTickPoint(tick.value, index);
	      if (tickLineCfg) {
	        self._addTickItem(index, tickPoint);
	      }
	      if (labels) {
	        self.addLabel(self._formatPoint(tick.text), tickPoint, index, tick.value);
	      }
	    });
	
	    if (subTickCount) { // 如果有设置次级分点，添加次级tick
	      Util.each(ticks, function(tick, index) {
	        var diff = index ? tick.value - ticks[index - 1].value : tick.value;
	        diff = diff / self.get('subTick');
	
	        for (var i = 1; i < subTickCount; i++) {
	          var subTick = {
	            text: '',
	            value: index ? ticks[index - 1].value + i * diff : i * diff
	          };
	
	          if (tickLineCfg) {
	            var tickPoint = self.getTickPoint(subTick.value);
	            var length = parseInt(tickLineCfg.value * (3 / 5), 10);
	            self._addTickItem(i - 1, tickPoint, length);
	          }
	        }
	      });
	    }
	  },
	  // 渲染ticks
	  _renderTicks: function() {
	    var self = this;
	    var tickItems = self.get('tickItems');
	    var tickLineCfg = self.get('tickLine');
	    var id = self.get('id');
	    var path = '';
	    var cfg = Util.mix({}, tickLineCfg);
	
	    if (tickItems) {
	      Util.each(tickItems, function(item) {
	        var subPath = Util.substitute('M{x1} {y1}L{x2} {y2}', item);
	        path += subPath;
	      });
	      delete cfg.value;
	      cfg.path = path;
	      var tickShape = self.addShape('path', {
	        elCls: CLS_AXIS + '-ticks',
	        attrs: cfg
	      });
	      tickShape.id = id + 'axisTick';
	      tickShape.animateType = 'axisTick';
	      self.set('tickShape', tickShape);
	    }
	  },
	  // 渲染栅格
	  _renderGrid: function() {
	    var grid = this.get('grid');
	    if (!grid) {
	      return;
	    }
	    if (Util.isNull(grid.animate)) {
	      grid.animate = this.get('animate');
	    }
	    var gridGroup = this.addGroup(Grid, grid);
	    this.set('gridGroup', gridGroup);
	  },
	  paint: function() {
	    this._renderLines();
	    this._processTicks();
	    this._renderTicks();
	    this._renderGrid();
	    var labels = this.get('labels');
	    if (labels && labels.autoRotate) {
	      this.autoRotateLabels();
	    }
	  },
	  /**
	   * @protected
	   * 转换tick
	   */
	  parseTick: function(tick, index, length) {
	    return {
	      text: tick,
	      value: index / (length - 1)
	    };
	  },
	  /*
	   * @override
	   * 获取文本的对齐方式
	   */
	  getTextAnchor: function(vector) {
	    var ratio = Math.abs(vector.y / vector.x);
	    var align;
	    if (ratio >= 1) { // 上面或者下面
	      align = 'center';
	    } else {
	      if (vector.x > 0) { // 右侧
	        align = 'left';
	      } else { // 左侧
	        align = 'right';
	      }
	    }
	    return align;
	  },
	  /**
	   * @override
	   * 添加文本
	   */
	  addLabel: function(value, point, index, unFormatterValue) {
	    var id = this.get('id') + 'label' + unFormatterValue;
	    var labelsGroup = this.get('labelsGroup');
	    var label = {};
	    var rst;
	
	    if (labelsGroup) {
	      var offset = this.get('labelOffset') || 10;
	      var vector = this.getSideVector(offset, point, index);
	      point = {
	        x: point.x + vector.x,
	        y: point.y + vector.y
	      };
	
	      label.text = value;
	      label.x = point.x;
	      label.y = point.y;
	      label.textAlign = this.getTextAnchor(vector);
	      label.id = id ? id : value;
	      rst = labelsGroup.addLabel(label);
	    }
	    return rst;
	  },
	  // 获取文本的最大宽度
	  getMaxLabelWidth: function(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    var max = 0;
	    Util.each(labels, function(label) {
	      var bbox = label.getBBox();
	      var width = bbox.width;
	      if (max < width) {
	        max = width;
	      }
	    });
	    return max;
	  },
	  // 移除控件前移除对应的grid和labels
	  remove: function() {
	    Abstract.superclass.remove.call(this);
	    var gridGroup = this.get('gridGroup');
	    gridGroup && gridGroup.remove();
	    this.removeLabels();
	  },
	  autoRotateLabels: function() {
	    // 旋转文本
	  },
	  renderTitle: function() {
	    // 渲染标题
	  },
	  getLinePath: function() {
	    // 获取坐标轴的path
	  },
	  getTickPoint: function() {
	    // 获取tick在画布上的位置
	  },
	  getTickEnd: function() {
	    // 获取标示坐标点的线的终点
	  },
	  getSideVector: function() {
	    // 获取距离坐标轴的向量
	  }
	});
	
	module.exports = Abstract;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var Labels = __webpack_require__(249);
	Labels.ShowLabels = __webpack_require__(250);
	
	module.exports = Labels;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 组标签
	 * @author huangtonger@aliyun.com
	 * @ignore
	 */
	'use strict';
	
	var Group = __webpack_require__(173).Group;
	var Util = __webpack_require__(169);
	
	var Labels = function(cfg) {
	  Labels.superclass.constructor.call(this, cfg);
	};
	
	Labels.CFG = {
	  zIndex: 6,
	  items: null, // @type {Array} 文本集合
	  label: null, // @type {Attrs} 内部label的图形信息
	  /**
	   * 格式化函数 function (text,item)
	   * @type {Function}
	   */
	  renderer: null,
	
	  /**
	   * 是否自定义显示label
	   * @type {Boolean}
	   */
	  custom: false,
	
	  /**
	   * 改变时是否执行动画
	   * @type {Boolean}
	   */
	  animate: false,
	
	  /**
	   * custom : true时使用的容器的模板 ,必须存在 class = "g-labels "
	   * @type {String}
	   */
	  html: '<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',
	
	  /**
	   * custom =true时，单个label的模板，必须存在 class = "g-label"
	   * @type {String}
	   */
	  itemTpl: '<div class="g-label" style="position:absolute;">{text}</div>',
	
	  /**
	   * 执行动画的时间
	   * @type {Number}
	   */
	  duration: 400
	};
	
	Util.extend(Labels, Group);
	
	Util.augment(Labels, {
	  // 渲染控件
	  _renderUI: function() {
	    this._drawLabels();
	  },
	  // 绘制文本
	  _drawLabels: function() {
	    var self = this;
	    var items = self.get('items');
	    Util.each(items, function(item, index) {
	      self._addLabel(item, index);
	    });
	  },
	  /**
	   * 添加文本
	   */
	  _addLabel: function(item, index) {
	    var cfg = this._getLabelCfg(item, index);
	    return this._createText(cfg);
	  },
	  /**
	   * 获取本文配置项
	   * @param {Object} item 文本配置项
	   */
	  _getLabelCfg: function(item, index) {
	    var label = this.get('label') || {};
	    var renderer = this.get('renderer');
	
	    if (!Util.isObject(item)) {
	      var tmp = item;
	      item = {};
	      item.text = tmp;
	    }
	
	    if (renderer) {
	      item.text = renderer(item.text, item, index);
	    }
	
	    if (Util.isNull(item.text)) {
	      item.text = '';
	    }
	
	    item.text = item.text + '';
	    var cfg = Util.mix({}, item, label, {
	      x: (item.x || 0) + (label.x || 0),
	      y: (item.y || 0) + (label.y || 0)
	    }); // 用户设入配置覆盖自动计算配置
	    return cfg;
	  },
	  /**
	   * 创建按文本
	   * @private
	   */
	  _createText: function(cfg) {
	    var self = this;
	    var custom = self.get('custom');
	    var customDiv = self.get('customDiv');
	    var labelShape;
	
	    if (custom) {
	      if (!customDiv) {
	        var tmp = self.get('html');
	        var wraper = self.get('canvas').get('el').parentNode;
	        customDiv = Util.createDom(tmp);
	        wraper.style.position = 'relative';
	        wraper.appendChild(customDiv);
	        self.set('customDiv', customDiv);
	      }
	
	      var node = self._createDom(cfg);
	      customDiv.appendChild(node);
	      self._setCustomPosition(cfg, node);
	    } else {
	      labelShape = this.addShape('text', {
	        attrs: cfg
	      });
	      labelShape.id = cfg.id;
	      labelShape.animateType = 'label';
	      return labelShape;
	    }
	  },
	  // 设置自定义label的位置
	  _setCustomPosition: function(cfg, labelDom) {
	    var textAlign = cfg.textAlign || 'left';
	    var top = cfg.y;
	    var left = cfg.x;
	    var width = Util.getWidth(labelDom);
	    var height = Util.getHeight(labelDom);
	    top = top - height / 2;
	    if (textAlign === 'center') {
	      left = left - width / 2;
	    } else if (textAlign === 'right') {
	      left = left - width;
	    }
	    labelDom.style.top = parseInt(top, 10) + 'px';
	    labelDom.style.left = parseInt(left, 10) + 'px';
	  },
	  _createDom: function(cfg) {
	    var self = this;
	    var itemTpl = self.get('itemTpl');
	    var str = Util.substitute(itemTpl, cfg);
	    var node = Util.createDom(str);
	    return node;
	  },
	  /**
	   * 获取内部labels
	   * @return {Array} 内部的label集合
	   */
	  getLabels: function() {
	    var self = this;
	    var customDiv = self.get('customDiv');
	    if (customDiv) {
	      return Util.toArray(customDiv.childNodes);
	    }
	    return self.get('children');
	  },
	  /**
	   * 添加文本
	   * @param {Object} item 文本配置项
	   */
	  addLabel: function(item) {
	    var items = this.get('items');
	    var count = items.length;
	    items.push(item);
	    return this._addLabel(item, count);
	  },
	  /**
	   * 更改label
	   * @param  {Chart.Canvas.Shape.Label} label [description]
	   * @param  {Object} item  [description]
	   */
	  changeLabel: function(label, item) {
	    var self = this;
	    var custom = self.get('custom');
	    var index;
	    var cfg;
	    index = Util.indexOf(self.get('children'), label);
	    cfg = self._getLabelCfg(item, index);
	    if (label) {
	      if (custom) {
	        var node = self._createDom(cfg);
	        label.innerHTML = node.innerHTML;
	        self._setCustomPosition(cfg, label);
	      } else {
	        label.attr('text', cfg.text);
	        if (label.attr('x') !== cfg.x || label.attr('y') !== cfg.y) {
	          var rotate = label.get('attrs').rotate;
	          if (rotate) {
	            label.rotateAtStart(-rotate);
	          }
	          label.attr(cfg);
	          if (rotate) {
	            label.rotateAtStart(rotate);
	          }
	        }
	      }
	    }
	  },
	  clear: function() {
	    var self = this;
	    var customDiv = self.get('customDiv');
	    if (customDiv) {
	      customDiv.innerHTML = '';
	    }
	    Labels.superclass.clear.call(self);
	  },
	  /**
	   * 设置文本
	   * @param {Array} items 文本集合
	   */
	  setItems: function(items) {
	    var self = this;
	    self.clear();
	    self.set('items', items);
	    self._drawLabels();
	  },
	  remove: function() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      customDiv.parentNode.removeChild(customDiv);
	    }
	    Labels.superclass.remove.call(this);
	  }
	});
	
	module.exports = Labels;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * 内部显示Labels的控件扩展
	 * @ignore
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Labels = __webpack_require__(249);
	
	var ShowLabels = function() {};
	
	ShowLabels.ATTRS = {
	  /**
	   * 多个文本的配置项
	   * @type {Object}
	   */
	  labels: null
	};
	
	Util.augment(ShowLabels, {
	  /**
	   * @protected
	   * 渲染文本
	   */
	  renderLabels: function() {
	    var self = this;
	    var labels = self.get('labels');
	    var labelsGroup;
	    if (!labels) {
	      return;
	    }
	    if (!labels.items) {
	      labels.items = [];
	    }
	    if (Util.isNull(labels.animate)) {
	      labels.animate = self.get('animate');
	    }
	
	    labelsGroup = self.addGroup(Labels, labels);
	    self.set('labelsGroup', labelsGroup);
	  },
	  /**
	   * 设置labels
	   * @param  {Array} items items的配置信息
	   */
	  resetLabels: function(items) {
	    var self = this;
	    var labels = self.get('labels');
	
	    if (!labels) {
	      return;
	    }
	
	    var labelsGroup = self.get('labelsGroup');
	    var children = labelsGroup.getLabels();
	    var count = children.length;
	    items = items || labels.items;
	    Util.each(items, function(item, index) {
	      if (index < count) {
	        var label = children[index];
	        labelsGroup.changeLabel(label, item);
	      } else {
	        self.addLabel(item.text, item);
	      }
	    });
	    for (var i = count - 1; i >= items.length; i--) {
	      children[i].remove();
	    }
	  },
	  /**
	   * @protected
	   * 添加文本项
	   * @param {String|Number} value  显示的文本
	   * @param {Object} offsetPoint 显示的位置
	   */
	  addLabel: function(value, offsetPoint) {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var label = {};
	    var rst;
	    if (labelsGroup) {
	      label.text = value;
	      label.x = offsetPoint.x;
	      label.y = offsetPoint.y;
	      label.point = offsetPoint;
	      label.textAlign = offsetPoint.textAlign;
	      label.id = offsetPoint.id;
	      if (offsetPoint.rotate) {
	        label.rotate = offsetPoint.rotate;
	      }
	      rst = labelsGroup.addLabel(label);
	    }
	    return rst;
	  },
	  /**
	   * @protected
	   * 移除文本
	   */
	  removeLabels: function() {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    labelsGroup && labelsGroup.remove();
	    self.set('labelsGroup', null);
	  }
	});
	
	module.exports = ShowLabels;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 表格的栅格背景
	 * @ignore
	 */
	
	'use strict';
	
	var Group = __webpack_require__(173).Group;
	var Util = __webpack_require__(169);
	var CLS_GRID = 'x-chart-grid';
	
	function Grid(cfg) {
	  Grid.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Grid, Group);
	
	Grid.CFG = {
	  zIndex: 1,
	  elCls: CLS_GRID,
	  /**
	   * 如果栅格线由多个点构成，线的类型
	   *
	   *  - line 不封闭的线
	   *  - polygon 封闭的多边形
	   *  - circle 圆
	   * @type {String}
	   */
	  type: 'line',
	  /**
	   * 线的样式配置
	   * @type {Object}
	   */
	  line: null,
	  /**
	   * 线集合的配置
	   * @type {Array}
	   */
	  items: null,
	  /**
	   * 栅格内部的奇数背景配置
	   * @type {Object}
	   */
	  odd: null,
	  /**
	   * 栅格内部的偶数背景配置
	   * @type {Object}
	   */
	  even: null,
	  /**
	   * 发生改变时是否触发动画
	   * @type {Boolean}
	   */
	  animate: false,
	  matrix: null,
	  duration: 1000
	};
	
	Util.augment(Grid, {
	  _renderUI: function() {
	    Grid.superclass._renderUI.call(this);
	    this._drawLines();
	  },
	  // 绘制栅格线
	  _drawLines: function() {
	    var self = this;
	    var lineCfg = self.get('line');
	    var items = self.get('items');
	    if (items && items.length > 0) {
	      self._precessItems(items);
	      self._drawGridLines(items, lineCfg, CLS_GRID + '-line');
	    }
	  },
	  // 渲染自定义栅格，渲染奇偶线
	  _precessItems: function(items) {
	    var self = this;
	    var preItem;
	    Util.each(items, function(item, index) {
	      if (preItem && (self.get('odd') || self.get('even'))) {
	        self._drawOddEven(item, preItem, index);
	      }
	
	      preItem = item;
	    });
	  },
	  // 画栅格
	  _drawGridLines: function(items, lineCfg, cls) {
	    var self = this;
	    var type = this.get('type');
	    var smooth = this.get('smooth'); // 用于绘制地理投影的坐标轴网格线
	    var gridLine;
	    var points;
	    var path;
	    var cfg;
	
	    if (type === 'line' || type === 'polygon') {
	      Util.each(items, function(item, idx) {
	        if (idx === 0) {
	          return;
	        }
	        if (smooth) { // 平缓处理
	          points = [];
	          Util.each(item, function(subItem) {
	            points.push(subItem.x);
	            points.push(subItem.y);
	          });
	          path = Util.catmullRom2bezier(points);
	          path.unshift(['M', item[0].x, item[0].y]);
	        } else {
	          path = [];
	          Util.each(item, function(subItem, index) {
	            if (index === 0) {
	              path.push(['M', subItem.x, subItem.y]);
	            } else {
	              path.push(['L', subItem.x, subItem.y]);
	            }
	          });
	        }
	        cfg = Util.mix({}, lineCfg, {
	          path: path
	        });
	        gridLine = self.addShape('path', {
	          elCls: cls,
	          attrs: cfg
	        });
	        gridLine.animateType = 'gridLine';
	        gridLine.id = item.id + 'grid';
	        self.set('gridLine' + cls, gridLine);
	      });
	    } else {
	      Util.each(items, function(item, idx) {
	        if (idx === 0) {
	          return;
	        }
	        path = [];
	        Util.each(item, function(subItem, index) {
	          var radius = subItem.radius;
	          if (index === 0) {
	            path.push(['M', subItem.x, subItem.y]);
	          } else {
	            path.push(['A', radius, radius, 0, 0, subItem.flag, subItem.x, subItem.y]);
	          }
	        });
	        cfg = Util.mix({}, lineCfg, {
	          path: path
	        });
	        gridLine = self.addShape('path', {
	          elCls: cls,
	          attrs: cfg
	        });
	        gridLine.animateType = 'gridLine';
	        gridLine.id = item.id + 'grid';
	        self.set('gridLine' + cls, gridLine);
	      });
	    }
	  },
	  // 绘制奇偶背景
	  _drawOddEven: function(item, preItem, index) {
	    var self = this;
	    var odd = self.get('odd');
	    var even = self.get('even');
	    var name;
	    var attrs;
	
	    if (index % 2 === 0) {
	      if (even) {
	        attrs = self._getBackItem(preItem, item, even);
	        name = 'even';
	      }
	    } else if (odd) {
	      attrs = self._getBackItem(preItem, item, odd);
	      name = 'odd';
	    }
	    if (attrs) {
	      self.addShape('Path', {
	        elCls: CLS_GRID + '-' + name,
	        attrs: attrs
	      });
	    }
	  },
	  _getBackItem: function(start, end, cfg) {
	    var path = [];
	    var type = this.get('type');
	
	    if (type === 'line' || type === 'polygon') {
	      Util.each(start, function(subItem, index) {
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['L', subItem.x, subItem.y]);
	        }
	      });
	      for (var i = end.length - 1; i >= 0; i--) {
	        var item1 = end[i];
	        path.push(['L', item1.x, item1.y]);
	      }
	      path.push(['Z']);
	    } else {
	      var flag = start[0].flag;
	      Util.each(start, function(subItem, index) {
	        var radius = subItem.radius;
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['A', radius, radius, 0, 0, subItem.flag, subItem.x, subItem.y]);
	        }
	      });
	      for (var j = end.length - 1; j >= 0; j--) {
	        var endSubItem = end[j];
	        var endRadius = endSubItem.radius;
	        if (j === end.length - 1) {
	          path.push(['M', endSubItem.x, endSubItem.y]);
	        } else {
	          path.push(['A', endRadius, endRadius, 0, 0, flag === 1 ? 0 : 1, endSubItem.x, endSubItem.y]);
	        }
	      }
	    }
	
	    cfg = Util.mix({}, cfg, {
	      path: path
	    });
	    return cfg;
	  }
	});
	
	module.exports = Grid;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 圆形的坐标，用于雷达图或者圆形仪表盘
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Abstract = __webpack_require__(247);
	var Matrix = __webpack_require__(185);
	var MMath = __webpack_require__(187);
	var Vector = Matrix.Vector2;
	
	var Circle = function(cfg) {
	  Circle.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Circle, Abstract);
	
	Circle.CFG = {
	  type: 'circle',
	  tickInterval: null, // @type {Number} 指定角度值，将圆分成几部分，一定是能够将圆平分的角度值
	  startAngle: -Math.PI / 2, // @type {Number} 开始弧度
	  endAngle: Math.PI * 3 / 2, // @type {Number} 结束弧度
	  grid: {
	    line: {
	      lineWidth: 1,
	      stroke: '#C0D0E0'
	    }
	  },
	  labelOffset: 5
	};
	
	Util.augment(Circle, {
	  /**
	   * 将tick格式化成 text,value的形式
	   * @protected
	   */
	  parseTick: function(tick, index, length) {
	    return {
	      text: tick,
	      value: index / length
	    };
	  },
	  // 根据角度获取圆上的点
	  _getCirclePoint: function(angle, radius) {
	    var self = this;
	    var center = self.get('center');
	    radius = radius || self.get('radius');
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  },
	  // 获取坐标轴上的点
	  getTickPoint: function(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getCirclePoint(angle);
	  },
	  /**
	   * @override
	   * 覆写，获取距离坐标轴的向量
	   */
	  getSideVector: function(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = new Vector(point.x - center.x, point.y - center.y);
	    if (offset) {
	      vector.setLength(offset);
	    }
	    return vector;
	  },
	  getSidePoint: function(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);
	
	    return {
	      x: point.x + vector.x,
	      y: point.y + vector.y
	    };
	  },
	  getTickEnd: function(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.value;
	    return self.getSidePoint(start, length);
	  },
	  getTextAnchor: function(vector) {
	    var align;
	    if (MMath.equal(vector.x, 0)) {
	      align = 'center';
	    } else if (vector.x > 0) {
	      align = 'left';
	    } else if (vector.x < 0) {
	      align = 'right';
	    }
	    return align;
	  },
	  getLinePath: function() {
	    var self = this;
	    var center = self.get('center');
	    var x = center.x;
	    var y = center.y;
	    var rx = self.get('radius');
	    var ry = rx;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var inner = self.get('inner');
	
	    var path = [];
	    if (Math.abs(endAngle - startAngle) === Math.PI * 2) {
	      path = [
	        ['M', x, y],
	        ['m', 0, -ry],
	        ['a', rx, ry, 0, 1, 1, 0, 2 * ry],
	        ['a', rx, ry, 0, 1, 1, 0, -2 * ry],
	        ['z']
	      ];
	    } else {
	      var startPoint = self._getCirclePoint(startAngle);
	      var endPoint = self._getCirclePoint(endAngle);
	      var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;
	      var sweep = startAngle > endAngle ? 0 : 1;
	      if (!inner) {
	        path = [
	          ['M', x, y],
	          ['L', startPoint.x, startPoint.y],
	          ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],
	          ['L', x, y]
	        ];
	      } else {
	        var innerStartVector = self.getSideVector(inner * rx, startPoint);
	        var innerEndVector = self.getSideVector(inner * rx, endPoint);
	        var innerStartPoint = {
	          x: innerStartVector.x + x,
	          y: innerStartVector.y + y
	        };
	        var innerEndPoint = {
	          x: innerEndVector.x + x,
	          y: innerEndVector.y + y
	        };
	
	        path = [
	          ['M', innerStartPoint.x, innerStartPoint.y],
	          ['L', startPoint.x, startPoint.y],
	          ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],
	          ['L', innerEndPoint.x, innerEndPoint.y],
	          ['A', rx * inner, ry * inner, 0, large, Math.abs(sweep - 1), innerStartPoint.x, innerStartPoint.y]
	        ];
	      }
	    }
	    return path;
	  },
	  addLabel: function(text, point, index, unFormatterValue) {
	    var self = this;
	    var offset = self.get('labelOffset') || 0.001;
	    point = self.getSidePoint(point, offset);
	    Circle.superclass.addLabel.call(self, text, point, index, unFormatterValue);
	  },
	  autoRotateLabels: function() {
	    var self = this;
	    var ticks = self.get('ticks');
	    var labelsGroup = self.get('labelsGroup');
	    if (labelsGroup && ticks.length > 12) { // 小于15个文本时文本不旋转
	      var radius = self.get('radius');
	      var startAngle = self.get('startAngle');
	      var endAngle = self.get('endAngle');
	      var totalAngle = (endAngle - startAngle);
	      var avgAngle = totalAngle / (ticks.length - 1);
	      var avgWidth = Math.sin(avgAngle / 2) * radius * 2;
	      var maxLength = self.getMaxLabelWidth(labelsGroup);
	      Util.each(labelsGroup.get('children'), function(label, index) {
	        var tick = ticks[index];
	        var angle = tick.value * totalAngle + startAngle;
	        var mode = angle % (Math.PI * 2);
	        if (maxLength < avgWidth) { // 文本的最大宽度大于
	          if (mode <= 0) {
	            angle = angle + Math.PI;
	          }
	          if (mode > Math.PI) {
	            angle = angle - Math.PI;
	          }
	          angle = angle - Math.PI / 2;
	          label.attr('textAlign', 'center');
	        } else {
	          if (mode > Math.PI / 2) {
	            angle = angle - Math.PI;
	          } else if (mode < Math.PI / 2 * -1) {
	            angle = angle + Math.PI;
	          }
	        }
	        label.rotateAtStart(angle);
	      });
	    }
	  }
	});
	
	module.exports = Circle;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 用于多段的坐标轴绘制
	 * @author zaifei.zwx@alibaba-inc.com
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(246);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var MultLine = function(cfg) {
	  MultLine.superclass.constructor.call(this, cfg);
	};
	
	MultLine.CFG = {
	  type: 'multLine'
	};
	
	Util.extend(MultLine, Base);
	
	Util.augment(MultLine, {
	  getLinePath: function() {
	    var self = this;
	    var tickPoints = self.get('tickPoints');
	    var start = self.get('start');
	    var end = self.get('end');
	    var points = [];
	    points.push(start.x);
	    points.push(start.y);
	    Util.each(tickPoints, function(tick) {
	      points.push(tick.x);
	      points.push(tick.y);
	    });
	    points.push(end.x);
	    points.push(end.y);
	
	    var path = Util.catmullRom2bezier(points);
	    path.unshift(['M', start.x, start.y]);
	    return path;
	  },
	  getTickPoint: function(value, index) {
	    var tickPoints = this.get('tickPoints');
	    return tickPoints[index];
	  },
	  getTickEnd: function(start, value, index) {
	    var self = this;
	    var lineAttrs = self.get('tickLine');
	    var tickLength = value ? value : lineAttrs.value;
	    var offsetVector = self.getSideVector(tickLength, start, index);
	    return {
	      x: start.x + offsetVector.x,
	      y: start.y + offsetVector.y
	    };
	  },
	  // 获取偏移位置的向量
	  getSideVector: function(offset, point, index) {
	    var self = this;
	    var preTickPoint;
	    if (index === 0) {
	      preTickPoint = self.get('start');
	    } else {
	      var tickPoints = self.get('tickPoints');
	      preTickPoint = tickPoints[index - 1];
	    }
	
	    var vector = new Vector2(point.x - preTickPoint.x, point.y - preTickPoint.y);
	    var normal = vector.normalize(); // 转换成单位向量
	    var verticalVector = normal.vertical(false);
	    return verticalVector.multiplyScaler(offset);
	  }
	});
	
	module.exports = MultLine;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 螺旋坐标系的螺旋轴绘制
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Abstract = __webpack_require__(247);
	var Matrix = __webpack_require__(185);
	var Vector = Matrix.Vector2;
	
	var Helix = function(cfg) {
	  Helix.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Helix, Abstract);
	
	Helix.CFG = {
	  type: 'helix',
	  grid: {
	    line: {
	      'stroke-width': 1,
	      'stroke': '#C0D0E0'
	    }
	  },
	  labelOffset: 5,
	  startAngle: 1.25 * Math.PI,
	  endAngle: 7.25 * Math.PI,
	  // 螺旋系数
	  a: 0,
	  // 画布中心坐标
	  center: null,
	  // 坐标轴绘制起点
	  axisStart: null,
	  // 坐标轴的n个坐标点
	  crp: []
	};
	
	Util.augment(Helix, {
	  /**
	   * @protected
	   * 获取坐标轴的path
	   * @return {String|Array} path
	   */
	  getLinePath: function() {
	    var self = this;
	    var crp = self.get('crp');
	    var axisStart = self.get('axisStart');
	    var path = Util.catmullRom2bezier(crp);
	    path.unshift(['M', axisStart.x, axisStart.y]);
	    return path;
	  },
	  getTickPoint: function(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getHelixPoint(angle);
	  },
	    // 根据角度获取圆上的点
	  _getHelixPoint: function(angle) {
	    var self = this;
	    var center = self.get('center');
	    // 螺线系数
	    var a = self.get('a');
	    // 螺线方程
	    var radius = a * angle;
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  },
	    /**
	   * @override
	   * @protected
	   * 覆写，获取距离坐标轴的向量
	   */
	  getSideVector: function(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = new Vector(point.x - center.x, point.y - center.y);
	    if (offset) {
	      vector.setLength(offset);
	    }
	    return vector;
	  },
	  getSidePoint: function(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);
	
	    return {
	      x: point.x + vector.x,
	      y: point.y + vector.y
	    };
	  },
	  getTickEnd: function(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.value;
	    return self.getSidePoint(start, length);
	  }
	});
	
	module.exports = Helix;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Group = __webpack_require__(173).Group;
	var PlotRange = __webpack_require__(256);
	
	var PlotBack = function(cfg) {
	  PlotBack.superclass.constructor.call(this, cfg);
	};
	
	PlotBack.CFG = {
	  /**
	   * 类型
	   * @type {String}
	   */
	  type: 'plotBack',
	  /**
	   * 子项集合
	   * @type {Array}
	   */
	  margin: null,
	  /**
	   * 边框
	   * @type {Object}
	   */
	  border: null,
	  /**
	   * 区域
	   * @type {Object}
	   */
	  plotRange: null,
	  /**
	   * 背景
	   * @type {Object}
	   */
	  background: null
	};
	
	Util.extend(PlotBack, Group);
	
	Util.augment(PlotBack, {
	  // 渲染组建前
	  _beforeRenderUI: function() {
	    this._calculateRange();
	  },
	  // 渲染组建
	  _renderUI: function() {
	    this._renderBorder();
	    this._renderBackground();
	  },
	  // 渲染边框
	  _renderBorder: function() {
	    var self = this;
	    var border = self.get('border');
	    var canvas = self.get('canvas');
	    var rect = self.get('borderShape');
	    var cfg;
	    if (border) {
	      var width = self.get('width') || canvas.get('width');
	      var height = self.get('height') || canvas.get('height');
	      if (!rect) {
	        cfg = Util.mix({
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        }, border);
	        rect = this.addShape('rect', {
	          attrs: cfg
	        });
	        this.set('borderShape', rect);
	      } else {
	        rect.attr({
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        });
	      }
	    } else {
	      return;
	    }
	  },
	  // 渲染背景
	  _renderBackground: function() {
	    var self = this;
	    var background = self.get('background');
	    var plotRange = self.get('plotRange');
	    var backShape = self.get('backShape');
	    var width;
	    var height;
	    var tl;
	    var cfg;
	
	    if (background) {
	      width = plotRange.getWidth();
	      height = plotRange.getHeight();
	      tl = plotRange.tl;
	      cfg = {
	        x: tl.x,
	        y: tl.y,
	        width: width,
	        height: height
	      };
	      if (!backShape) {
	        // 图片
	        if (background.image) {
	          cfg.img = background.image;
	          backShape = self.addShape('image', {
	            attrs: cfg
	          });
	        } else { // 矩形
	          Util.mix(cfg, background);
	          backShape = self.addShape('rect', {
	            attrs: cfg
	          });
	        }
	        self.set('backShape', backShape);
	      } else {
	        backShape.attr(cfg);
	      }
	    } else {
	      return;
	    }
	  },
	  // 计算，设置绘图区域
	  _calculateRange: function() {
	    var self = this;
	    var margin = self.get('margin');
	    var canvas = self.get('canvas');
	    var width = self.get('width') || canvas.get('width');
	    var height = self.get('height') || canvas.get('height');
	    var plotRange = self.get('plotRange');
	    var top = 0; // 上方的边距
	    var left = 0; // 左边 边距
	    var right = 0;
	    var bottom = 0;
	    var start; // 坐标系开始的节点，从左下，到右上
	    var end; // 结束的节点
	    if (Util.isNumber(margin)) {
	      top = left = right = bottom = margin;
	    }
	    if (Util.isArray(margin)) {
	      top = margin[0];
	      right = !Util.isNull(margin[1]) ? margin[1] : margin[0];
	      bottom = !Util.isNull(margin[2]) ? margin[2] : margin[0];
	      left = !Util.isNull(margin[3]) ? margin[3] : right;
	    }
	    start = {
	      x: left,
	      y: height - bottom
	    };
	    end = {
	      x: width - right,
	      y: top
	    };
	    if (!plotRange) {
	      plotRange = new PlotRange(start, end);
	      self.set('plotRange', plotRange);
	    } else {
	      plotRange.reset(start, end);
	    }
	  },
	  // 重绘背景
	  repaint: function() {
	    this._calculateRange();
	    this._renderBorder();
	    this._renderBackground();
	    return this;
	  }
	});
	
	
	module.exports = PlotBack;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	
	function min(x, y) {
	  return x > y ? y : x;
	}
	
	function max(x, y) {
	  return x > y ? x : y;
	}
	
	var PlotRange = function(start, end) {
	  this.reset(start, end);
	};
	
	PlotRange.CFG = {
	  start: null, // @type {Array} 起始点左下
	  end: null, // @type {Attrs} 终点右上
	  background: null // @type {Attrs} 背景
	};
	
	Util.augment(PlotRange, {
	  // 初始化
	  init: function() {
	    var start = this.start;
	    var end = this.end;
	
	    // top-left
	    var tl = this.tl = {
	      x: min(start.x, end.x),
	      y: min(start.y, end.y)
	    };
	
	    // top-right
	    this.tr = {
	      x: max(start.x, end.x),
	      y: min(start.y, end.y)
	    };
	
	    // bottom-left
	    this.bl = {
	      x: min(start.x, end.x),
	      y: max(start.y, end.y)
	    };
	
	    // bottom-right
	    var br = this.br = {
	      x: max(start.x, end.x),
	      y: max(start.y, end.y)
	    };
	
	    this.cc = {
	      x: (br.x - tl.x) / 2 + tl.x,
	      y: (br.y - tl.y) / 2 + tl.y
	    };
	  },
	  /**
	   * 重置
	   * @param  {Object} start 开始点
	   * @param  {Object} end   结束点
	   */
	  reset: function(start, end) {
	    this.start = start;
	    this.end = end;
	    this.init();
	  },
	  /**
	   * 是否在范围内
	   * @param {Number} x x坐标
	   * @param {Number} y y坐标
	   * @return {Boolean}   是否在范围内
	   */
	  isInRange: function(x, y) {
	    if (Util.isObject(x)) {
	      y = x.y;
	      x = x.x;
	    }
	    var tl = this.tl;
	    var br = this.br;
	
	    return x >= tl.x && x <= br.x && y >= tl.y && y <= br.y;
	  },
	  /**
	   * 是否在垂直范围内
	   * @param  {Number}  y y坐标
	   * @return {Boolean} 在垂直范围内
	   */
	  isInVertical: function(y) {
	    if (Util.isObject(y)) {
	      y = y.y;
	    }
	
	    var tl = this.tl;
	    var br = this.br;
	
	    return y >= tl.y && y <= br.y;
	  },
	  /**
	   * 是否在水平范围内
	   * @param  {Number}  x x坐标
	   * @return {Boolean}  是否在水平范围内
	   */
	  isInHorizontal: function(x) {
	    if (Util.isObject(x)) {
	      x = x.x;
	    }
	
	    var tl = this.tl;
	    var br = this.br;
	
	    return x >= tl.x && x <= br.x;
	  },
	  /**
	   * 获取宽度
	   * @return {Number} 宽度
	   */
	  getWidth: function() {
	    var tl = this.tl;
	    var br = this.br;
	    return br.x - tl.x;
	  },
	  /**
	   * 获取高度
	   * @return {Number} 高度
	   */
	  getHeight: function() {
	    var tl = this.tl;
	    var br = this.br;
	    return br.y - tl.y;
	  }
	});
	
	module.exports = PlotRange;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(185);
	var Group = __webpack_require__(173).Group;
	var Mixin = __webpack_require__(258);
	var CLS_TITLE = 'ac-title';
	var CLS_LIST = 'ac-list';
	var PADDING = [10, 10, 10, 10];
	var LINEHEIGHT = 20;
	
	function find(dom, cls) {
	  return dom.getElementsByClassName(cls)[0];
	}
	
	var Tooltip = function(cfg) {
	  Tooltip.superclass.constructor.call(this, cfg);
	};
	
	Tooltip.CFG = {
	  zIndex: 10, // @type {String} z轴顺序
	  x: 0, // @type {Number} x 右下角坐标
	  y: 0, // @type {Number} y 右下角坐标
	  // itemName: 'tootip', // @type {String} 组建名
	  items: null, // @type {Array} tooltip 子项
	  title: {}, // @type {Attrs} 标题的图形属性
	  name: {}, // @type {Attrs} 数据序列名称的图形属性
	  value: {}, // @type {Attrs} 当前值的文本的图形属性
	  crossLine: { // @type {Attrs} crosshairs 线的图形属性
	    stroke: '#999',
	    lineWidth: 1
	  },
	  markerCfg: null, // @type {String} marker配置项
	  titleText: undefined, // @type {String} 默认标题文本
	  wordSpaceing: 6, // @type {Number} 单词间距
	  crosshairs: false, // @type {Boolean} 是否贯穿整个坐标轴
	  titleShape: null, // @type {Shape} 标题图形
	  contentGroup: null, // @type {Group} 列表图组
	  crossLineShapeX: null, // @type {Shape} X标记线图形
	  crossLineShapeY: null, // @type {Shape} Y标记线图形
	  backShape: null, // @type {Shape} 背景图形
	  plotRange: null, // @type {Object} 视图范围
	  shared: false, // @type {Boolean} 多个数据序列是否共同用一个tooltip
	  offset: 10, // @type {Number} x轴上，移动到位置的偏移量
	  animate: true, // @type {Boolean} 是否开启动画
	  duration: 50, // @type {Number} 移动的动画时间
	  visible: false, // @type {Boolean} 是否可见
	  valueSplit: '', // @type {String} 分隔符
	  valueSuffix: '', // @type {String} value后缀
	  custom: false, // @type {Boolean} 是否自定义HTML
	  customDiv: null, // @type {Boolean} 是否自定义HTML
	  customFollow: true, // @type {Boolean} 自定义的tooltip是否跟随显示隐藏、移动
	  timeStamp: 0, // @type {Nmuber} 便更时间戳
	  // @type {String} 使用html时的外层模板
	  html: '<div class="ac-tooltip" style="position:absolute;visibility: hidden;"><h4 class="' + CLS_TITLE + '"></h4><ul class="' + CLS_LIST + '"></ul></div>',
	  // @type {String} 使用html时，单个选项的模板
	  itemTpl: '<li><span style="color:{color}">{name}</span> : {value}</li>'
	};
	
	Util.extend(Tooltip, Group);
	
	Util.augment(Tooltip, Mixin, {
	  // 覆写GroupBase方法 渲染前
	  _beforeRenderUI: function() {
	    var custom = this.get('custom');
	    var crossLineAttrs = this.get('crossLine');
	    var crossLineGroup = this.addGroup({
	      attrs: crossLineAttrs
	    });
	    var contentGroup = this.addGroup({
	      zIndex: 10,
	      attrs: {
	        fill: '#fff',
	        textAlign: 'left'
	      }
	    });
	    this.set('crossLineGroup', crossLineGroup);
	    this.set('contentGroup', contentGroup);
	    this.set('itemsGroup', contentGroup.addGroup());
	
	    if (custom) {
	      this._setCustomDiv();
	    }
	  },
	  // 覆写GroupBase方法 渲染
	  _renderUI: function() {
	    if (this.get('items')) {
	      var custom = this.get('custom');
	      if (!custom) {
	        this._renderContent(); // 渲染 ul
	      } else {
	        this._renderCustom();
	      }
	    }
	    this._renderCrossLine();
	  },
	  _renderContent: function() {
	    var self = this;
	    var items = self.get('items');
	    var titleAttrs = self.get('title');
	    var titleText = self.get('titleText');
	    var nameAttrs = self.get('name');
	    var valueAttrs = self.get('value');
	    var valueSplit = self.get('valueSplit');
	    var valueSuffix = self.get('valueSuffix');
	    var markerCfg = self.get('markerCfg');
	    var itemsGroup = this.get('itemsGroup');
	    itemsGroup && itemsGroup.clear();
	
	    if (titleAttrs) {
	      var titleGroup = self.addEachItem(itemsGroup, {
	        x: PADDING[3],
	        y: PADDING[0] + 8,
	        items: {
	          words: [{
	            text: titleText
	          }],
	          attrs: titleAttrs
	        }
	      });
	      this.set('titleShape', titleGroup.getFirst());
	    }
	
	    Util.each(items, function(v, idx) {
	      var name = Util.mix({}, nameAttrs, {
	        text: v.name ? v.name + ':' : ''
	      });
	      var value = Util.mix({}, valueAttrs, {
	        text: v.value + valueSplit + valueSuffix
	      });
	      if (v.marker === true) {
	        v.marker = 'circle';
	      }
	      var marker = v.marker ? {
	        symbol: v.marker,
	        fill: v.color
	      } : {};
	
	      self.addEachItem(itemsGroup, {
	        x: PADDING[3],
	        y: (idx + 1) * LINEHEIGHT + PADDING[0] + 8,
	        items: {
	          color: v.color,
	          words: [name, value],
	          marker: Util.mix(marker, markerCfg)
	        }
	      });
	    });
	
	    itemsGroup.renderBack(PADDING, {
	      radius: 6,
	      fill: '#000',
	      fillOpacity: 0.7
	    }); // 添加 tooltip 背景
	  },
	  // 渲染CroseLine
	  _renderCrossLine: function() {
	    var crosshairs = this.get('crosshairs');
	    var canvas = this.get('canvas');
	    var plotRange = this.get('plotRange');
	    if (crosshairs) {
	      this.clearCrossLineGroup();
	      switch (crosshairs.type) {
	        case 'x':
	          this._renderCrossLineX(canvas, plotRange);
	          break;
	        case 'y':
	          this._renderCrossLineY(canvas, plotRange);
	          break;
	        case 'cross':
	          this._renderCrossLineX(canvas, plotRange);
	          this._renderCrossLineY(canvas, plotRange);
	          break;
	        default:
	          this._renderCrossLineY(canvas, plotRange);
	      }
	    }
	  },
	  // 渲染贯穿纵坐标的线
	  _renderCrossLineY: function(canvas, plotRange) {
	    var attrs = Util.mix({
	      x1: 0,
	      y1: plotRange ? plotRange.bl.y : canvas.get('height'),
	      x2: 0,
	      y2: plotRange ? plotRange.tl.y : 0
	    }, this.get('crossLine'));
	
	    if (this.get('crosshairs').shape === 'dash') {
	      attrs.lineDash = '6 3';
	    }
	
	    this._addCrossLineShape(attrs, 'Y');
	  },
	  // 渲染贯穿横坐标的线
	  _renderCrossLineX: function(canvas, plotRange) {
	    var attrs = Util.mix({
	      x1: plotRange ? plotRange.bl.x : canvas.get('width'),
	      y1: 0,
	      x2: plotRange ? plotRange.br.x : 0,
	      y2: 0
	    }, this.get('crossLine'));
	
	    if (this.get('crosshairs').shape === 'dash') {
	      attrs.lineDash = '6 3';
	    }
	
	    this._addCrossLineShape(attrs, 'X');
	  },
	  _addCrossLineShape: function(attrs, type) {
	    var crossLineGroup = this.get('crossLineGroup');
	    var shape = crossLineGroup.addShape('line', {
	      attrs: attrs
	    });
	    this.set('crossLineShape' + type, shape);
	    return shape;
	  },
	  clearCrossLineGroup: function() {
	    var crossLineGroup = this.get('crossLineGroup');
	    this.set('crossLineShapeX', null);
	    this.set('crossLineShapeY', null);
	    crossLineGroup.clear();
	  },
	  setCross: function(type) {
	    this.set('crosshairs', {
	      type: type
	    });
	    this._renderCrossLine();
	  },
	  // 设置内容
	  setContent: function(title, items) {
	    var isChange = this._isContentChange(title, items);
	    if (isChange) {
	      var custom = this.get('custom');
	      var timeStamp = +new Date();
	      this.set('items', items);
	      this.set('titleText', title);
	      this.set('timeStamp', timeStamp);
	      if (custom) {
	        this._renderCustom();
	      } else {
	        this._renderContent();
	      }
	    }
	    return this;
	  },
	  // 判断内容是否变化
	  _isContentChange: function(title, items) {
	    var titleText = this.get('titleText');
	    var lastItems = this.get('items');
	    var isChanged = !(title === titleText && lastItems.length === items.length);
	    if (!isChanged) {
	      Util.each(items, function(item, index) {
	        var preItem = lastItems[index];
	        isChanged = (item.value !== preItem.value) || (item.color !== preItem.color) || (item.name !== preItem.name) || (item.title !== preItem.title);
	        if (isChanged) {
	          return false;
	        }
	      });
	    }
	
	    return isChanged;
	  },
	  getTitle: function() {
	    return this.get('titleShape');
	  },
	  /**
	   * 将tooltip的右下角移动到指定的位置，假设这个点已经在坐标轴内
	   *
	   *  - 默认移动到右下角
	   *  - 如果左边到了坐标轴外，则将tooltip向右移动，按照右下角对齐
	   *  - 如果右边到了坐标轴外，则左移,将右下边放到坐标轴边界上
	   *  - 下面，上面出了坐标轴，做类似处理
	   * @param {Number} x x坐标
	   * @param {Number} y y坐标
	   */
	  setPosition: function(x, y) {
	    var canvas = this.get('canvas');
	    var custom = this.get('custom');
	    var customDiv = this.get('customDiv');
	    var plotRange = this.get('plotRange');
	    var offset = this.get('offset');
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var contentGroup = this.get('contentGroup');
	    var ulBbox = contentGroup.getBBox();
	    var animate = this.get('animate');
	    var after = true;
	    var endx = x;
	    var endy = y;
	    var width;
	
	    if (customDiv && this.get('customFollow')) {
	      width = Util.getWidth(customDiv) + 2 * offset;
	      x = x - width;
	      y = y - Util.getHeight(customDiv) - 2 * offset;
	    } else {
	      width = ulBbox.width + offset;
	      x = x - width;
	      y = y - ulBbox.height;
	    }
	
	    if (plotRange) {
	      if (!plotRange.isInRange(x, y)) {
	        if (!plotRange.isInHorizontal(x)) {
	          if ((plotRange.tr.x - plotRange.tl.x) >= 2 * width) {
	            x = Math.max(plotRange.tl.x, endx) + offset;
	            after = false;
	          } else {
	            x = plotRange.tl.x;
	            y -= offset;
	          }
	        }
	
	        if (!plotRange.isInVertical(y)) {
	          y = plotRange.tl.y;
	        }
	      }
	    }
	    if (this.get('x') !== x || this.get('y') !== y) {
	      if (crossLineShapeY) { // 第一次进入时，画布需要单独绘制，所以需要先设定corss的位置
	        if (after) {
	          crossLineShapeY.move(endx, 0);
	        } else {
	          crossLineShapeY.move((x - offset), 0);
	        }
	      }
	      if (crossLineShapeX) {
	        crossLineShapeX.move(0, endy);
	      }
	
	      if (custom) {
	        this.moveCustom(x, y, after);
	      } else {
	        var ulMatrix = new Matrix.Matrix3();
	        ulMatrix.translate(x, y);
	        if (animate && this.get('visible')) {
	          contentGroup.animate({
	            matrix: ulMatrix
	          }, this.get('duration'));
	        } else { // 隐藏状态需要先直接变换、再显示、再绘制
	          contentGroup.setMatrix(ulMatrix);
	          if (!this.get('visible')) this.show();
	          canvas.draw();
	        }
	      }
	      // 隐藏状态需要先直接变换、再显示、再绘制
	    }
	  },
	  _setCustomDiv: function() {
	    var self = this;
	    var html = self.get('html');
	    var outterNode = self.get('canvas').get('el').parentNode;
	    var customDiv;
	    var id;
	    if (/^\#/.test(html)) {
	      id = html.replace('#', '');
	      customDiv = document.getElementById(id);
	    } else {
	      customDiv = Util.createDom(html);
	    }
	    self.set('customDiv', customDiv);
	    if (self.get('customFollow')) {
	      outterNode.appendChild(customDiv);
	      outterNode.style.position = 'relative';
	    } else {
	      return;
	    }
	  },
	  // 绘制自定义HTML
	  _renderCustom: function() {
	    var self = this;
	    var titleAttrs = self.get('title');
	    var titleText = self.get('titleText');
	    var customDiv = self.get('customDiv');
	    var titleDom = find(customDiv, CLS_TITLE);
	    var listDom = find(customDiv, CLS_LIST);
	    var items = self.get('items');
	    self._clearCustom();
	    if (titleDom && titleAttrs) {
	      titleDom.innerHTML = titleText;
	    }
	    if (listDom) {
	      self.set('titleText', titleText);
	      Util.each(items, function(item, index) {
	        self.addCustomItem(item, index);
	      });
	    }
	  },
	  _clearCustom: function() {
	    var customDiv = this.get('customDiv');
	    var titleDom = find(customDiv, CLS_TITLE);
	    var listDom = find(customDiv, CLS_LIST);
	    if (titleDom) {
	      titleDom.innerHTML = '';
	    }
	    if (listDom) {
	      listDom.innerHTML = '';
	    }
	  },
	  // 添加自定义项
	  addCustomItem: function(item, index) {
	    var customDiv = this.get('customDiv');
	    var listDom = find(customDiv, CLS_LIST);
	    var itemTpl = this.get('itemTpl');
	    var str;
	    var node;
	    var obj = Util.mix({
	      index: index
	    }, item);
	
	    str = Util.substitute(itemTpl, obj);
	    node = Util.createDom(str);
	    listDom.appendChild(node);
	  },
	  moveCustom: function(x, y) {
	    var customDiv = this.get('customDiv');
	    if (customDiv && this.get('customFollow')) {
	      customDiv.style.left = x + 'px';
	      customDiv.style.top = y + 'px';
	    }
	  },
	  /**
	   * 显示
	   */
	  show: function() {
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var customDiv = this.get('customDiv');
	    var hideHandler = this.get('hideHandler');
	    if (hideHandler) {
	      clearTimeout(hideHandler);
	    }
	    crossLineShapeX && crossLineShapeX.show();
	    crossLineShapeY && crossLineShapeY.show();
	    Tooltip.superclass.show.call(this);
	    if (customDiv && this.get('customFollow')) {
	      customDiv.style.visibility = 'visible';
	      this.get('canvas').draw();
	    }
	  },
	  /**
	   * 隐藏
	   */
	  hide: function() {
	    var self = this;
	    var customDiv = self.get('customDiv');
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var canvas = self.get('canvas');
	    var hideHandler = setTimeout(function() {
	      if (customDiv && self.get('customFollow')) {
	        customDiv.style.visibility = 'hidden';
	      }
	      self.set('hideHandler', null);
	      if (!self.get('destroyed')) {
	        Tooltip.superclass.hide.call(self);
	        canvas.draw();
	      }
	    }, self.get('duration'));
	    self.set('hideHandler', hideHandler);
	    crossLineShapeX && crossLineShapeX.hide();
	    crossLineShapeY && crossLineShapeY.hide();
	  },
	  remove: function() {
	    var self = this;
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var customDiv = self.get('customDiv');
	    var html = self.get('html');
	
	    crossLineShapeX && crossLineShapeX.remove();
	    crossLineShapeY && crossLineShapeY.remove();
	    Tooltip.superclass.remove.call(this);
	    if (customDiv && !(/^\#/.test(html))) {
	      customDiv.parentNode.removeChild(customDiv);
	    }
	  }
	});
	
	module.exports = Tooltip;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	
	module.exports = {
	  addEachItem: function(container, cfg) {
	    var itemGroup = container.addGroup(cfg);
	    var wordAttrs = Util.mix({
	      fill: '#fff',
	      textBaseline: 'middle'
	    }, cfg.word);
	    var wordSpaceing = cfg.wordSpaceing || 6;
	    var markerAttrs = Util.mix({
	      fill: 'red',
	      lineWidth: 0,
	      radius: 2.5
	    }, cfg.marker);
	    var markerAlign = cfg.markerAlign || 'center';
	    var items = cfg.items;
	    var startX = 0;
	    var attrs;
	
	    if (items.marker) { // 如果有marker添加marker
	      attrs = Util.mix({}, markerAttrs, items.marker, {
	        x: markerAlign === 'center' ? 0 : items.marker.radius,
	        y: 0
	      });
	      attrs.x += cfg.x;
	      attrs.y += cfg.y;
	
	      if (attrs.symbol) {
	        var markerShape = itemGroup.addShape('marker', {
	          type: 'marker',
	          attrs: attrs
	        });
	        startX += markerShape.getBBox().width + wordSpaceing;
	      }
	    }
	
	    Util.each(items.words, function(word) {
	      attrs = Util.mix({}, wordAttrs, word, {
	        x: startX,
	        y: 0
	      });
	      attrs.x += cfg.x;
	      attrs.y += cfg.y;
	
	      var textShape = itemGroup.addShape('text', {
	        attrs: attrs
	      });
	      startX += wordSpaceing + textShape.getBBox().width;
	    });
	    return itemGroup;
	  }
	};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var Legend = __webpack_require__(260);
	Legend.Category = __webpack_require__(261);
	Legend.Continuous = __webpack_require__(262);
	module.exports = Legend;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Group = __webpack_require__(173).Group;
	
	var Base = function(cfg) {
	  Base.superclass.constructor.call(this, cfg);
	};
	
	Base.CFG = {
	  /**
	   * 标题图形属性
	   * @type {Attrs}
	   */
	  title: {},
	  /**
	   * 标题图形属性
	   * @type {String}
	   */
	  titleText: null,
	  /**
	   * 对齐位置的偏移量x
	   * @type {Number}
	   */
	  dx: 0,
	  /**
	   * 对齐位置的偏移量y
	   * @type {Number}
	   */
	  dy: 0,
	  /**
	   * 对齐方式,top,left,right,bottom, 默认不调整
	   * @type {String}
	   */
	  position: true,
	  /**
	   * 是否参与动画
	   * @type {Boolean}
	   */
	  animate: false
	};
	
	Util.extend(Base, Group);
	
	Util.augment(Base, {
	  // 覆写GroupBase方法 渲染前
	  _beforeRenderUI: function() {
	    var title = this.get('title');
	    if (Util.isNull(title)) {
	      this.set('titleText', null);
	    }
	
	    this.set('itemsGroup', this.addGroup());
	    this.set('titleShape', this.addShape('text', {
	      attrs: Util.mix({
	        x: 0,
	        y: 0
	      }, title)
	    }));
	  },
	  // 覆写GroupBase方法 渲染
	  _renderUI: function() {
	    this._renderTitle();
	  },
	  // 渲染标题
	  _renderTitle: function() {
	    var titleShape = this.get('titleShape');
	    var titleText = this.get('titleText');
	    titleShape.attr({
	      x: 0,
	      y: 0,
	      text: titleText
	    });
	  },
	  /**
	   * 根据position重设位置
	   */
	  setPosition: function(position) {
	    position = position ? position : this.get('position');
	    var plotRange = this.get('plotRange');
	    if (!plotRange) {
	      return;
	    }
	    var top = plotRange.tl;
	    var end = plotRange.br;
	    var dx = this.get('dx');
	    var dy = this.get('dy');
	    var width = this.getBBox().width;
	    var x = 0;
	    var y = 0;
	    switch (position) {
	      case 'top':
	        x = top.x;
	        y = top.y;
	        break;
	      case 'left':
	        x = top.x;
	        y = (top.y + end.y) / 2;
	        break;
	      case 'right':
	        x = end.x - width;
	        y = (top.y + end.y) / 2;
	        break;
	      case 'bottom':
	        x = (top.x + end.x) / 2 - width / 2;
	        y = end.y;
	        break;
	      default:
	        break;
	    }
	    this.move(x + dx, y + dy);
	    this.set('position', position);
	  },
	  // 获取总的个数
	  getCount: function() {
	    return this.get('itemsGroup').get('children').length;
	  },
	  // 获取剩余未被选中的个数
	  getLeaveCount: function() {
	    var itemsGroup = this.get('itemsGroup');
	    var items = itemsGroup.get('children');
	    var tmpArr = [];
	    tmpArr = Util.filter(items, function(item) {
	      return item.get('checked');
	    });
	    return tmpArr.length;
	  },
	  /** 设置配置项
	   * @param {Object} items 子项配置项
	   */
	  setItems: function(items) {
	    this.set('items', items);
	    this.clearItems();
	    this._renderUI();
	  },
	  /**
	   * 添加子项
	   * @param {Object} item 单子项配置项
	   */
	  addItem: function(item) {
	    var items = this.get('items');
	    items.push(item);
	    this.clearItems();
	    this._renderUI();
	  },
	  // 清除子项组
	  clearItems: function() {
	    var itemsGroup = this.get('itemsGroup');
	    itemsGroup.clear();
	  }
	});
	
	module.exports = Base;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Mixin = __webpack_require__(258);
	var Event = __webpack_require__(180);
	var Base = __webpack_require__(260);
	
	function findItem(items, li) {
	  var rst = null;
	  Util.each(items, function(item) {
	    if (item.name === li.get('value')) {
	      rst = item;
	      return false;
	    }
	  });
	
	  return rst;
	}
	
	var Legend = function(cfg) {
	  Legend.superclass.constructor.call(this, cfg);
	};
	
	Legend.CFG = {
	  /**
	   * type标识
	   * @type {String}
	   */
	  type: 'category-legend',
	  /**
	   * 子项集合
	   * @type {Array}
	   */
	  items: null,
	  /**
	   * 排布时子项之间X间距
	   * @type {Number}
	   */
	  spacingX: 5,
	  /**
	   * 排布时子项之间Y间距
	   * @type {Number}
	   */
	  spacingY: 10,
	  /**
	   * marker 和文子之间的距离
	   * @type {Number}
	   */
	  wordSpaceing: 2,
	  /**
	   * 子项图组
	   * @type {Group}
	   */
	  itemsGroup: null,
	  /**
	   * 布局方式： horizontal，vertical
	   * @type {String}
	   */
	  layout: 'horizontal',
	  /**
	   * 是否保留最后一项勾选
	   * @type {Boolean}
	   */
	  leaveChecked: true,
	  /**
	   * 边框内边距
	   * @type {Array}
	   */
	  backPadding: [0, 0, 0, 0],
	  /**
	   * 是否能被点击
	   * @type {Boolean}
	   */
	  checkable: true,
	  /**
	   * 子项起始X
	   * @type {Number}
	   */
	  itemsbeginX: 0,
	  /**
	   * 子项起始Y
	   * @type {Number}
	   */
	  itemsbeginY: 0,
	  /**
	   * 未选中属性
	   * @type {String}
	   */
	  unChecked: '#CCC',
	  /**
	   * 边框的配置项，一般是一个正方形
	   * @type {Attrs}
	   */
	  back: null,
	  /**
	   * 是否折行
	   * @type {Boolean}
	   */
	  itemWrap: false,
	  /**
	   * 最大长度 单位像素
	   * 竖直布局时，认为是最大高
	   * 水平布局时，认为是最大宽
	   * @type {Number}
	   */
	  maxLength: 100,
	  formatter: null // @type {Function} 格式化坐标轴上的节点
	};
	
	Util.extend(Legend, Base);
	
	Util.augment(Legend, Mixin, {
	  _formatPoint: function(value) {
	    var formatter = this.get('formatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  },
	  // 覆写GroupBase方法 渲染前
	  _beforeRenderUI: function() {
	    Legend.superclass._beforeRenderUI.call(this);
	    this.set('back', {});
	  },
	  // 覆写GroupBase方法 渲染
	  _renderUI: function() {
	    Legend.superclass._renderUI.call(this);
	    this._renderTitle();
	    this._renderItems();
	    this._wrapItems();
	    this._renderBack();
	    this.setPosition();
	  },
	  // 自动换行
	  _wrapItems: function() {
	    var itemWrap = this.get('itemWrap');
	    var layout = this.get('layout');
	    var maxLength = this.get('maxLength');
	
	    if (itemWrap && maxLength > 0) {
	      if (layout === 'horizontal') {
	        this._warpHorizontal();
	      } else if (layout === 'vertical') {
	        this._warpVertical();
	      }
	    }
	  },
	  // 换列算法
	  _warpVertical: function() {
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength');
	    var spacingX = this.get('spacingX');
	    var spacingY = this.get('spacingY');
	    var titleHeight = titleShape.getBBox().height + spacingY;
	    var col = 1;
	    var colLength = titleHeight;
	    var lastMaxWidthStash = 0;
	    var maxWidthStash = 0;
	    var totalWidth = 0;
	    var lastLength;
	    var width;
	    var height;
	    var box;
	    if (itemsGroup.getBBox().height > maxLength) {
	      Util.each(children, function(v) {
	        box = v.getBBox();
	        width = box.width + spacingX;
	        height = box.height + spacingY;
	        lastMaxWidthStash = maxWidthStash;
	        maxWidthStash = width > maxWidthStash ? width : maxWidthStash; // 缓存每列最宽
	        lastLength = colLength; // 上一个长度
	        colLength += height;
	        if (colLength > maxLength) {
	          totalWidth += lastMaxWidthStash;
	          colLength = height + titleHeight;
	          col++;
	          maxWidthStash = 0;
	          lastMaxWidthStash = 0;
	          v.move(totalWidth, titleHeight);
	        } else {
	          v.move(totalWidth, lastLength);
	        }
	      });
	    }
	    return;
	  },
	  // 换行算法
	  _warpHorizontal: function() {
	    var itemsGroup = this.get('itemsGroup');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength');
	    var spacingX = this.get('spacingX');
	    var spacingY = this.get('spacingY');
	    var row = 1;
	    var rowLength = 0;
	    var lastLength = 0;
	    var width;
	    var height;
	    var box;
	    if (itemsGroup.getBBox().width > maxLength) {
	      Util.each(children, function(v) {
	        box = v.getBBox();
	        width = box.width + spacingX;
	        height = box.height + spacingY;
	        lastLength = rowLength;
	        rowLength += width;
	        if (rowLength > maxLength) {
	          rowLength = width;
	          row++;
	          v.move(0, row * height);
	        } else {
	          v.move(lastLength, row * height);
	        }
	      });
	    }
	    return;
	  },
	  // 绑定组建事件
	  _bindUI: function() {
	    this._bindOverOut();
	    this._bindClick();
	  },
	  // 绑定点击事件
	  _bindClick: function() {
	    var checkable = this.get('checkable');
	    if (checkable) {
	      this.on('click', Util.wrapBehavior(this, '_onClick'));
	    }
	  },
	  // 绑定鼠标悬浮事件
	  _bindOverOut: function() {
	    this.on('mouseenter', Util.wrapBehavior(this, '_onMouseenter'));
	    this.on('mouseleave', Util.wrapBehavior(this, '_onMouseleave'));
	  },
	  // 点击事件实现
	  _onClick: function(ev) {
	    var leaveChecked = this.get('leaveChecked');
	    var li = this._getLi(ev.currentTarget);
	    var itemclick;
	    var itemchecked;
	    var itemunchecked;
	    var checked;
	    var items = this.get('items');
	    if (li) {
	      var item = findItem(items, li);
	      checked = li.get('checked');
	      itemclick = new Event('itemclick', ev);
	      itemclick.item = item;
	      this.trigger(itemclick);
	      if (leaveChecked && checked && this.getLeaveCount() === 1) {
	        return;
	      }
	      if (checked) {
	        itemunchecked = new Event('itemunchecked', ev);
	        itemunchecked.item = item;
	        itemunchecked.currentTarget = li;
	        this.trigger(itemunchecked);
	      } else {
	        itemchecked = new Event('itemchecked', ev);
	        itemchecked.item = item;
	        itemchecked.currentTarget = li;
	        this.trigger(itemchecked);
	      }
	    }
	    return;
	  },
	  // 鼠标进入某元素事件实现
	  _onMouseenter: function(ev) {
	    var canvas = this.get('canvas');
	    var li = this._getLi(ev.currentTarget);
	    if (li) {
	      var itemover = new Event('itemover', ev);
	      var currentTarget = ev.currentTarget;
	      var canvasNode = currentTarget.get('canvas').get('el');
	      itemover.item = li;
	      this.trigger(itemover);
	      Util.modiCSS(canvasNode, {
	        cursor: 'pointer'
	      });
	      var items = this.get('items');
	      var activeItem = findItem(items, li);
	      if (li.get('checked')) { // 选中高亮状态
	        var itemActived = new Event('itemactived', ev);
	        itemActived.item = activeItem;
	        itemActived.currentTarget = li;
	        this.trigger(itemActived);
	        canvas.draw();
	      }
	    }
	
	    return;
	  },
	  // 鼠标离开某元素事件实现
	  _onMouseleave: function(ev) {
	    var canvas = this.get('canvas');
	
	    var li = this._getLi(ev.currentTarget);
	    if (li) {
	      var itemout = new Event('itemout', ev);
	      var canvasNode = canvas.get('el');
	      itemout.item = li;
	      this.trigger(itemout);
	      Util.modiCSS(canvasNode, {
	        cursor: 'default'
	      });
	
	      if (li.get('checked')) {
	        var itemUnActived = new Event('itemunactived', ev);
	        this.trigger(itemUnActived);
	        canvas.draw();
	      }
	    }
	
	    return;
	  },
	  // 渲染背景
	  _renderBack: function() {
	    var itemsGroup = this.get('itemsGroup');
	    var padding = this.get('backPadding');
	    var backAttrs = this.get('back');
	    itemsGroup.renderBack(padding, backAttrs);
	  },
	  // 绘制子项
	  _renderItems: function() {
	    var self = this;
	    var items = self.get('items');
	    Util.each(items, function(item, index) {
	      self._addItem(item, index);
	    });
	  },
	  // 添加图例
	  _addItem: function(item) {
	    var itemsGroup = this.get('itemsGroup');
	    var x = this._getNextX();
	    var y = this._getNextY();
	    var unChecked = this.get('unChecked');
	    var listItems = {
	      words: [{
	        text: this._formatPoint(item.name)
	      }]
	    };
	
	    if (item.marker) {
	      if (!item.checked) {
	        item.marker.fill = unChecked;
	        if (item.marker.stroke) {
	          item.marker.stroke = unChecked;
	        }
	        if (Util.isObject(item.word)) {
	          item.word.fill = unChecked;
	        } else {
	          item.word = {};
	          item.word.fill = unChecked;
	        }
	      }
	      listItems.marker = item.marker;
	    }
	    this.addEachItem(itemsGroup, {
	      word: item.word,
	      wordSpaceing: this.get('wordSpaceing'),
	      x: x,
	      y: y,
	      items: listItems,
	      class: 'legend-item',
	      checked: item.checked,
	      value: item.name
	    });
	  },
	  // 获取下一个图例项的x坐标
	  _getNextX: function() {
	    var layout = this.get('layout');
	    var spacing = this.get('spacingX');
	    var itemsGroup = this.get('itemsGroup');
	    var children = itemsGroup.get('children');
	    var nextX = 0;
	
	    if (layout === 'horizontal') { // 水平布局
	      Util.each(children, function(v) {
	        nextX += v.getBBox().width + spacing;
	      });
	    }
	    return nextX;
	  },
	  // 获取下一个图例项的y坐标
	  _getNextY: function() {
	    var spacing = this.get('spacingY');
	    var layout = this.get('layout');
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var nextY = titleShape.getBBox().height + spacing;
	
	    if (layout === 'vertical') { // 竖直布局
	      Util.each(children, function(v) {
	        nextY += v.getBBox().height + spacing;
	      });
	    }
	    return nextY;
	  },
	  // 获取li
	  _getLi: function(target) {
	    var li = target.get('parent');
	    if (li.get('class') === 'legend-item') {
	      return li;
	    }
	    return null;
	  }
	});
	
	module.exports = Legend;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Continuous类连续图例 一个颜色渐变条
	 * @ignore
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(260);
	var Color = __webpack_require__(208);
	var Event = __webpack_require__(180);
	var Group = __webpack_require__(173).Group;
	var Range = __webpack_require__(263);
	var TRIGGER_WIDTH = 16;
	
	var Continuous = function(cfg) {
	  Continuous.superclass.constructor.call(this, cfg);
	};
	
	Continuous.CFG = {
	  /**
	   * 类型
	   * @type {String}
	   */
	  type: 'continuous-legend',
	  /**
	   * 子项
	   * @type {Array}
	   */
	  items: null,
	  /**
	   * 布局方式
	   * horizontal 水平
	   * vertical 垂直
	   * @type {String}
	   */
	  layout: 'vertical',
	  /**
	   * 宽度
	   * @type {Number}
	   */
	  width: 200,
	  /**
	   * 高度
	   * @type {Number}
	   */
	  height: 60,
	  /**
	   * 属性类型
	   * color 颜色连续图例
	   * size 大小连续图例
	   * @type {String}
	   */
	  attrType: null,
	  /**
	   * 标题偏移量
	   * @type {Number}
	   */
	  titleOffset: 20,
	  /**
	   * 图例图形距离文本的距离
	   * @type {Number}
	   */
	  nameOffset: 10,
	  /**
	   * 范围
	   * @type {Array}
	   */
	  range: [0, 100],
	  /**
	   * 范围外颜色
	   * @type {ATTRS}
	   */
	  outRange: {
	    fill: '#ccc'
	  },
	  /**
	   * 范围内颜色
	   * @type {ATTRS}
	   */
	  inRange: {
	    fill: '#4E7CCC'
	  },
	  /**
	   * 默认文本图形属性
	   * @type {ATTRS}
	   */
	  word: {
	    fill: '#333',
	    textAlign: 'center',
	    textBaseline: 'middle'
	  },
	  /**
	   * 中间滑块
	   * @type {ATTRS}
	   */
	  middleAttr: {
	    fill: '#fff',
	    fillOpacity: 0
	  },
	  checkable: true,
	  attr: null
	};
	
	Util.extend(Continuous, Base);
	
	Util.augment(Continuous, {
	  // 计算起始点
	  _calStartPoint: function() {
	    var titleShape = this.get('titleShape');
	    var titleBox = titleShape.getBBox();
	    var titleOffset = this.get('titleOffset');
	    var start = {
	      x: 0,
	      y: titleBox.height + titleOffset
	    };
	    return start;
	  },
	  _beforeRenderUI: function() {
	    var items = this.get('items');
	    if (!Util.isArray(items) || !items.length) {
	      return;
	    }
	    Continuous.superclass._beforeRenderUI.call(this);
	    var minHandleElement = new Group();
	    var maxHandleElement = new Group();
	    var backgroundElement = new Group();
	    var start = this._calStartPoint();
	    var rangeElement = this.addGroup(Range, {
	      minHandleElement: minHandleElement,
	      maxHandleElement: maxHandleElement,
	      backgroundElement: backgroundElement,
	      middleAttr: this.get('middleAttr'),
	      layout: this.get('layout'),
	      range: this.get('range'),
	      width: this.get('width'),
	      height: this.get('height'),
	      operable: this.get('checkable')
	    });
	    rangeElement.translate(start.x, start.y);
	    this.set('rangeElement', rangeElement);
	    this.set('firstItem', items[0]);
	    this.set('lastItem', items[items.length - 1]);
	  },
	  _bindUI: function() {
	    var checkable = this.get('checkable');
	    if (checkable) {
	      var self = this;
	      var rangeElement = self.get('rangeElement');
	      rangeElement.on('rangeChange', function(ev) {
	        var range = ev.range;
	        var firstItemValue = self.get('firstItem').name * 1;
	        var lastItemValue = self.get('lastItem').name * 1;
	        var minValue = parseInt(firstItemValue + (range[0] / 100) * (lastItemValue - firstItemValue), 10) + '';
	        var maxValue = parseInt(firstItemValue + (range[1] / 100) * (lastItemValue - firstItemValue), 10) + '';
	        self._updateElement(minValue, maxValue);
	        var itemFiltered = new Event('itemfiltered', ev);
	        itemFiltered.range = [minValue, maxValue];
	        self.trigger(itemFiltered);
	      });
	    }
	  },
	  _updateElement: function(min, max) {
	    var minTextElement = this.get('minTextElement');
	    var maxTextElement = this.get('maxTextElement');
	    minTextElement.attr('text', min);
	    maxTextElement.attr('text', max);
	    if (this.get('attrType') === 'color') {
	      var attr = this.get('attr');
	      var minButtonElement = this.get('minButtonElement');
	      var maxButtonElement = this.get('maxButtonElement');
	      minButtonElement.attr('fill', attr.mappingValues(min).join(''));
	      maxButtonElement.attr('fill', attr.mappingValues(max).join(''));
	    }
	  },
	  _renderUI: function() {
	    Continuous.superclass._renderUI.call(this);
	    this._renderBackground();
	    this._renderTrigger();
	  },
	  // 绘制背景
	  _renderBackground: function() {
	    var type = this.get('attrType');
	    var rangeElement = this.get('rangeElement');
	    var middleHandleElement = rangeElement.get('middleHandleElement');
	    var shape;
	    if (type === 'color') {
	      shape = this._renderGradient();
	    } else if (type === 'size') {
	      shape = this._renderTriangle();
	    }
	    shape.attr('clip', middleHandleElement);
	  },
	  // 绘制矩形渐变背景
	  _renderGradient: function() {
	    var rangeElement = this.get('rangeElement');
	    var backgroundElement = rangeElement.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var layout = this.get('layout');
	    var items = this.get('items');
	    var fill = '';
	    var rgbColor;
	
	    if (layout === 'vertical') {
	      fill += 'l (90) ';
	      Util.each(items, function(v) {
	        rgbColor = new Color(v.color).getRGBStyle();
	        fill += (1 - v.value) + ':' + rgbColor + ' ';
	      });
	    } else {
	      fill += 'l (0) ';
	      Util.each(items, function(v) {
	        rgbColor = new Color(v.color).getRGBStyle();
	        fill += v.value + ':' + rgbColor + ' ';
	      });
	    }
	    return this._addBackground(backgroundElement, 'Rect', {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      fill: fill,
	      strokeOpacity: 0
	    });
	  },
	  // 绘制三角大小背景
	  _renderTriangle: function() {
	    var rangeElement = this.get('rangeElement');
	    var backgroundElement = rangeElement.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var inRange = this.get('inRange');
	    var layout = this.get('layout');
	    var points = (layout === 'vertical') ? [
	      [0, 0],
	      [width, 0],
	      [width, height]
	    ] : [
	      [0, height],
	      [width, 0],
	      [width, height]
	    ];
	
	    return this._addBackground(backgroundElement, 'Polygon', Util.mix({
	      points: points
	    }, inRange));
	  },
	  // 绘制按钮
	  _addBackground: function(parent, name, attrs) {
	    parent.addShape(name, {
	      attrs: Util.mix({}, attrs, this.get('outRange'))
	    });
	    var shape = parent.addShape(name, {
	      attrs: attrs
	    });
	    return shape;
	  },
	  // 绘制按钮
	  _renderTrigger: function() {
	    var min = this.get('firstItem');
	    var max = this.get('lastItem');
	    var layout = this.get('layout');
	    var attrType = this.get('attrType');
	    var word = this.get('word');
	    var inRange = this.get('inRange');
	    var minBlockAttr;
	    var maxBlockAttr;
	    var minTextAttr;
	    var maxTextAttr;
	
	    if (attrType === 'color') {
	      minBlockAttr = {
	        fill: min.color
	      };
	      maxBlockAttr = {
	        fill: max.color
	      };
	    } else {
	      minBlockAttr = Util.mix({}, inRange);
	      maxBlockAttr = Util.mix({}, inRange);
	    }
	    minTextAttr = Util.mix({
	      text: min.name
	    }, word);
	    maxTextAttr = Util.mix({
	      text: max.name
	    }, word);
	    if (layout === 'vertical') {
	      this._addVerticalTrigger('min', minBlockAttr, minTextAttr);
	      this._addVerticalTrigger('max', maxBlockAttr, maxTextAttr);
	    } else {
	      this._addHorizontalTrigger('min', minBlockAttr, minTextAttr);
	      this._addHorizontalTrigger('max', maxBlockAttr, maxTextAttr);
	    }
	  },
	  _addVerticalTrigger: function(type, blockAttr, textAttr) {
	    var rangeElement = this.get('rangeElement');
	    var triger = rangeElement.get(type + 'HandleElement');
	    var width = this.get('width');
	    var button = triger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [
	          [(width / 2 + TRIGGER_WIDTH), 0],
	          [(width / 2 + 1), 0],
	          [(width / 2 + TRIGGER_WIDTH), type === 'min' ? TRIGGER_WIDTH : -TRIGGER_WIDTH]
	        ]
	      }, blockAttr)
	    });
	    var text = triger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: width + 8,
	        y: type === 'max' ? -8 : 8,
	        textAlign: 'start',
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.set('cursor', trigerCursor);
	    text.set('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  },
	  _addHorizontalTrigger: function(type, blockAttr, textAttr) {
	    var rangeElement = this.get('rangeElement');
	    var triger = rangeElement.get(type + 'HandleElement');
	    var button = triger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [
	          [0, 0],
	          [0, -1 * TRIGGER_WIDTH],
	          [type === 'min' ? -TRIGGER_WIDTH : TRIGGER_WIDTH, -1 * TRIGGER_WIDTH]
	        ]
	      }, blockAttr)
	    });
	    var text = triger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: type === 'min' ? -TRIGGER_WIDTH / 2 : TRIGGER_WIDTH / 2,
	        y: -1 * (8 + TRIGGER_WIDTH),
	        textAlign: type === 'min' ? 'end' : 'start',
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.set('cursor', trigerCursor);
	    text.set('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  }
	});
	
	module.exports = Continuous;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Group = __webpack_require__(173).Group;
	
	var Range = function(cfg) {
	  Range.superclass.constructor.call(this, cfg);
	};
	
	Range.CFG = {
	  /**
	   * 范围
	   * @type {Array}
	   */
	  range: null,
	  /**
	   * 中滑块属性
	   * @type {ATTRS}
	   */
	  middleAttr: null,
	  /**
	   * 背景
	   * @type {G-Element}
	   */
	  backgroundElement: null,
	  /**
	   * 下滑块
	   * @type {G-Element}
	   */
	  minHandleElement: null,
	  /**
	   * 上滑块
	   * @type {G-Element}
	   */
	  maxHandleElement: null,
	  /**
	   * 中块
	   * @type {G-Element}
	   */
	  middleHandleElement: null,
	  /**
	   * 当前的激活的元素
	   * @type {G-Element}
	   */
	  currentTarget: null,
	  /**
	   * 布局方式： horizontal，vertical
	   * @type {String}
	   */
	  layout: 'vertical',
	  /**
	   * 宽
	   * @type {Number}
	   */
	  width: null,
	  /**
	   * 高
	   * @type {Number}
	   */
	  height: null,
	  /**
	   * 当前的PageX
	   * @type {Number}
	   */
	  pageX: null,
	  /**
	   * 当前的PageY
	   * @type {Number}
	   */
	  pageY: null,
	  /**
	   * 是否参与动画
	   * @type {Boolean}
	   */
	  animate: false,
	  /**
	   * 可操作性，false 则不滑动
	   * @type {Boolean}
	   */
	  operable: true
	};
	
	Util.extend(Range, Group);
	
	Util.augment(Range, {
	  _beforeRenderUI: function() {
	    var layout = this.get('layout');
	    var backgroundElement = this.get('backgroundElement');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.addShape('rect', {
	      attrs: this.get('middleAttr')
	    });
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	
	    this.add([backgroundElement, minHandleElement, maxHandleElement]);
	    this.set('middleHandleElement', middleHandleElement);
	    backgroundElement.set('zIndex', 0);
	    middleHandleElement.set('zIndex', 1);
	    minHandleElement.set('zIndex', 2);
	    maxHandleElement.set('zIndex', 2);
	    if (this.get('operable')) {
	      middleHandleElement.set('cursor', 'move');
	      minHandleElement.set('cursor', trigerCursor);
	      maxHandleElement.set('cursor', trigerCursor);
	    }
	    this.sort();
	  },
	  _renderUI: function() {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._renderHorizontal();
	    } else {
	      this._renderVertical();
	    }
	  },
	  _transform: function(layout) {
	    var range = this.get('range');
	    var minRatio = range[0] / 100;
	    var maxRatio = range[1] / 100;
	    var width = this.get('width');
	    var height = this.get('height');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.get('middleHandleElement');
	
	    minHandleElement.initTransform();
	    maxHandleElement.initTransform();
	
	    if (layout === 'horizontal') {
	      middleHandleElement.attr({
	        x: width * minRatio,
	        y: 0,
	        width: (maxRatio - minRatio) * width,
	        height: height
	      });
	      minHandleElement.translate(minRatio * width, 0);
	      maxHandleElement.translate(maxRatio * width, 0);
	    } else {
	      middleHandleElement.attr({
	        x: 0,
	        y: height * (1 - maxRatio),
	        width: width,
	        height: (maxRatio - minRatio) * height
	      });
	      minHandleElement.translate(width / 2, (1 - minRatio) * height);
	      maxHandleElement.translate(width / 2, (1 - maxRatio) * height);
	    }
	  },
	  _renderHorizontal: function() {
	    this._transform('horizontal');
	  },
	  _renderVertical: function() {
	    this._transform('vertical');
	  },
	  _bindUI: function() {
	    if (this.get('operable')) {
	      this.on('mousedown', Util.wrapBehavior(this, '_onMouseDown'));
	      this.on('mousemove', Util.wrapBehavior(this, '_onMouseMove'));
	      this.on('mouseleave', Util.wrapBehavior(this, '_onMouseLeave'));
	    }
	  },
	  // 判断是否是该元素
	  _isElement: function(target, name) {
	    var element = this.get(name);
	    if (target === element) {
	      return true;
	    }
	    if (element.isGroup) {
	      var elementChildren = element.get('children');
	      return elementChildren.indexOf(target) > -1;
	    }
	    return false;
	  },
	  _getRange: function(diff, range) {
	    var rst = diff + range;
	    rst = rst > 100 ? 100 : rst;
	    rst = rst < 0 ? 0 : rst;
	    return rst;
	  },
	  /**
	   * 更新状态
	   * @param {String} dim x || y
	   * @param {Object} ev DOM 原生事件
	   */
	  _updateStatus: function(dim, ev) {
	    var totalLength = dim === 'x' ? this.get('width') : this.get('height');
	    var ucDim = Util.ucfirst(dim);
	    var range = this.get('range');
	    var page = this.get('page' + ucDim);
	    var currentTarget = this.get('currentTarget');
	    var rangeStash = this.get('rangeStash');
	    var layout = this.get('layout');
	    var sign = layout === 'vertical' ? -1 : 1;
	    var currentPage = ev['page' + ucDim];
	    var diffPage = currentPage - page;
	    var diffRange = (diffPage / totalLength) * 100 * sign;
	    var diffStashRange;
	
	    if (range[1] <= range[0]) {
	      if (this._isElement(currentTarget, 'minHandleElement') || this._isElement(currentTarget, 'maxHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	        range[1] = this._getRange(diffRange, range[0]);
	      }
	    } else {
	      if (this._isElement(currentTarget, 'minHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	      }
	      if (this._isElement(currentTarget, 'maxHandleElement')) {
	        range[1] = this._getRange(diffRange, range[1]);
	      }
	    }
	
	    if (this._isElement(currentTarget, 'middleHandleElement')) {
	      diffStashRange = (rangeStash[1] - rangeStash[0]);
	      range[0] = this._getRange(diffRange, range[0]);
	      range[1] = range[0] + diffStashRange;
	      if (range[1] > 100) {
	        range[1] = 100;
	        range[0] = range[1] - diffStashRange;
	      }
	    }
	
	    this.fire('rangeChange', {
	      range: range
	    });
	
	    this.set('page' + ucDim, currentPage);
	    this._renderUI();
	    this.get('canvas').draw(); // need delete
	    return;
	  },
	  _onMouseLeave: function() {
	    var containerDOM = this.get('canvas').get('containerDOM');
	    containerDOM.style.cursor = 'default';
	  },
	  _onMouseMove: function(ev) {
	    var cursor = ev.currentTarget.get('cursor');
	    var containerDOM = this.get('canvas').get('containerDOM');
	    if (containerDOM) {
	      if (cursor) {
	        containerDOM.style.cursor = cursor;
	      } else {
	        containerDOM.style.cursor = 'default';
	      }
	    }
	  },
	  _onMouseDown: function(ev) {
	    var currentTarget = ev.currentTarget;
	    var originEvent = ev.event;
	    var range = this.get('range');
	    originEvent.stopPropagation();
	    originEvent.preventDefault();
	    this.set('pageX', originEvent.pageX);
	    this.set('pageY', originEvent.pageY);
	    this.set('currentTarget', currentTarget);
	    this.set('rangeStash', [range[0], range[1]]);
	    this._bindCanvasEvents();
	  },
	  _bindCanvasEvents: function() {
	    this.onMouseMoveListener = Util.addEventListener(document, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
	    this.onMouseUpListener = Util.addEventListener(document, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
	  },
	  _onCanvasMouseMove: function(ev) {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._updateStatus('x', ev);
	    } else {
	      this._updateStatus('y', ev);
	    }
	  },
	  _onCanvasMouseUp: function() {
	    this._removeDocumentEvents();
	  },
	  _removeDocumentEvents: function() {
	    this.onMouseMoveListener.remove();
	    this.onMouseUpListener.remove();
	  }
	});
	
	module.exports = Range;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 全局变量
	 * @author dxq613
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Theme = __webpack_require__(265);
	var THEME_TYPES = ['default', 'dark', 'cheery'];
	
	function percentFormat(value) {
	  value = value || 0;
	  value = value * 100;
	  var digits = 2; // 默认展示小数点后面两位数
	  if (value > 0 && value < 0.01) {
	    digits = (1 / value + '').indexOf('.') + 1;
	  }
	
	  return value.toFixed(digits) + '%';
	}
	
	var Global = {};
	var Default;
	
	function setTheme(theme) {
	  for (var k in Global) {
	    if (Global.hasOwnProperty(k)) {
	      delete Global[k];
	    }
	  }
	
	  var newTheme;
	  if (Util.isObject(theme)) {
	    newTheme = theme;
	  } else if (Util.indexOf(THEME_TYPES, theme) !== -1) {
	    newTheme = Theme[theme];
	  } else {
	    newTheme = Theme['default'];
	  }
	  Util.mix(true, Global, Default, newTheme);
	  Global.setTheme = setTheme;
	}
	
	Default = {
	  animate: true,
	  percentFormat: percentFormat,
	  widthRatio: { // 宽度所占的分类的比例
	    column: 1 / 2, // 一般的柱状图占比 1/2
	    rose: 0.9999999, // 玫瑰图柱状占比 1
	    multiplePie: 1 / 1.3 // 多层的饼图、环图
	  },
	  // 折线图、区域图、path 当只有一个数据时，是否显示成点
	  showSinglePoint: false,
	  scales: {
	    '..x': {
	      type: 'linear',
	      min: 0,
	      max: 1,
	      nice: false
	    },
	    '..y': {
	      type: 'linear',
	      min: 0,
	      max: 1,
	      nice: false
	    },
	    '..level': {
	      type: 'linear',
	      min: 0,
	      nice: false
	    },
	    '..value': {
	      type: 'linear',
	      min: 0
	    },
	    '..count': {
	      type: 'linear',
	      min: 0,
	      alias: 'count'
	    },
	    '..percent': {
	      type: 'linear',
	      min: 0,
	      max: 1,
	      alias: 'percent',
	      formatter: percentFormat
	    },
	    '..proportion': {
	      type: 'linear',
	      min: 0,
	      max: 1,
	      alias: 'proportion',
	      formatter: percentFormat
	    },
	    '..density': {
	      type: 'linear',
	      min: 0,
	      alias: 'density'
	    },
	    '..long': {
	      type: 'linear',
	      alias: 'longitude',
	      nice: false
	    },
	    '..lant': {
	      type: 'linear',
	      alias: 'latitude',
	      nice: false
	    },
	    '..pieX': {
	      type: 'cat',
	      values: ['..pieX'],
	      ticks: ['..pieX']
	    } // 饼图默认X轴度量
	  },
	  connectNulls: false, // 是否忽视数据中的null的点，这个配置项影响折线图、区域图
	  heatmapColors: 'rgb(125,125,248)-rgb(0,0,255)-rgb(0,255,0)-yellow-rgb(255,0,0)',
	  heatmap: {
	    radius: 50
	  }
	};
	
	setTheme('default');
	
	module.exports = Global;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Theme = {
	  default: __webpack_require__(266),
	  dark: __webpack_require__(267),
	  cheery: __webpack_require__(268)
	};
	
	module.exports = Theme;


/***/ }),
/* 266 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview G2 1.2.0 开始使用的默认主题
	 */
	'use strict';
	
	var DEFAULT_COLOR = '#4E7CCC';
	var FONT_FAMILY = '"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "微软雅黑", SimSun, "sans-serif"';
	
	var Theme = {
	  defaultColor: DEFAULT_COLOR, // 默认主题色
	  plotCfg: {
	    margin: [20, 80, 60, 80]
	  },
	  facetCfg: {
	    type: 'rect',
	    margin: 10,
	    facetTitle: {
	      titleOffset: 16,
	      colDimTitle: {
	        title: {
	          fontSize: 14,
	          textAlign: 'center',
	          fill: '#999'
	        }
	      },
	      colTitle: {
	        title: {
	          fontSize: 12,
	          textAlign: 'center',
	          fill: '#999'
	        }
	      },
	      rowTitle: {
	        title: {
	          fontSize: 12,
	          textAlign: 'center',
	          rotate: 90,
	          fill: '#999'
	        }
	      },
	      rowDimTitle: {
	        title: {
	          fontSize: 12,
	          textAlign: 'center',
	          rotate: 90,
	          fill: '#999'
	        }
	      }
	    }
	  },
	  binWidth: 0.03, // bin 统计的默认值
	  fontFamily: FONT_FAMILY,
	  colors: {
	    'default': ['#4E7CCC', '#36B3C3', '#4ECDA5', '#94E08A', '#E2F194', '#EDCC72', '#F8AB60', '#F9815C', '#EB4456', '#C82B3D']
	  },
	  shapes: {
	    point: ['hollowCircle', 'hollowSquare', 'hollowDiamond', 'hollowBowtie', 'hollowTriangle',
	      'hollowHexagon', 'cross', 'tick', 'plus', 'hyphen', 'line'],
	    line: ['line', 'dash', 'dot'],
	    area: ['area']
	  },
	  hues: ['red', 'yellow', 'green', 'blue', 'orange', 'purple', 'pink', 'brown', 'white', 'gray', 'black'],
	  axis: {
	    top: {
	      position: 'top',
	      titleOffset: 30,
	      title: {
	        fontSize: 12,
	        fill: '#999',
	        textBaseline: 'middle'
	      },
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#ccc',
	        value: 5
	      }
	    },
	    bottom: {
	      position: 'bottom',
	      titleOffset: 45,
	      labelOffset: 20,
	      title: {
	        fontSize: 12,
	        textAlign: 'center',
	        fill: '#999',
	        textBaseline: 'middle'
	      },
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#ccc',
	        value: 5
	      }
	    },
	    left: {
	      position: 'left',
	      titleOffset: 60,
	      labelOffset: 13,
	      title: {
	        fontSize: 12,
	        fill: '#999',
	        textBaseline: 'middle'
	      },
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#ccc',
	        value: 5
	      },
	      grid: {
	        line: {
	          stroke: '#d9d9d9',
	          lineWidth: 1,
	          lineDash: [2, 2]
	        }
	      }
	    },
	    right: {
	      position: 'right',
	      titleOffset: 60,
	      labelOffset: 13,
	      title: {
	        fontSize: 12,
	        fill: '#999',
	        textBaseline: 'middle'
	      },
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#ccc',
	        value: 5
	      }
	    },
	    circle: {
	      labelOffset: 5,
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      grid: {
	        line: {
	          stroke: '#d9d9d9',
	          lineWidth: 1,
	          lineDash: [1, 3]
	        }
	      },
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      }
	    },
	    gauge: {
	      grid: null,
	      labelOffset: 5,
	      tickLine: {
	        lineWidth: 1,
	        value: -20,
	        stroke: '#ccc'
	      },
	      subTick: 5,
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      }
	    },
	    clock: {
	      grid: null,
	      labelOffset: 5,
	      tickLine: {
	        lineWidth: 1,
	        value: -20,
	        stroke: '#C0D0E0'
	      },
	      subTick: 5,
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      }
	    },
	    radius: {
	      titleOffset: 45,
	      labels: {
	        label: {
	          fill: '#404040',
	          fontSize: 12,
	          textBaseline: 'middle'
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      grid: {
	        line: {
	          stroke: '#d9d9d9',
	          lineWidth: 1,
	          lineDash: [2, 2]
	        },
	        type: 'circle'
	      }
	    },
	    helix: {
	      grid: null,
	      labels: {
	        label: null
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#ccc'
	      },
	      tickLine: {
	        lineWidth: 1,
	        value: 5,
	        stroke: '#ccc'
	      }
	    }
	  },
	  labels: {
	    offset: 14,
	    label: {
	      fill: '#666',
	      fontSize: 12,
	      textBaseline: 'middle'
	    }
	  },
	  treemapLabels: {
	    offset: 10,
	    label: {
	      fill: '#fff',
	      fontSize: 14,
	      textBaseline: 'top',
	      fontStyle: 'bold'
	    }
	  },
	  innerLabels: {
	    label: {
	      fill: '#fff',
	      fontSize: 12,
	      textBaseline: 'middle'
	    }
	  }, // 在theta坐标系下的饼图文本内部的样式
	  thetaLabels: {
	    labelLine: {
	      lineWidth: 1
	    },
	    labelHeight: 14,
	    offset: 30
	  }, // 在theta坐标系下的饼图文本的样式
	  legend: {
	    right: {
	      position: 'right',
	      back: null,
	      spacingX: 10,
	      spacingY: 12,
	      markerAlign: 'center',
	      width: 20,
	      height: 156,
	      title: {
	        text: ' ',
	        fill: '#333',
	        textBaseline: 'middle'
	      }
	    },
	    left: {
	      position: 'left',
	      back: null,
	      spacingX: 10,
	      spacingY: 12,
	      markerAlign: 'center',
	      width: 20,
	      height: 156,
	      title: {
	        text: ' ',
	        fill: '#333',
	        textBaseline: 'middle'
	      }
	    },
	    top: {
	      position: 'top',
	      title: null,
	      back: null,
	      spacingX: 16,
	      spacingY: 10,
	      markerAlign: 'center',
	      width: 156,
	      height: 20
	    },
	    bottom: {
	      position: 'bottom',
	      title: null,
	      back: null,
	      spacingX: 16,
	      spacingY: 10,
	      markerAlign: 'center',
	      width: 156,
	      height: 20
	    }
	  },
	  tooltip: {
	    crosshairs: false,
	    offset: 15,
	    crossLine: {
	      stroke: '#666'
	    },
	    wordSpaceing: 6,
	    markerCfg: {
	      symbol: 'circle',
	      radius: 3
	    }
	  },
	  activeShape: {
	    point: {
	      fillOpacity: 0.7
	    },
	    hollowPoint: {
	      lineWidth: 2
	    },
	    interval: {
	      fillOpacity: 0.7
	    },
	    hollowInterval: {
	      lineWidth: 2
	    },
	    area: {
	      fillOpacity: 0.85
	    },
	    hollowArea: {
	      lineWidth: 2
	    },
	    line: {
	      lineWidth: 2
	    },
	    polygon: {
	      fillOpacity: 0.75
	    }
	  }, // 图形激活时，鼠标移动到上面
	  shape: {
	    point: {
	      lineWidth: 1,
	      fill: DEFAULT_COLOR,
	      radius: 4
	    },
	    hollowPoint: {
	      fill: '#fff',
	      lineWidth: 1,
	      stroke: DEFAULT_COLOR,
	      radius: 3
	    },
	    interval: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.85
	    },
	    pie: {
	      lineWidth: 1,
	      stroke: '#fff'
	    },
	    hollowInterval: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 1
	    },
	    area: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.6
	    },
	    polygon: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 1
	    },
	    hollowPolygon: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 1
	    },
	    hollowArea: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 1
	    },
	    line: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 1,
	      fill: null
	    }
	  },
	  guide: {
	    text: {
	      fill: '#666',
	      fontSize: 12
	    },
	    line: {
	      stroke: DEFAULT_COLOR,
	      lineDash: [0, 2, 2]
	    },
	    rect: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.1
	    },
	    tag: {
	      line: {
	        stroke: DEFAULT_COLOR,
	        lineDash: [0, 2, 2]
	      },
	      text: {
	        fill: '#666',
	        fontSize: 12,
	        textAlign: 'center'
	      },
	      rect: {
	        lineWidth: 0,
	        fill: DEFAULT_COLOR,
	        fillOpacity: 0.1
	      }
	    },
	    html: {
	      align: 'cc'
	    }
	  },
	  tooltipMarker: {
	    fill: '#fff',
	    symbol: 'circle',
	    lineWidth: 2,
	    stroke: DEFAULT_COLOR,
	    radius: 4
	  } // 提示信息在折线图、区域图上形成点的样式
	};
	
	module.exports = Theme;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 暗色背景下的主题
	 */
	var Util = __webpack_require__(169);
	var DefaultTheme = __webpack_require__(266);
	
	var Theme = Util.mix(true, {}, DefaultTheme, {
	  plotCfg: {
	    margin: [20, 80, 60, 80],
	    border: {
	      fill: '#18242E' // 设置背景色
	    }
	  },
	  axis: {
	    top: {
	      labels: {
	        label: {
	          fill: '#D5D4D4'
	        }
	      },
	      tickLine: {
	        stroke: '#46525F'
	      }
	    },
	    bottom: {
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      },
	      line: {
	        stroke: '#46525F'
	      },
	      tickLine: {
	        stroke: '#46525F'
	      }
	    },
	    left: {
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      },
	      line: {
	        stroke: '#46525F'
	      },
	      tickLine: {
	        stroke: '#46525F'
	      },
	      grid: {
	        line: {
	          stroke: '#46525F'
	        }
	      }
	    },
	    right: {
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      },
	      line: {
	        stroke: '#46525F'
	      },
	      tickLine: {
	        stroke: '#46525F'
	      }
	    },
	    circle: {
	      line: {
	        stroke: '#46525F'
	      },
	      grid: {
	        line: {
	          stroke: '#46525F'
	        }
	      },
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      }
	    },
	    gauge: {
	      tickLine: {
	        stroke: '#46525F'
	      },
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      }
	    },
	    clock: {
	      tickLine: {
	        stroke: '#46525F'
	      },
	      subTick: 5,
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      }
	    },
	    radius: {
	      labels: {
	        label: {
	          fill: '#999'
	        }
	      },
	      line: {
	        stroke: '#46525F'
	      },
	      grid: {
	        line: {
	          stroke: '#46525F'
	        }
	      }
	    }
	  },
	  legend: {
	    right: {
	      word: {
	        fill: '#999'
	      },
	      title: {
	        fill: '#999'
	      }
	    },
	    left: {
	      word: {
	        fill: '#999'
	      },
	      title: {
	        fill: '#999'
	      }
	    },
	    top: {
	      word: {
	        fill: '#999'
	      }
	    },
	    bottom: {
	      word: {
	        fill: '#999'
	      }
	    }
	  },
	  guide: {
	    text: {
	      fill: '#999'
	    },
	    tag: {
	      text: {
	        fill: '#999'
	      }
	    }
	  }
	});
	
	module.exports = Theme;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var DefaultTheme = __webpack_require__(266);
	var DEFAULT_COLOR = '#62a4e8';
	
	var Theme = Util.mix(true, {}, DefaultTheme, {
	  defaultColor: DEFAULT_COLOR, // 默认主题色
	  colors: {
	    'default': ['#61A5E8', '#7ECF51', '#EECB5F', '#E4925D', '#E16757', '#9570E5', '#605FF0'],
	    intervalStack: ['#61A5E8', '#7ECF51', '#EECB5F', '#E4925D', '#E16757', '#9570E5', '#605FF0',
	        '#605ff0', '#85ca36', '#1c9925', '#0d8b5f', '#0f9cd3', '#2f7e9b', '#2f677d', '#9b7fed',
	        '#7453d6', '#3b1d98', '#27abb1', '#017377', '#015f63', '#b86868', '#5669b7', '#e5aab4',
	        '#60b65f', '#98d2b2', '#c9c8bc', '#45c3dc', '#e17979', '#5baa5a', '#eaccc2', '#ffaa74'
	      ] // 层叠的柱状图使用不同的颜色
	  },
	  shape: {
	    point: {
	      fill: DEFAULT_COLOR
	    },
	    hollowPoint: {
	      stroke: DEFAULT_COLOR
	    },
	    interval: {
	      fill: DEFAULT_COLOR
	    },
	    hollowInterval: {
	      stroke: DEFAULT_COLOR
	    },
	    area: {
	      fill: DEFAULT_COLOR
	    },
	    polygon: {
	      fill: DEFAULT_COLOR
	    },
	    hollowPolygon: {
	      stroke: DEFAULT_COLOR
	    },
	    hollowArea: {
	      stroke: DEFAULT_COLOR
	    },
	    line: {
	      stroke: DEFAULT_COLOR
	    }
	  },
	  guide: {
	    line: {
	      stroke: DEFAULT_COLOR
	    },
	    rect: {
	      fill: DEFAULT_COLOR
	    },
	    tag: {
	      line: {
	        stroke: DEFAULT_COLOR
	      },
	      rect: {
	        fill: DEFAULT_COLOR
	      }
	    }
	  },
	  tooltipMarker: {
	    stroke: DEFAULT_COLOR
	  }
	});
	
	module.exports = Theme;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 视图生成类，图表基类
	 * @author zaifei.zwx@alibaba-inc.com minnuo<audrey.tm@alibaba-inc.com>
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(197);
	var DataFrame = __webpack_require__(270);
	var Global = __webpack_require__(264);
	var Assists = __webpack_require__(277);
	var Geoms = __webpack_require__(343);
	var GeomWrapper = __webpack_require__(368); // 用于添加图表的图层
	var AttrMixin = __webpack_require__(369);
	var RenderMixin = __webpack_require__(380);
	
	var compatGeoms = [
	  'pointStack',
	  'pointJitter',
	  'pointDodge',
	  'intervalStack',
	  'intervalDodge',
	  'intervalSymmetric',
	  'areaStack',
	  'schemaDodge'
	];
	
	function parseCompatGeoms(type) {
	  var tmp = type.replace(/([a-z](?=[A-Z]))/g, '$1 '); // 例如，areaStack 变为 'area Stack'
	  return tmp.split(' ');
	}
	
	function isBetween(value, start, end) {
	  var tmp = (value - start) / (end - start);
	  return tmp >= 0 && tmp <= 1;
	}
	
	function isPointInCoord(coord, point) {
	  var result = false;
	  if (coord) {
	    var type = coord.type;
	    if (type === 'theta') {
	      var start = coord.get('start');
	      var end = coord.get('end');
	      result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);
	    } else {
	      var invertPoint = coord.invert(point);
	      result = invertPoint.x >= 0 && invertPoint.y >= 0 && invertPoint.x <= 1 && invertPoint.y <= 1;
	    }
	  }
	  return result;
	}
	
	var View = function(cfg) {
	  View.superclass.constructor.call(this, cfg);
	  this._init();
	};
	
	View.ATTRS = {
	  start: {
	    x: 0,
	    y: 0
	  },
	  end: {
	    x: 1,
	    y: 1
	  },
	  tooltipEnable: true,
	  id: '', // 每个 view 的标识符
	  data: null, // 源数据
	  geoms: [],
	  scales: {}, // 度量
	  animate: Global.animate,
	  views: [],
	  facets: [],
	  syncXYScales: false, // 是否统一所有视图的 x y 度量
	  options: {},
	  stats: []
	};
	
	Util.extend(View, Base);
	
	Util.augment(View, AttrMixin, RenderMixin, {
	  _init: function() {
	    var options = this.get('options');
	    var data = this.get('data');
	    if (Util.isNull(data)) {
	      data = [];
	      this.set('data', []);
	    }
	    this._initAssists();
	    this._initData(data, options.appendFields);
	
	    this.set('views', []);
	    this.set('geoms', []);
	    this.set('scales', {});
	  },
	  _initAssists: function() {
	    Assists.initScale(this);
	    Assists.initCoord(this);
	    Assists.initAxis(this);
	    Assists.initGuide(this);
	  },
	  _setOptions: function(type, typeOptions) {
	    var options = this.get('options');
	    options[type] = Util.mix({}, options[type], typeOptions);
	    this.set('options', options);
	  },
	  _getRegion: function(view) {
	    // 默认 view 的起始点是左上角
	    var plotRange = this.get('plotRange');
	    var start = view.get('start');
	    var end = view.get('end');
	
	    var plotStart = plotRange.tl;
	    var plotEnd = plotRange.br;
	
	    var startPoint = {
	      x: start.x * (plotEnd.x - plotStart.x) + plotStart.x,
	      y: end.y * (plotEnd.y - plotStart.y) + plotStart.y
	
	    };
	    var endPoint = {
	      x: end.x * (plotEnd.x - plotStart.x) + plotStart.x,
	      y: start.y * (plotEnd.y - plotStart.y) + plotStart.y
	    };
	
	    return {
	      start: startPoint,
	      end: endPoint
	    };
	  },
	  _clearInner: function(flag) {
	    var geoms = this.get('geoms');
	    if (geoms.length) {
	      Util.each(geoms, function(geom) {
	        geom.destroy();
	      });
	    }
	    this.set('geoms', []);
	    this.get('guideAssist').reset();
	    this.get('legendAssist') && this.get('legendAssist').clear();
	    this.get('tooltipAssist') && this.get('tooltipAssist').clear();
	    this.get('plotContainer') && this.get('plotContainer').clear();
	    this.get('backPlot') && this.get('backPlot').clear();
	    this.get('frontPlot') && this.get('frontPlot').clear();
	
	    if (flag) {
	      this.get('guideAssist').clear();
	      this.set('scales', {});
	    }
	
	    return this;
	  },
	  /**
	   * 设置数据源
	   * @param  {Array} data 数据源
	   * @param  {Object} [colDefs] 列定义
	   * @param {Array} [appendFields] 列的字段名，防止异构的数据，第一行数据的字段不全面
	   */
	  source: function(data, colDefs, appendFields) {
	    var options = this.get('options');
	    options.appendFields = appendFields;
	    if (colDefs) {
	      this._setOptions('scales', colDefs);
	    }
	    this._initData(data, appendFields);
	    return this;
	  },
	  col: function(field, cfg) {
	    var options = this.get('options');
	    if (!options.scales) {
	      options.scales = {};
	    }
	    options.scales[field] = cfg;
	    return this;
	  },
	  cols: function(colDefs) {
	    var options = this.get('options');
	    if (!options.scales) {
	      options.scales = {};
	    }
	    Util.mix(options.scales, colDefs);
	    return this;
	  },
	  coord: function(type, cfg) {
	    this._setOptions('coord', {
	      type: type,
	      cfg: cfg,
	      actions: []
	    });
	    var coordAssist = this.get('coordAssist');
	    coordAssist.resetActions();
	    return coordAssist;
	  },
	  axis: function(field, cfg) {
	    var visible = true;
	    var options = this.get('options');
	    if (!options.axes) {
	      options.axes = {};
	    }
	    var axisOptions = options.axes;
	
	    if (field === false) {
	      visible = false;
	    } else {
	      axisOptions[field] = cfg;
	    }
	
	    axisOptions.visible = visible;
	
	    return this;
	  },
	  guide: function() {
	    return this.get('guideAssist');
	  },
	  filter: function(field, remained) {
	    var options = this.get('options');
	    if (!options.filters) {
	      options.filters = {};
	    }
	    var filters = options.filters;
	    filters[field] = remained; // remained 保留的字段
	    return this;
	  },
	  tooltip: function(visible) {
	    this.set('tooltipEnable', visible); // 该方法只用于开启关闭 tooltip
	    return this;
	  },
	  animate: function(enable) {
	    var options = this.get('options');
	    options.animate = enable;
	    this.set('animate', enable);
	    return this;
	  },
	  createView: function(cfg) {
	    var views = this.get('views');
	    var view = new View(cfg);
	    if (!view.get('region')) {
	      view.set('region', this._getRegion(view));
	    }
	    view.set('backCanvas', this.get('backCanvas'));
	    view.set('frontCanvas', this.get('frontCanvas'));
	    view.set('canvas', this.get('canvas'));
	    view.set('viewId', this.get('viewId') + views.length);
	    view.set('parent', this);
	    view.set('animate', this.get('animate'));
	    view.set('syncXYScales', this.get('syncXYScales'));
	
	    if (!cfg || !cfg.id) {
	      view.set('id', 'view' + views.length);
	    }
	
	    // view 默认使用 chart 的列定义、坐标轴 axis 配置、坐标系 coord 配置，如果 view 自己定义了相应的配置，则以自己的为准
	    var chartOptions = this.get('options');
	    var viewOptions = cfg && cfg.options || view.get('options');
	    viewOptions.scales = viewOptions.scales || {};
	    viewOptions.scales = Util.mix({}, chartOptions.scales, viewOptions.scales); // 列定义
	    viewOptions.axes = viewOptions.axes || {};
	    viewOptions.axes = Util.mix({}, chartOptions.axes, viewOptions.axes); // 坐标轴定义
	    viewOptions.coord = viewOptions.coord || {};
	    viewOptions.coord = Util.mix({}, chartOptions.coord, viewOptions.coord); // 坐标系定义
	
	    if (viewOptions.tooltip === false) { // view 上的 tooltip 只用于开启关闭
	      view.set('tooltipEnable', false);
	    }
	
	    views.push(view);
	    this.set('views', views);
	    return view;
	  },
	  removeView: function(view) {
	    var newViews = [];
	    var views = this.get('views');
	    var aView = null;
	
	    for (var i = 0; i < views.length; i++) {
	      aView = views[i];
	      if (aView !== view) {
	        newViews.push(aView);
	      } else {
	        aView.clear();
	      }
	    }
	    this.set('views', newViews);
	  },
	  render: function() {
	    var options = this.get('options');
	    var views;
	
	    if (options.facet) { // 如果有设置了分面，生成分面视图
	      this._renderFacets(options.facet);
	      views = this.get('views');
	    } else {
	      views = [this].concat(this.get('views'));
	      Util.each(views, function(view) {
	        view._setScaleOptions();
	        view._renderView();
	      });
	
	      if (this.get('syncXYScales')) {
	        this._syncXYScales(); // 绘制前进行度量统一
	      }
	    }
	
	    Util.each(views, function(view) {
	      view._paint();
	    });
	
	    if (!options.legends || (options.legends && options.legends.visible !== false)) {
	      this._renderLegends(options.legends); // 渲染图例
	    }
	
	    this._renderTooltip(); // 渲染 tooltip
	    this._drawCanvas(); // 绘制整个画布
	
	    return this;
	  },
	  /**
	   * 更改数据源
	   * @param  {Array|Frame} data 数据源
	   */
	  changeData: function(data) {
	    this._initData(data);
	    this.set('scales', {});
	
	    var chart = this;
	    if (this.get('syncXYScales') && this.get('parent')) {
	      chart = this.get('parent');
	    }
	    chart.repaint();
	
	    return this;
	  },
	  /**
	   * 清除所有图层
	   */
	  clear: function() {
	    var views = this.get('views');
	
	    if (views.length > 0) {
	      Util.each(views, function(view) {
	        view._clearInner(true);
	      });
	      this.set('views', []);
	    }
	    var options = this.get('options');
	    options.geoms = [];
	    this._clearInner(true);
	    !this.get('parent') && this.get('frontCanvas').clear();
	    this.get('backCanvas').draw();
	    this.get('canvas').draw();
	    this.get('frontCanvas').draw();
	    this.set('plotContainer', null);
	    this.set('backPlot', null);
	    this.set('frontPlot', null);
	    this.set('facets', []);
	    return this;
	  },
	  /**
	   * 重绘，数据不改变
	   */
	  repaint: function() {
	    var views = this.get('views');
	
	    if (views.length > 0) {
	      Util.each(views, function(view) {
	        view._clearInner(false);
	      });
	    }
	    this._clearInner(false); // 清理内部图形元素
	    this.set('isUpdate', true);
	    this.set('stats', []);
	
	    this.render(); // 重新渲染
	    return this;
	  },
	  /**
	   * 获取当前激活的图形
	   * @return {Shape} 图形对象
	   */
	  getActiveShape: function() {
	    var self = this;
	    var geoms = self.get('geoms');
	    var rst = null;
	    Util.each(geoms, function(geom) {
	      var shapes = geom.get('activeShapes');
	      if (shapes && shapes.length) {
	        rst = shapes[0];
	        return false;
	      }
	    });
	    return rst;
	  },
	  /**
	   * 获取逼近的点的数据集合
	   * @param  {Object} point 画布上的像素点
	   * @return {Array} 数据
	   */
	  getSnapRecords: function(point) {
	    var self = this;
	    var geoms = self.get('geoms');
	    var rst = [];
	    Util.each(geoms, function(geom) {
	      var frames = geom.get('frames');
	      var record;
	      if (geom.get('type') === 'point') {
	        var merge = DataFrame.merge.apply(null, frames);
	        record = geom.findPoint(point, merge);
	        record && rst.push(record);
	      } else {
	        Util.each(frames, function(frame) {
	          record = geom.findPoint(point, frame);
	          record && rst.push(record);
	        });
	      }
	    });
	    return rst;
	  },
	  /**
	   * 获取数据对应在画布空间的坐标
	   * @param  {Array} data [原始数据]
	   * @return {Object} 返回对应的画布上的坐标点
	   */
	  getPosition: function(data) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var x;
	    var y;
	    var xDim;
	    if (xScale) {
	      xDim = xScale.dim;
	      x = xScale.scale(data[xDim]);
	    }
	
	    var scales = this.get('scales');
	    Util.each(scales, function(scale) {
	      if (scale && (scale.dim !== xDim) && !Util.isNull(data[scale.dim])) {
	        var yDim = scale.dim;
	        y = scale.scale(data[yDim]);
	        return;
	      }
	    });
	
	    return coord.convert({
	      x: x,
	      y: y
	    });
	  },
	  // 获取x轴对应的scale
	  getXScale: function() {
	    var geoms = this.get('geoms');
	    var xScale = null;
	    if (geoms.length) {
	      xScale = geoms[0].getXScale();
	    }
	    return xScale;
	  },
	  // 获取整体y轴对应的scale, 如果有多个则是数组
	  getYScales: function() {
	    var geoms = this.get('geoms');
	    var rst = [];
	
	    Util.each(geoms, function(geom) {
	      var yScale = geom.getYScale();
	      if (yScale && Util.indexOf(rst, yScale) === -1) {
	        rst.push(yScale);
	      }
	    });
	    return rst;
	  },
	  getViews: function() {
	    return this.get('views');
	  },
	  getView: function(id) {
	    var result = null;
	    var views = this.get('views');
	    Util.each(views, function(view) {
	      if (view.get('id') === id) {
	        result = view;
	        return false;
	      }
	    });
	
	    return result;
	  },
	  getGeoms: function() {
	    return this.get('geoms');
	  },
	  getAllGeoms: function() {
	    var geoms = [];
	    geoms = geoms.concat(this.getGeoms());
	
	    var views = this.get('views');
	    Util.each(views, function(view) {
	      geoms = geoms.concat(view.getGeoms());
	    });
	
	    return geoms;
	  },
	  getScale: function(dim) {
	    var scales = this.get('scales');
	    return scales[dim];
	  },
	  createScale: function(dim, isIntervalY) {
	    var frame = this.get('data');
	    var scaleAssist = this.get('scaleAssist');
	    var scales = this.get('scales');
	    if (!scales[dim]) {
	      scales[dim] = scaleAssist.createScale(dim, frame, isIntervalY);
	    }
	    return scales[dim];
	  },
	  getViewsByPoint: function(point) {
	    var rst = [];
	    var views = this.get('views');
	
	    if (isPointInCoord(this.get('coord'), point)) {
	      rst.push(this);
	    }
	
	    Util.each(views, function(view) {
	      if (isPointInCoord(view.get('coord'), point)) {
	        rst.push(view);
	      }
	    });
	    return rst;
	  }
	});
	
	function addGeomMethod(type, defaultAdjusts) {
	  return function(customAdjusts) {
	    var self = this;
	    var adjusts = [];
	    if (defaultAdjusts) {
	      adjusts = adjusts.concat(defaultAdjusts);
	    }
	    if (customAdjusts) {
	      adjusts = adjusts.concat(customAdjusts);
	    }
	    var options = self.get('options');
	    if (!options.geoms) {
	      options.geoms = [];
	    }
	    var geomOptions = {
	      type: type,
	      adjusts: adjusts
	    };
	    options.geoms.push(geomOptions);
	    var wrapper = new GeomWrapper({
	      options: geomOptions
	    });
	    return wrapper;
	  };
	}
	
	for (var k in Geoms) {
	  if (Geoms.hasOwnProperty(k)) {
	    k = k.toLowerCase();
	    View.prototype[k] = addGeomMethod(k);
	  }
	}
	
	Util.each(compatGeoms, function(compatGeom) {
	  var arr = parseCompatGeoms(compatGeom);
	  var type = arr[0];
	  var adjustType = Util.ucfirst(arr[1]);
	  if (compatGeom === 'pointDodge') {
	    adjustType = ['Dodge'];
	  }
	  View.prototype[compatGeom] = addGeomMethod(type, adjustType);
	});
	
	module.exports = View;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var Frame = __webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(274);
	__webpack_require__(276);
	
	module.exports = Frame;


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 数据最小集合操作
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	/**
	 * @class Frame
	 * 数据集合
	 * @param {Array} data 数据
	 * @param {cfg} 数据项的配置信息
	 */
	var Frame = function(data, cfg) {
	  this.data = data;
	  Util.mix(this, cfg);
	  this.initFrame();
	};
	
	Frame.prototype = {
	  /**
	   * 是否是数据集合
	   * @type {Boolean}
	   */
	  isFrame: true,
	  // 初始化
	  initFrame: function() {
	    var self = this;
	    var data = self.data;
	    var names = self.colNames();
	    var arr = self.arr;
	    // if items is array，The assumption is that column model
	    if (Util.isArray(data[0])) {
	      arr = self.arr = data;
	    }
	    if (!arr) {
	      arr = [];
	      for (var i = 0; i < names.length; i++) {
	        var col = [];
	        var name = names[i];
	        for (var j = 0; j < data.length; j++) {
	          col.push(data[j][name]);
	        }
	        arr.push(col);
	      }
	      self.arr = arr;
	    }
	  },
	  /**
	   * 是否存在对应的字段
	   * @param  {String} name 字段名
	   * @return {Boolean} 是否存在
	   */
	  contains: function(name) {
	    var names = this.colNames();
	    return Util.indexOf(names, name) !== -1;
	  },
	  /**
	   * 所有列的名称
	   * @return {Array} 列名称集合
	   */
	  colNames: function() {
	    var self = this;
	    var names = self.names;
	    if (!names) {
	      var data = this.data;
	      var first = data[0];
	      names = [];
	      if (first) {
	        Util.each(first, function(v, k) {
	          names.push(k);
	        });
	      }
	      self.names = names;
	    }
	    return names;
	  },
	  /**
	   * 获取行数
	   * @return {Number} 行数
	   */
	  rowCount: function() {
	    var self = this;
	    var arr = self.arr;
	    if (arr && arr.length) {
	      return arr[0].length;
	    }
	    return 0;
	  },
	  /**
	   * 获取列数
	   * @return {Number} 列数
	   */
	  colCount: function() {
	    var self = this;
	    var names = self.colNames();
	    if (!names) {
	      return 0;
	    }
	    return names.length;
	  },
	  /**
	   * 获取列索引
	   * @param  {String} name 列名称
	   * @return {Number} 列索引
	   */
	  colIndex: function(name) {
	    return Util.indexOf(this.names, name);
	  },
	  /**
	   * 获取列对应的数组
	   * @param  {String} name 列名称
	   * @return {Array} 列对应的数组
	   */
	  colArray: function(name) {
	    var index = name;
	    if (Util.isString(name)) {
	      index = this.colIndex(name);
	    }
	    return this.arr[index];
	  },
	  /**
	   * 替换列数据
	   * @chainable
	   * @param  {Number} index 索引或者列名称
	   * @param  {Array} data  数据
	   * @return {Frame} 操作的数据集
	   */
	  colReplace: function(index, data) {
	    var arr = this.arr;
	    var names = this.colNames();
	    if (Util.isString(index)) {
	      var name = index;
	      index = Util.indexOf(names, name);
	    }
	
	    arr[index] = data;
	    return this;
	  },
	  /**
	   * 遍历数据集合
	   * @chainable
	   * @param  {Function} fn 遍历函数
	   * @return {Frame} 操作的数据集
	   */
	  each: function(fn) {
	    var self = this;
	    var rowCount = self.rowCount();
	
	    for (var i = 0; i < rowCount; i++) {
	      var obj = self._getObject(i);
	      fn(obj, i);
	    }
	    return self;
	  },
	  /**
	   * 获取行对应的对象
	   * @param  {Number} index 行索引
	   * @return {Object} 行对象
	   */
	  rowObject: function(index) {
	    return this._getObject(index);
	  },
	  // 获取对象
	  _getObject: function(index, names) {
	    var self = this;
	    var arr = self.arr;
	    var obj = {};
	
	    names = names || self.colNames();
	
	    for (var i = 0; i < names.length; i++) {
	      obj[names[i]] = arr[i][index];
	    }
	    return obj;
	  },
	  /**
	   * 添加列
	   * @param {String} name 列名称
	   * @param {Array|Function} colArray|colFn 列对应的数组，或者回调函数
	   */
	  addCol: function(name, colArray) {
	    var self = this;
	    if (Util.isFunction(colArray)) {
	      var fn = colArray;
	      colArray = [];
	      self.each(function(obj, index) {
	        var val = fn(obj, index);
	        colArray.push(val);
	      });
	    }
	    self.names.push(name);
	    self.arr.push(colArray);
	  },
	  /**
	   * 返回数据对应的数组，以列模式组织数据
	   * @return {Array} 数组
	   */
	  toArray: function() {
	    return this.arr;
	  },
	  /**
	   * 获取对应names 列的JSON对象构成的数组
	   * @return {Array} JSON对象数组
	   */
	  toJSON: function() {
	    var self = this;
	    var rowCount = self.rowCount();
	    var rst = [];
	    for (var i = 0; i < rowCount; i++) {
	      rst.push(self._getObject(i));
	    }
	    return rst;
	  }
	};
	module.exports = Frame;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 数据集合的静态工具方法
	 * @author dxq613
	 */
	
	var Util = __webpack_require__(169);
	var FrameUtil = __webpack_require__(273);
	var Frame = __webpack_require__(271);
	
	/**
	 * @name Frame.Util
	 * 静态工具方法
	 */
	Util.mix(Frame, {
	  /**
	   * 获取指定列包含的数值，去重后的结果
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Array} 列去重后的值
	   */
	  values: function(frame, name) {
	    var rst = [];
	    var hash = {};
	    var arr = frame.colArray(name);
	    arr = FrameUtil.formatArray(arr);
	    for (var i = 0, l = arr.length; i < l; i++) {
	      var id = arr[i];
	      if (!hash[id] && id !== undefined) {
	        hash[id] = true;
	        rst.push(id);
	      }
	    }
	    return rst;
	  },
	  /**
	   * 集合分组
	   * @param  {Frame} frame 数据集合
	   * @param  {Function|Array} condition 分组的条件，可以根据条件函数或者列名称进行分组
	   * @return {Array} 分组后的集合数组
	   */
	  group: function(frame, condition) {
	    if (!condition) {
	      return [frame];
	    }
	    var groups = Frame.groupToMap(frame, condition);
	    var array = [];
	    for (var i in groups) {
	      if (groups.hasOwnProperty(i)) {
	        array.push(groups[i]);
	      }
	    }
	    return array;
	  },
	  /**
	   * 集合分组后生成Map，每个键值作为分组的条件
	   * @param  {Frame} frame 数据集合
	   * @param  {Function|Array} condition 分组的条件，可以根据条件函数或者列名称进行分组
	   * @return {Object} 分组后的对象，每个键值对应一个分组
	   */
	  groupToMap: function(frame, condition) {
	    var names = frame.colNames();
	    var groups = {};
	
	    if (!condition) {
	      return {
	        '0': frame
	      };
	    }
	
	    if (!Util.isFunction(condition)) {
	      var paramsCondition = Util.isArray(condition) ? condition : condition.replace(/\s+/g, '').split('*');
	      condition = function(row) {
	        var unique = '';
	        for (var i = 0, l = paramsCondition.length; i < l; i++) {
	          unique += row[paramsCondition[i]].toString();
	        }
	        return unique;
	      };
	    }
	
	    frame.each(function(row) {
	      var key = condition(row);
	      if (groups[key]) {
	        groups[key].push(row);
	      } else {
	        groups[key] = [row];
	      }
	    });
	
	    for (var i in groups) {
	      if (groups.hasOwnProperty(i)) {
	        groups[i] = new Frame(groups[i], {
	          names: names.slice(0)
	        });
	      }
	    }
	
	    return groups;
	  },
	  /**
	   * 合并传入的集合成为一个集合，列不发生变化，假设传入的集合的列一致，仅是增加行
	   * @param  {DataFrame} frame1 the first frame
	   * @param {DataFrame} frame2 the second frame
	   * @param {DataFrame} framen the n'th frame
	   * @return {Frame}
	   */
	  merge: function() {
	    var frameArray = Util.toArray(arguments);
	    var first = frameArray[0];
	    var names = first.colNames();
	    var colCount = first.colCount();
	    var data = [];
	
	    for (var j = 0; j < colCount; j++) {
	      data[j] = [];
	      for (var i = 0; i < frameArray.length; i++) {
	        var subArray = frameArray[i].colArray(j);
	        data[j] = data[j].concat(subArray);
	      }
	    }
	
	    return new Frame(data, {
	      names: names
	    });
	  },
	  /*
	   * 按照列排序，返回排序后的集合，源集合不受影响
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Frame} 排序后的数据
	   */
	  sort: function(frame, x) {
	    var fn = function(obj1, obj2) {
	      return obj1[x] - obj2[x];
	    };
	    return FrameUtil.sort(frame, fn);
	  }
	});
	
	module.exports = Frame;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 数据集合的静态工具方法
	 * @author dxq613
	 */
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(271);
	var INDEX = '_INDEX';
	
	function getComparer(compare) {
	  return function(left, right) {
	    var result = compare(left, right);
	
	    return result === 0 ? left[INDEX] - right[INDEX] : result;
	  };
	}
	
	module.exports = {
	  filterNull: function(data) {
	    var rst = [];
	    Util.each(data, function(sub) {
	      if (!Util.isNull(sub)) {
	        rst.push(sub);
	      }
	    });
	    return rst;
	  },
	  mixIf: function(dist, source, fields) {
	    Util.each(fields, function(field) {
	      dist[field] = source[field];
	    });
	  },
	  formatArray: function(data) {
	    var arr = [];
	    Util.each(data, function(sub) {
	      if (Util.isArray(sub)) {
	        arr = arr.concat(sub);
	      } else {
	        arr.push(sub);
	      }
	    });
	    return arr;
	  },
	  sort: function(frame, fn) {
	    var data = frame.toJSON();
	    Util.each(data, function(item, index) {
	      item[INDEX] = index;
	      return item;
	    });
	
	    data.sort(getComparer(fn));
	
	    return new Frame(data, {
	      names: frame.colNames()
	    });
	  }
	};


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 数据集合的静态工具方法拓展
	 * @author dxq613
	 */
	
	var Util = __webpack_require__(169);
	var FrameUtil = __webpack_require__(273);
	var Frame = __webpack_require__(271);
	var Stat = __webpack_require__(275);
	
	function combineArray() {
	  var args = Util.toArray(arguments);
	  var typeName;
	  if (Util.isString(args[0])) {
	    typeName = args.shift();
	  } else {
	    typeName = 'type';
	  }
	  var rst = [];
	  Util.each(args, function(arr, index) {
	    Util.each(arr, function(obj) {
	      obj[typeName] = index;
	    });
	    rst = rst.concat(arr);
	  });
	  return new Frame(rst);
	}
	
	function combineColumns(frame, cols, name, typeName, retains) {
	  typeName = typeName || 'type';
	  if (Util.isString(retains)) {
	    retains = [retains];
	  }
	  if (!retains) {
	    retains = [];
	    var names = frame.colNames();
	    Util.each(names, function(subName) {
	      if (Util.indexOf(cols, subName) === -1) {
	        retains.push(subName);
	      }
	    });
	  }
	  var data = [];
	  frame.each(function(obj) {
	    Util.each(cols, function(colName) {
	      var newObj = {};
	      newObj[name] = obj[colName];
	      newObj[typeName] = colName;
	      FrameUtil.mixIf(newObj, obj, retains);
	      data.push(newObj);
	    });
	  });
	  return new Frame(data);
	}
	
	function combine() {
	  var frameArray = Util.toArray(arguments);
	  var names = [];
	  var data = [];
	
	  Util.each(frameArray, function(frame) {
	    names = names.concat(frame.colNames());
	    data = data.concat(frame.toArray());
	  });
	
	  return new Frame(data, {
	    names: names
	  });
	}
	
	/**
	 * @name Frame.Util
	 * 静态工具方法
	 */
	Util.mix(Frame, {
	  /*
	  summary: function (frame) {
	    // body...
	  },
	  */
	  /*
	   * 列的均值
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列均值
	   */
	  mean: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.mean(arr);
	  },
	
	  /*
	   * 列的几何均值
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列几何均值
	   */
	  geometric_mean: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.geometric_mean(arr);
	  },
	  /*
	   * 列的中位数
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列中位数
	   */
	  median: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.median(arr);
	  },
	  /*
	   * 列的最大值
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列最大值
	   */
	  max: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.max(arr);
	  },
	  /*
	   * 列的最小值
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列最小值
	   */
	  min: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.min(arr);
	  },
	  /*
	   * 列的众数，最多的数
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列众数
	   */
	  mode: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.mode(arr);
	  },
	  /*
	   * 列的数值范围
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Array} 列的最小值、最大值
	   */
	  range: function(frame, x) {
	    var max = Frame.max(frame, x);
	    var min = Frame.min(frame, x);
	    return [min, max];
	  },
	  /*
	   * 列的和
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列和
	   */
	  sum: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.sum(arr);
	  },
	  /**
	   * 分位
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x 列名称
	   * @param  {Number} p 当前的分为值 1/2, 1/3,2/3 等
	   * @return {Array} 数组
	   */
	  quantile: function(frame, x, p) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.quantile(arr, p);
	  },
	  /**/
	  /*
	   * 列的方差
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列方差
	   */
	  variance: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.variance(arr);
	  },
	  /*
	   * 列的样本方差
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列样本方差
	   */
	  sample_variance: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.sample_variance(arr);
	  },
	  /*
	   * 列的标准差
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 标准差
	   */
	  standard_deviation: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    return Stat.standard_deviation(arr);
	  },
	  /*
	   * 列的标准差,简写
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 标准差
	   */
	  sd: function(frame, x) {
	    return Frame.standard_deviation(frame, x);
	  },
	  /**
	   * 标准误差
	   * @param  {Frame} frame 数据集合
	   * @param  {String} x  列名称
	   * @return {Number} 列标准误差
	   */
	  se: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.formatArray(arr);
	    arr = FrameUtil.filterNull(arr);
	    var sv = Stat.sample_variance(arr); // sample variance
	    return Math.sqrt(sv) / Math.sqrt(arr.length);
	  },
	  /*
	   * 按照列排序，返回排序后的集合，源集合不受影响
	   * @param  {Frame} frame 数据集合
	   * @param  {String} fn  排序函数
	   * @return {Frame} 排序后的数据
	   */
	  sortBy: function(frame, fn) {
	    return FrameUtil.sort(frame, fn);
	  },
	  /**
	   * filter the frame
	   * @param  {DataFrame}   frame frame
	   * @param  {Function} fn  filter function
	   * @return {DataFrame} new frame filtered
	   */
	  filter: function(frame, fn) {
	    var data = [];
	    if (!fn) {
	      return frame;
	    }
	    frame.each(function(obj, index) {
	      if (fn(obj, index)) {
	        data.push(obj);
	      }
	    });
	    return new Frame(data);
	  },
	  /**
	   * 累加x对应的字段
	   * @param  {DataFrame} frame 数据集合
	   * @param  {String} x   field
	   * @return {Array}
	   */
	  cumulative: function(frame, x) {
	    var arr = frame.colArray(x);
	    arr = FrameUtil.filterNull(arr);
	    var rst = [];
	    var cum = 0;
	    Util.each(arr, function(val) {
	      cum += val;
	      rst.push(cum);
	    });
	    return rst;
	  },
	  /**
	   * Exclude columns to create a new frame
	   * @param  {DataFrame} frame
	   * @param  {Array} cols Exclude columns
	   * @return {DataFrame} new frame
	   */
	  complement: function(frame, cols) {
	    var names = frame.colNames().slice(0);
	
	    Util.each(cols, function(name) {
	      Util.remove(names, name);
	    });
	    return frame.cols(names);
	  },
	  /**
	   * 合并传入的集合成为一个集合，列是不定的，只要存在不一致的列就增加，没有此列数据的补0
	   * @param  {DataFrame} frame1 the first frame
	   * @param {DataFrame} frame2 the second frame
	   * @param {DataFrame} framen the n'th frame
	   * @return {Frame}
	   */
	  forceMerge: function() {
	    var frameArray = Util.toArray(arguments);
	    var names = [];
	    var data = [];
	    Util.each(frameArray, function(frame) {
	      var subNames = frame.colNames();
	      Util.each(subNames, function(name) {
	        if (Util.indexOf(names, name) === -1) {
	          names.push(name);
	        }
	      });
	    });
	
	    Util.each(frameArray, function(frame) {
	      var jsonArray = frame.toJSON();
	      data = data.concat(jsonArray);
	    });
	
	    return new Frame(data, {
	      names: names
	    });
	  },
	  /**
	   * According to columns combinations,create a new frame
	   * @param  {DataFrame} frame1 the first frame
	   * @param {DataFrame} frame2 the second frame
	   * @return {DataFrame} new frame
	   */
	  combine: combine,
	  // 兼容原先代码
	  combin: combine,
	  // 更改拼写错误
	  combineColumns: combineColumns,
	  /**
	   * 将多列合成一列
	   * @param  {DataFrame} frame 数据
	   * @param  {Array} cols  列名称
	   * @param  {String} name  新列的名称
	   * @param  {String} [typeName="type"]  存储原先字段的名字作为分类
	   * @param  {Array} [retains]  保留的字段
	   * @return {DataFrame}
	   */
	  combinColumns: combineColumns,
	  /**
	   * 多个数组合并成一个，返回一个数据集合
	   * @param {String} typeName 类别名称
	   * @param {Array} arrN arr1...arrn 多个数组
	   * @return {DataFrame} 数据集合
	   */
	  combineArray: combineArray,
	  // 兼容原先代码
	  combinArray: combineArray
	});
	Frame.Array = {
	  /**
	   * 生成一个包含多个相同值的数组
	   * @param  {*} value 值
	   * @param  {Number} length 数组的个数
	   * @return {Array}
	   */
	  repeat: function(value, length) {
	    var rst = [];
	
	    for (var i = 0; i < length; i++) {
	      rst.push(value);
	    }
	    return rst;
	  }
	};
	
	module.exports = Frame;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	/* global module */
	// # simple-statistics
	//
	// A simple, literate statistics system. The code below uses the
	// [Javascript module pattern](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth),
	// eventually assigning `simple-statistics` to `ss` in browsers or the
	// `exports` object for node.js
	(function() {
	    var ss = {};
	
	    if (true) {
	        // Assign the `ss` object to exports, so that you can require
	        // it in [node.js](http://nodejs.org/)
	        module.exports = ss;
	    } else {
	        // Otherwise, in a browser, we assign `ss` to the window object,
	        // so you can simply refer to it as `ss`.
	        this.ss = ss;
	    }
	
	    // # [Linear Regression](http://en.wikipedia.org/wiki/Linear_regression)
	    //
	    // [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)
	    // is a simple way to find a fitted line
	    // between a set of coordinates.
	    function linear_regression() {
	        var linreg = {},
	            data = [];
	
	        // Assign data to the model. Data is assumed to be an array.
	        linreg.data = function(x) {
	            if (!arguments.length) return data;
	            data = x.slice();
	            return linreg;
	        };
	
	        // Calculate the slope and y-intercept of the regression line
	        // by calculating the least sum of squares
	        linreg.mb = function() {
	            var m, b;
	
	            // Store data length in a local variable to reduce
	            // repeated object property lookups
	            var data_length = data.length;
	
	            //if there's only one point, arbitrarily choose a slope of 0
	            //and a y-intercept of whatever the y of the initial point is
	            if (data_length === 1) {
	                m = 0;
	                b = data[0][1];
	            } else {
	                // Initialize our sums and scope the `m` and `b`
	                // variables that define the line.
	                var sum_x = 0, sum_y = 0,
	                    sum_xx = 0, sum_xy = 0;
	
	                // Use local variables to grab point values
	                // with minimal object property lookups
	                var point, x, y;
	
	                // Gather the sum of all x values, the sum of all
	                // y values, and the sum of x^2 and (x*y) for each
	                // value.
	                //
	                // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy
	                for (var i = 0; i < data_length; i++) {
	                    point = data[i];
	                    x = point[0];
	                    y = point[1];
	
	                    sum_x += x;
	                    sum_y += y;
	
	                    sum_xx += x * x;
	                    sum_xy += x * y;
	                }
	
	                // `m` is the slope of the regression line
	                m = ((data_length * sum_xy) - (sum_x * sum_y)) /
	                    ((data_length * sum_xx) - (sum_x * sum_x));
	
	                // `b` is the y-intercept of the line.
	                b = (sum_y / data_length) - ((m * sum_x) / data_length);
	            }
	
	            // Return both values as an object.
	            return { m: m, b: b };
	        };
	
	        // a shortcut for simply getting the slope of the regression line
	        linreg.m = function() {
	            return linreg.mb().m;
	        };
	
	        // a shortcut for simply getting the y-intercept of the regression
	        // line.
	        linreg.b = function() {
	            return linreg.mb().b;
	        };
	
	        // ## Fitting The Regression Line
	        //
	        // This is called after `.data()` and returns the
	        // equation `y = f(x)` which gives the position
	        // of the regression line at each point in `x`.
	        linreg.line = function() {
	
	            // Get the slope, `m`, and y-intercept, `b`, of the line.
	            var mb = linreg.mb(),
	                m = mb.m,
	                b = mb.b;
	
	            // Return a function that computes a `y` value for each
	            // x value it is given, based on the values of `b` and `a`
	            // that we just computed.
	            return function(x) {
	                return b + (m * x);
	            };
	        };
	
	        return linreg;
	    }
	
	    // # [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)
	    //
	    // The r-squared value of data compared with a function `f`
	    // is the sum of the squared differences between the prediction
	    // and the actual value.
	    function r_squared(data, f) {
	        if (data.length < 2) return 1;
	
	        // Compute the average y value for the actual
	        // data set in order to compute the
	        // _total sum of squares_
	        var sum = 0, average;
	        for (var i = 0; i < data.length; i++) {
	            sum += data[i][1];
	        }
	        average = sum / data.length;
	
	        // Compute the total sum of squares - the
	        // squared difference between each point
	        // and the average of all points.
	        var sum_of_squares = 0;
	        for (var j = 0; j < data.length; j++) {
	            sum_of_squares += Math.pow(average - data[j][1], 2);
	        }
	
	        // Finally estimate the error: the squared
	        // difference between the estimate and the actual data
	        // value at each point.
	        var err = 0;
	        for (var k = 0; k < data.length; k++) {
	            err += Math.pow(data[k][1] - f(data[k][0]), 2);
	        }
	
	        // As the error grows larger, its ratio to the
	        // sum of squares increases and the r squared
	        // value grows lower.
	        return 1 - (err / sum_of_squares);
	    }
	
	
	    // # [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)
	    //
	    // This is a naïve bayesian classifier that takes
	    // singly-nested objects.
	    function bayesian() {
	        // The `bayes_model` object is what will be exposed
	        // by this closure, with all of its extended methods, and will
	        // have access to all scope variables, like `total_count`.
	        var bayes_model = {},
	            // The number of items that are currently
	            // classified in the model
	            total_count = 0,
	            // Every item classified in the model
	            data = {};
	
	        // ## Train
	        // Train the classifier with a new item, which has a single
	        // dimension of Javascript literal keys and values.
	        bayes_model.train = function(item, category) {
	            // If the data object doesn't have any values
	            // for this category, create a new object for it.
	            if (!data[category]) data[category] = {};
	
	            // Iterate through each key in the item.
	            for (var k in item) {
	                var v = item[k];
	                // Initialize the nested object `data[category][k][item[k]]`
	                // with an object of keys that equal 0.
	                if (data[category][k] === undefined) data[category][k] = {};
	                if (data[category][k][v] === undefined) data[category][k][v] = 0;
	
	                // And increment the key for this key/value combination.
	                data[category][k][item[k]]++;
	            }
	            // Increment the number of items classified
	            total_count++;
	        };
	
	        // ## Score
	        // Generate a score of how well this item matches all
	        // possible categories based on its attributes
	        bayes_model.score = function(item) {
	            // Initialize an empty array of odds per category.
	            var odds = {}, category;
	            // Iterate through each key in the item,
	            // then iterate through each category that has been used
	            // in previous calls to `.train()`
	            for (var k in item) {
	                var v = item[k];
	                for (category in data) {
	                    // Create an empty object for storing key - value combinations
	                    // for this category.
	                    if (odds[category] === undefined) odds[category] = {};
	
	                    // If this item doesn't even have a property, it counts for nothing,
	                    // but if it does have the property that we're looking for from
	                    // the item to categorize, it counts based on how popular it is
	                    // versus the whole population.
	                    if (data[category][k]) {
	                        odds[category][k + '_' + v] = (data[category][k][v] || 0) / total_count;
	                    } else {
	                        odds[category][k + '_' + v] = 0;
	                    }
	                }
	            }
	
	            // Set up a new object that will contain sums of these odds by category
	            var odds_sums = {};
	
	            for (category in odds) {
	                // Tally all of the odds for each category-combination pair -
	                // the non-existence of a category does not add anything to the
	                // score.
	                for (var combination in odds[category]) {
	                    if (odds_sums[category] === undefined) odds_sums[category] = 0;
	                    odds_sums[category] += odds[category][combination];
	                }
	            }
	
	            return odds_sums;
	        };
	
	        // Return the completed model.
	        return bayes_model;
	    }
	
	    // # sum
	    //
	    // is simply the result of adding all numbers
	    // together, starting from zero.
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function sum(x) {
	        var value = 0;
	        for (var i = 0; i < x.length; i++) {
	            value += x[i];
	        }
	        return value;
	    }
	
	    // # mean
	    //
	    // is the sum over the number of values
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function mean(x) {
	        // The mean of no numbers is null
	        if (x.length === 0) return null;
	
	        return sum(x) / x.length;
	    }
	
	    // # geometric mean
	    //
	    // a mean function that is more useful for numbers in different
	    // ranges.
	    //
	    // this is the nth root of the input numbers multiplied by each other
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function geometric_mean(x) {
	        // The mean of no numbers is null
	        if (x.length === 0) return null;
	
	        // the starting value.
	        var value = 1;
	
	        for (var i = 0; i < x.length; i++) {
	            // the geometric mean is only valid for positive numbers
	            if (x[i] <= 0) return null;
	
	            // repeatedly multiply the value by each number
	            value *= x[i];
	        }
	
	        return Math.pow(value, 1 / x.length);
	    }
	
	
	    // # harmonic mean
	    //
	    // a mean function typically used to find the average of rates
	    //
	    // this is the reciprocal of the arithmetic mean of the reciprocals
	    // of the input numbers
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function harmonic_mean(x) {
	        // The mean of no numbers is null
	        if (x.length === 0) return null;
	
	        var reciprocal_sum = 0;
	
	        for (var i = 0; i < x.length; i++) {
	            // the harmonic mean is only valid for positive numbers
	            if (x[i] <= 0) return null;
	
	            reciprocal_sum += 1 / x[i];
	        }
	
	        // divide n by the the reciprocal sum
	        return x.length / reciprocal_sum;
	    }
	
	    // root mean square (RMS)
	    //
	    // a mean function used as a measure of the magnitude of a set
	    // of numbers, regardless of their sign
	    //
	    // this is the square root of the mean of the squares of the 
	    // input numbers
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function root_mean_square(x) {
	        if (x.length === 0) return null;
	
	        var sum_of_squares = 0;
	        for (var i = 0; i < x.length; i++) {
	            sum_of_squares += Math.pow(x[i], 2);
	        }
	
	        return Math.sqrt(sum_of_squares / x.length);
	    }
	
	    // # min
	    //
	    // This is simply the minimum number in the set.
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function min(x) {
	        var value;
	        for (var i = 0; i < x.length; i++) {
	            // On the first iteration of this loop, min is
	            // undefined and is thus made the minimum element in the array
	            if (x[i] < value || value === undefined) value = x[i];
	        }
	        return value;
	    }
	
	    // # max
	    //
	    // This is simply the maximum number in the set.
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function max(x) {
	        var value;
	        for (var i = 0; i < x.length; i++) {
	            // On the first iteration of this loop, max is
	            // undefined and is thus made the maximum element in the array
	            if (x[i] > value || value === undefined) value = x[i];
	        }
	        return value;
	    }
	
	    // # [variance](http://en.wikipedia.org/wiki/Variance)
	    //
	    // is the sum of squared deviations from the mean
	    //
	    // depends on `mean()`
	    function variance(x) {
	        // The variance of no numbers is null
	        if (x.length === 0) return null;
	
	        var mean_value = mean(x),
	            deviations = [];
	
	        // Make a list of squared deviations from the mean.
	        for (var i = 0; i < x.length; i++) {
	            deviations.push(Math.pow(x[i] - mean_value, 2));
	        }
	
	        // Find the mean value of that list
	        return mean(deviations);
	    }
	
	    // # [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)
	    //
	    // is just the square root of the variance.
	    //
	    // depends on `variance()`
	    function standard_deviation(x) {
	        // The standard deviation of no numbers is null
	        if (x.length === 0) return null;
	
	        return Math.sqrt(variance(x));
	    }
	
	    // The sum of deviations to the Nth power.
	    // When n=2 it's the sum of squared deviations.
	    // When n=3 it's the sum of cubed deviations.
	    //
	    // depends on `mean()`
	    function sum_nth_power_deviations(x, n) {
	        var mean_value = mean(x),
	            sum = 0;
	
	        for (var i = 0; i < x.length; i++) {
	            sum += Math.pow(x[i] - mean_value, n);
	        }
	
	        return sum;
	    }
	
	    // # [variance](http://en.wikipedia.org/wiki/Variance)
	    //
	    // is the sum of squared deviations from the mean
	    //
	    // depends on `sum_nth_power_deviations`
	    function sample_variance(x) {
	        // The variance of no numbers is null
	        if (x.length <= 1) return null;
	
	        var sum_squared_deviations_value = sum_nth_power_deviations(x, 2);
	
	        // Find the mean value of that list
	        return sum_squared_deviations_value / (x.length - 1);
	    }
	
	    // # [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)
	    //
	    // is just the square root of the variance.
	    //
	    // depends on `sample_variance()`
	    function sample_standard_deviation(x) {
	        // The standard deviation of no numbers is null
	        if (x.length <= 1) return null;
	
	        return Math.sqrt(sample_variance(x));
	    }
	
	    // # [covariance](http://en.wikipedia.org/wiki/Covariance)
	    //
	    // sample covariance of two datasets:
	    // how much do the two datasets move together?
	    // x and y are two datasets, represented as arrays of numbers.
	    //
	    // depends on `mean()`
	    function sample_covariance(x, y) {
	
	        // The two datasets must have the same length which must be more than 1
	        if (x.length <= 1 || x.length != y.length){
	            return null;
	        }
	
	        // determine the mean of each dataset so that we can judge each
	        // value of the dataset fairly as the difference from the mean. this
	        // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance
	        // does not suffer because of the difference in absolute values
	        var xmean = mean(x),
	            ymean = mean(y),
	            sum = 0;
	
	        // for each pair of values, the covariance increases when their
	        // difference from the mean is associated - if both are well above
	        // or if both are well below
	        // the mean, the covariance increases significantly.
	        for (var i = 0; i < x.length; i++){
	            sum += (x[i] - xmean) * (y[i] - ymean);
	        }
	
	        // the covariance is weighted by the length of the datasets.
	        return sum / (x.length - 1);
	    }
	
	    // # [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence)
	    //
	    // Gets a measure of how correlated two datasets are, between -1 and 1
	    //
	    // depends on `sample_standard_deviation()` and `sample_covariance()`
	    function sample_correlation(x, y) {
	        var cov = sample_covariance(x, y),
	            xstd = sample_standard_deviation(x),
	            ystd = sample_standard_deviation(y);
	
	        if (cov === null || xstd === null || ystd === null) {
	            return null;
	        }
	
	        return cov / xstd / ystd;
	    }
	
	    // # [median](http://en.wikipedia.org/wiki/Median)
	    //
	    // The middle number of a list. This is often a good indicator of 'the middle'
	    // when there are outliers that skew the `mean()` value.
	    function median(x) {
	        // The median of an empty list is null
	        if (x.length === 0) return null;
	
	        // Sorting the array makes it easy to find the center, but
	        // use `.slice()` to ensure the original array `x` is not modified
	        var sorted = x.slice().sort(function (a, b) { return a - b; });
	
	        // If the length of the list is odd, it's the central number
	        if (sorted.length % 2 === 1) {
	            return sorted[(sorted.length - 1) / 2];
	        // Otherwise, the median is the average of the two numbers
	        // at the center of the list
	        } else {
	            var a = sorted[(sorted.length / 2) - 1];
	            var b = sorted[(sorted.length / 2)];
	            return (a + b) / 2;
	        }
	    }
	
	    // # [mode](http://bit.ly/W5K4Yt)
	    //
	    // The mode is the number that appears in a list the highest number of times.
	    // There can be multiple modes in a list: in the event of a tie, this
	    // algorithm will return the most recently seen mode.
	    //
	    // This implementation is inspired by [science.js](https://github.com/jasondavies/science.js/blob/master/src/stats/mode.js)
	    //
	    // This runs on `O(n)`, linear time in respect to the array
	    function mode(x) {
	
	        // Handle edge cases:
	        // The median of an empty list is null
	        if (x.length === 0) return null;
	        else if (x.length === 1) return x[0];
	
	        // Sorting the array lets us iterate through it below and be sure
	        // that every time we see a new number it's new and we'll never
	        // see the same number twice
	        var sorted = x.slice().sort(function (a, b) { return a - b; });
	
	        // This assumes it is dealing with an array of size > 1, since size
	        // 0 and 1 are handled immediately. Hence it starts at index 1 in the
	        // array.
	        var last = sorted[0],
	            // store the mode as we find new modes
	            value,
	            // store how many times we've seen the mode
	            max_seen = 0,
	            // how many times the current candidate for the mode
	            // has been seen
	            seen_this = 1;
	
	        // end at sorted.length + 1 to fix the case in which the mode is
	        // the highest number that occurs in the sequence. the last iteration
	        // compares sorted[i], which is undefined, to the highest number
	        // in the series
	        for (var i = 1; i < sorted.length + 1; i++) {
	            // we're seeing a new number pass by
	            if (sorted[i] !== last) {
	                // the last number is the new mode since we saw it more
	                // often than the old one
	                if (seen_this > max_seen) {
	                    max_seen = seen_this;
	                    value = last;
	                }
	                seen_this = 1;
	                last = sorted[i];
	            // if this isn't a new number, it's one more occurrence of
	            // the potential mode
	            } else { seen_this++; }
	        }
	        return value;
	    }
	
	    // # [t-test](http://en.wikipedia.org/wiki/Student's_t-test)
	    //
	    // This is to compute a one-sample t-test, comparing the mean
	    // of a sample to a known value, x.
	    //
	    // in this case, we're trying to determine whether the
	    // population mean is equal to the value that we know, which is `x`
	    // here. usually the results here are used to look up a
	    // [p-value](http://en.wikipedia.org/wiki/P-value), which, for
	    // a certain level of significance, will let you determine that the
	    // null hypothesis can or cannot be rejected.
	    //
	    // Depends on `standard_deviation()` and `mean()`
	    function t_test(sample, x) {
	        // The mean of the sample
	        var sample_mean = mean(sample);
	
	        // The standard deviation of the sample
	        var sd = standard_deviation(sample);
	
	        // Square root the length of the sample
	        var rootN = Math.sqrt(sample.length);
	
	        // Compute the known value against the sample,
	        // returning the t value
	        return (sample_mean - x) / (sd / rootN);
	    }
	
	    // # [2-sample t-test](http://en.wikipedia.org/wiki/Student's_t-test)
	    //
	    // This is to compute two sample t-test.
	    // Tests whether "mean(X)-mean(Y) = difference", (
	    // in the most common case, we often have `difference == 0` to test if two samples
	    // are likely to be taken from populations with the same mean value) with
	    // no prior knowledge on standard deviations of both samples
	    // other than the fact that they have the same standard deviation.
	    //
	    // Usually the results here are used to look up a
	    // [p-value](http://en.wikipedia.org/wiki/P-value), which, for
	    // a certain level of significance, will let you determine that the
	    // null hypothesis can or cannot be rejected.
	    //
	    // `diff` can be omitted if it equals 0.
	    //
	    // [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)
	    // a null hypothesis that the two populations that have been sampled into
	    // `sample_x` and `sample_y` are equal to each other.
	    //
	    // Depends on `sample_variance()` and `mean()`
	    function t_test_two_sample(sample_x, sample_y, difference) {
	        var n = sample_x.length,
	            m = sample_y.length;
	
	        // If either sample doesn't actually have any values, we can't
	        // compute this at all, so we return `null`.
	        if (!n || !m) return null ;
	
	        // default difference (mu) is zero
	        if (!difference) difference = 0;
	
	        var meanX = mean(sample_x),
	            meanY = mean(sample_y);
	
	        var weightedVariance = ((n - 1) * sample_variance(sample_x) +
	            (m - 1) * sample_variance(sample_y)) / (n + m - 2);
	
	        return (meanX - meanY - difference) /
	            Math.sqrt(weightedVariance * (1 / n + 1 / m));
	    }
	
	    // # chunk
	    //
	    // Split an array into chunks of a specified size. This function
	    // has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)
	    // function, and thus will insert smaller-sized chunks at the end if
	    // the input size is not divisible by the chunk size.
	    //
	    // `sample` is expected to be an array, and `chunkSize` a number.
	    // The `sample` array can contain any kind of data.
	    function chunk(sample, chunkSize) {
	
	        // a list of result chunks, as arrays in an array
	        var output = [];
	
	        // `chunkSize` must be zero or higher - otherwise the loop below,
	        // in which we call `start += chunkSize`, will loop infinitely.
	        // So, we'll detect and return null in that case to indicate
	        // invalid input.
	        if (chunkSize <= 0) {
	            return null;
	        }
	
	        // `start` is the index at which `.slice` will start selecting
	        // new array elements
	        for (var start = 0; start < sample.length; start += chunkSize) {
	
	            // for each chunk, slice that part of the array and add it
	            // to the output. The `.slice` function does not change
	            // the original array.
	            output.push(sample.slice(start, start + chunkSize));
	        }
	        return output;
	    }
	
	    // # shuffle_in_place
	    //
	    // A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
	    // in-place - which means that it will change the order of the original
	    // array by reference.
	    function shuffle_in_place(sample, randomSource) {
	
	        // a custom random number source can be provided if you want to use
	        // a fixed seed or another random number generator, like
	        // [random-js](https://www.npmjs.org/package/random-js)
	        randomSource = randomSource || Math.random;
	
	        // store the current length of the sample to determine
	        // when no elements remain to shuffle.
	        var length = sample.length;
	
	        // temporary is used to hold an item when it is being
	        // swapped between indices.
	        var temporary;
	
	        // The index to swap at each stage.
	        var index;
	
	        // While there are still items to shuffle
	        while (length > 0) {
	            // chose a random index within the subset of the array
	            // that is not yet shuffled
	            index = Math.floor(randomSource() * length--);
	
	            // store the value that we'll move temporarily
	            temporary = sample[length];
	
	            // swap the value at `sample[length]` with `sample[index]`
	            sample[length] = sample[index];
	            sample[index] = temporary;
	        }
	
	        return sample;
	    }
	
	    // # shuffle
	    //
	    // A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
	    // is a fast way to create a random permutation of a finite set.
	    function shuffle(sample, randomSource) {
	        // slice the original array so that it is not modified
	        sample = sample.slice();
	
	        // and then shuffle that shallow-copied array, in place
	        return shuffle_in_place(sample.slice(), randomSource);
	    }
	
	    // # sample
	    //
	    // Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)
	    // from a given array of `n` elements.
	    function sample(array, n, randomSource) {
	        // shuffle the original array using a fisher-yates shuffle
	        var shuffled = shuffle(array, randomSource);
	
	        // and then return a subset of it - the first `n` elements.
	        return shuffled.slice(0, n);
	    }
	
	    // # quantile
	    //
	    // This is a population quantile, since we assume to know the entire
	    // dataset in this library. Thus I'm trying to follow the
	    // [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)
	    // algorithm from wikipedia.
	    //
	    // Sample is a one-dimensional array of numbers,
	    // and p is either a decimal number from 0 to 1 or an array of decimal
	    // numbers from 0 to 1.
	    // In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing
	    // with decimal values.
	    // When p is an array, the result of the function is also an array containing the appropriate
	    // quantiles in input order
	    function quantile(sample, p) {
	
	        // We can't derive quantiles from an empty list
	        if (sample.length === 0) return null;
	
	        // Sort a copy of the array. We'll need a sorted array to index
	        // the values in sorted order.
	        var sorted = sample.slice().sort(function (a, b) { return a - b; });
	
	        if (p.length) {
	            // Initialize the result array
	            var results = [];
	            // For each requested quantile
	            for (var i = 0; i < p.length; i++) {
	                results[i] = quantile_sorted(sorted, p[i]);
	            }
	            return results;
	        } else {
	            return quantile_sorted(sorted, p);
	        }
	    }
	
	    // # quantile
	    //
	    // This is the internal implementation of quantiles: when you know
	    // that the order is sorted, you don't need to re-sort it, and the computations
	    // are much faster.
	    function quantile_sorted(sample, p) {
	        var idx = (sample.length) * p;
	        if (p < 0 || p > 1) {
	            return null;
	        } else if (p === 1) {
	            // If p is 1, directly return the last element
	            return sample[sample.length - 1];
	        } else if (p === 0) {
	            // If p is 0, directly return the first element
	            return sample[0];
	        } else if (idx % 1 !== 0) {
	            // If p is not integer, return the next element in array
	            return sample[Math.ceil(idx) - 1];
	        } else if (sample.length % 2 === 0) {
	            // If the list has even-length, we'll take the average of this number
	            // and the next value, if there is one
	            return (sample[idx - 1] + sample[idx]) / 2;
	        } else {
	            // Finally, in the simple case of an integer value
	            // with an odd-length list, return the sample value at the index.
	            return sample[idx];
	        }
	    }
	
	    // # [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range)
	    //
	    // A measure of statistical dispersion, or how scattered, spread, or
	    // concentrated a distribution is. It's computed as the difference between
	    // the third quartile and first quartile.
	    function iqr(sample) {
	        // We can't derive quantiles from an empty list
	        if (sample.length === 0) return null;
	
	        // Interquartile range is the span between the upper quartile,
	        // at `0.75`, and lower quartile, `0.25`
	        return quantile(sample, 0.75) - quantile(sample, 0.25);
	    }
	
	    // # [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation)
	    //
	    // The Median Absolute Deviation (MAD) is a robust measure of statistical
	    // dispersion. It is more resilient to outliers than the standard deviation.
	    function mad(x) {
	        // The mad of nothing is null
	        if (!x || x.length === 0) return null;
	
	        var median_value = median(x),
	            median_absolute_deviations = [];
	
	        // Make a list of absolute deviations from the median
	        for (var i = 0; i < x.length; i++) {
	            median_absolute_deviations.push(Math.abs(x[i] - median_value));
	        }
	
	        // Find the median value of that list
	        return median(median_absolute_deviations);
	    }
	
	    // ## Compute Matrices for Jenks
	    //
	    // Compute the matrices required for Jenks breaks. These matrices
	    // can be used for any classing of data with `classes <= n_classes`
	    function jenksMatrices(data, n_classes) {
	
	        // in the original implementation, these matrices are referred to
	        // as `LC` and `OP`
	        //
	        // * lower_class_limits (LC): optimal lower class limits
	        // * variance_combinations (OP): optimal variance combinations for all classes
	        var lower_class_limits = [],
	            variance_combinations = [],
	            // loop counters
	            i, j,
	            // the variance, as computed at each step in the calculation
	            variance = 0;
	
	        // Initialize and fill each matrix with zeroes
	        for (i = 0; i < data.length + 1; i++) {
	            var tmp1 = [], tmp2 = [];
	            // despite these arrays having the same values, we need
	            // to keep them separate so that changing one does not change
	            // the other
	            for (j = 0; j < n_classes + 1; j++) {
	                tmp1.push(0);
	                tmp2.push(0);
	            }
	            lower_class_limits.push(tmp1);
	            variance_combinations.push(tmp2);
	        }
	
	        for (i = 1; i < n_classes + 1; i++) {
	            lower_class_limits[1][i] = 1;
	            variance_combinations[1][i] = 0;
	            // in the original implementation, 9999999 is used but
	            // since Javascript has `Infinity`, we use that.
	            for (j = 2; j < data.length + 1; j++) {
	                variance_combinations[j][i] = Infinity;
	            }
	        }
	
	        for (var l = 2; l < data.length + 1; l++) {
	
	            // `SZ` originally. this is the sum of the values seen thus
	            // far when calculating variance.
	            var sum = 0,
	                // `ZSQ` originally. the sum of squares of values seen
	                // thus far
	                sum_squares = 0,
	                // `WT` originally. This is the number of
	                w = 0,
	                // `IV` originally
	                i4 = 0;
	
	            // in several instances, you could say `Math.pow(x, 2)`
	            // instead of `x * x`, but this is slower in some browsers
	            // introduces an unnecessary concept.
	            for (var m = 1; m < l + 1; m++) {
	
	                // `III` originally
	                var lower_class_limit = l - m + 1,
	                    val = data[lower_class_limit - 1];
	
	                // here we're estimating variance for each potential classing
	                // of the data, for each potential number of classes. `w`
	                // is the number of data points considered so far.
	                w++;
	
	                // increase the current sum and sum-of-squares
	                sum += val;
	                sum_squares += val * val;
	
	                // the variance at this point in the sequence is the difference
	                // between the sum of squares and the total x 2, over the number
	                // of samples.
	                variance = sum_squares - (sum * sum) / w;
	
	                i4 = lower_class_limit - 1;
	
	                if (i4 !== 0) {
	                    for (j = 2; j < n_classes + 1; j++) {
	                        // if adding this element to an existing class
	                        // will increase its variance beyond the limit, break
	                        // the class at this point, setting the `lower_class_limit`
	                        // at this point.
	                        if (variance_combinations[l][j] >=
	                            (variance + variance_combinations[i4][j - 1])) {
	                            lower_class_limits[l][j] = lower_class_limit;
	                            variance_combinations[l][j] = variance +
	                                variance_combinations[i4][j - 1];
	                        }
	                    }
	                }
	            }
	
	            lower_class_limits[l][1] = 1;
	            variance_combinations[l][1] = variance;
	        }
	
	        // return the two matrices. for just providing breaks, only
	        // `lower_class_limits` is needed, but variances can be useful to
	        // evaluate goodness of fit.
	        return {
	            lower_class_limits: lower_class_limits,
	            variance_combinations: variance_combinations
	        };
	    }
	
	    // ## Pull Breaks Values for Jenks
	    //
	    // the second part of the jenks recipe: take the calculated matrices
	    // and derive an array of n breaks.
	    function jenksBreaks(data, lower_class_limits, n_classes) {
	
	        var k = data.length - 1,
	            kclass = [],
	            countNum = n_classes;
	
	        // the calculation of classes will never include the upper and
	        // lower bounds, so we need to explicitly set them
	        kclass[n_classes] = data[data.length - 1];
	        kclass[0] = data[0];
	
	        // the lower_class_limits matrix is used as indices into itself
	        // here: the `k` variable is reused in each iteration.
	        while (countNum > 1) {
	            kclass[countNum - 1] = data[lower_class_limits[k][countNum] - 2];
	            k = lower_class_limits[k][countNum] - 1;
	            countNum--;
	        }
	
	        return kclass;
	    }
	
	    // # [Jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)
	    //
	    // Implementations: [1](http://danieljlewis.org/files/2010/06/Jenks.pdf) (python),
	    // [2](https://github.com/vvoovv/djeo-jenks/blob/master/main.js) (buggy),
	    // [3](https://github.com/simogeo/geostats/blob/master/lib/geostats.js#L407) (works)
	    //
	    // Depends on `jenksBreaks()` and `jenksMatrices()`
	    function jenks(data, n_classes) {
	
	        if (n_classes > data.length) return null;
	
	        // sort data in numerical order, since this is expected
	        // by the matrices function
	        data = data.slice().sort(function (a, b) { return a - b; });
	
	        // get our basic matrices
	        var matrices = jenksMatrices(data, n_classes),
	            // we only need lower class limits here
	            lower_class_limits = matrices.lower_class_limits;
	
	        // extract n_classes out of the computed matrices
	        return jenksBreaks(data, lower_class_limits, n_classes);
	
	    }
	
	    // # [Skewness](http://en.wikipedia.org/wiki/Skewness)
	    //
	    // A measure of the extent to which a probability distribution of a
	    // real-valued random variable "leans" to one side of the mean.
	    // The skewness value can be positive or negative, or even undefined.
	    //
	    // Implementation is based on the adjusted Fisher-Pearson standardized
	    // moment coefficient, which is the version found in Excel and several
	    // statistical packages including Minitab, SAS and SPSS.
	    //
	    // Depends on `sum_nth_power_deviations()` and `sample_standard_deviation`
	    function sample_skewness(x) {
	        // The skewness of less than three arguments is null
	        if (x.length < 3) return null;
	
	        var n = x.length,
	            cubed_s = Math.pow(sample_standard_deviation(x), 3),
	            sum_cubed_deviations = sum_nth_power_deviations(x, 3);
	
	        return n * sum_cubed_deviations / ((n - 1) * (n - 2) * cubed_s);
	    }
	
	    // # Standard Normal Table
	    // A standard normal table, also called the unit normal table or Z table,
	    // is a mathematical table for the values of Φ (phi), which are the values of
	    // the cumulative distribution function of the normal distribution.
	    // It is used to find the probability that a statistic is observed below,
	    // above, or between values on the standard normal distribution, and by
	    // extension, any normal distribution.
	    //
	    // The probabilities are taken from http://en.wikipedia.org/wiki/Standard_normal_table
	    // The table used is the cumulative, and not cumulative from 0 to mean
	    // (even though the latter has 5 digits precision, instead of 4).
	    var standard_normal_table = [
	        /*  z      0.00    0.01    0.02    0.03    0.04    0.05    0.06    0.07    0.08    0.09 */
	        /* 0.0 */
	        0.5000, 0.5040, 0.5080, 0.5120, 0.5160, 0.5199, 0.5239, 0.5279, 0.5319, 0.5359,
	        /* 0.1 */
	        0.5398, 0.5438, 0.5478, 0.5517, 0.5557, 0.5596, 0.5636, 0.5675, 0.5714, 0.5753,
	        /* 0.2 */
	        0.5793, 0.5832, 0.5871, 0.5910, 0.5948, 0.5987, 0.6026, 0.6064, 0.6103, 0.6141,
	        /* 0.3 */
	        0.6179, 0.6217, 0.6255, 0.6293, 0.6331, 0.6368, 0.6406, 0.6443, 0.6480, 0.6517,
	        /* 0.4 */
	        0.6554, 0.6591, 0.6628, 0.6664, 0.6700, 0.6736, 0.6772, 0.6808, 0.6844, 0.6879,
	        /* 0.5 */
	        0.6915, 0.6950, 0.6985, 0.7019, 0.7054, 0.7088, 0.7123, 0.7157, 0.7190, 0.7224,
	        /* 0.6 */
	        0.7257, 0.7291, 0.7324, 0.7357, 0.7389, 0.7422, 0.7454, 0.7486, 0.7517, 0.7549,
	        /* 0.7 */
	        0.7580, 0.7611, 0.7642, 0.7673, 0.7704, 0.7734, 0.7764, 0.7794, 0.7823, 0.7852,
	        /* 0.8 */
	        0.7881, 0.7910, 0.7939, 0.7967, 0.7995, 0.8023, 0.8051, 0.8078, 0.8106, 0.8133,
	        /* 0.9 */
	        0.8159, 0.8186, 0.8212, 0.8238, 0.8264, 0.8289, 0.8315, 0.8340, 0.8365, 0.8389,
	        /* 1.0 */
	        0.8413, 0.8438, 0.8461, 0.8485, 0.8508, 0.8531, 0.8554, 0.8577, 0.8599, 0.8621,
	        /* 1.1 */
	        0.8643, 0.8665, 0.8686, 0.8708, 0.8729, 0.8749, 0.8770, 0.8790, 0.8810, 0.8830,
	        /* 1.2 */
	        0.8849, 0.8869, 0.8888, 0.8907, 0.8925, 0.8944, 0.8962, 0.8980, 0.8997, 0.9015,
	        /* 1.3 */
	        0.9032, 0.9049, 0.9066, 0.9082, 0.9099, 0.9115, 0.9131, 0.9147, 0.9162, 0.9177,
	        /* 1.4 */
	        0.9192, 0.9207, 0.9222, 0.9236, 0.9251, 0.9265, 0.9279, 0.9292, 0.9306, 0.9319,
	        /* 1.5 */
	        0.9332, 0.9345, 0.9357, 0.9370, 0.9382, 0.9394, 0.9406, 0.9418, 0.9429, 0.9441,
	        /* 1.6 */
	        0.9452, 0.9463, 0.9474, 0.9484, 0.9495, 0.9505, 0.9515, 0.9525, 0.9535, 0.9545,
	        /* 1.7 */
	        0.9554, 0.9564, 0.9573, 0.9582, 0.9591, 0.9599, 0.9608, 0.9616, 0.9625, 0.9633,
	        /* 1.8 */
	        0.9641, 0.9649, 0.9656, 0.9664, 0.9671, 0.9678, 0.9686, 0.9693, 0.9699, 0.9706,
	        /* 1.9 */
	        0.9713, 0.9719, 0.9726, 0.9732, 0.9738, 0.9744, 0.9750, 0.9756, 0.9761, 0.9767,
	        /* 2.0 */
	        0.9772, 0.9778, 0.9783, 0.9788, 0.9793, 0.9798, 0.9803, 0.9808, 0.9812, 0.9817,
	        /* 2.1 */
	        0.9821, 0.9826, 0.9830, 0.9834, 0.9838, 0.9842, 0.9846, 0.9850, 0.9854, 0.9857,
	        /* 2.2 */
	        0.9861, 0.9864, 0.9868, 0.9871, 0.9875, 0.9878, 0.9881, 0.9884, 0.9887, 0.9890,
	        /* 2.3 */
	        0.9893, 0.9896, 0.9898, 0.9901, 0.9904, 0.9906, 0.9909, 0.9911, 0.9913, 0.9916,
	        /* 2.4 */
	        0.9918, 0.9920, 0.9922, 0.9925, 0.9927, 0.9929, 0.9931, 0.9932, 0.9934, 0.9936,
	        /* 2.5 */
	        0.9938, 0.9940, 0.9941, 0.9943, 0.9945, 0.9946, 0.9948, 0.9949, 0.9951, 0.9952,
	        /* 2.6 */
	        0.9953, 0.9955, 0.9956, 0.9957, 0.9959, 0.9960, 0.9961, 0.9962, 0.9963, 0.9964,
	        /* 2.7 */
	        0.9965, 0.9966, 0.9967, 0.9968, 0.9969, 0.9970, 0.9971, 0.9972, 0.9973, 0.9974,
	        /* 2.8 */
	        0.9974, 0.9975, 0.9976, 0.9977, 0.9977, 0.9978, 0.9979, 0.9979, 0.9980, 0.9981,
	        /* 2.9 */
	        0.9981, 0.9982, 0.9982, 0.9983, 0.9984, 0.9984, 0.9985, 0.9985, 0.9986, 0.9986,
	        /* 3.0 */
	        0.9987, 0.9987, 0.9987, 0.9988, 0.9988, 0.9989, 0.9989, 0.9989, 0.9990, 0.9990
	    ];
	
	    // # [Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)
	    //
	    // Since probability tables cannot be
	    // printed for every normal distribution, as there are an infinite variety
	    // of normal distributions, it is common practice to convert a normal to a
	    // standard normal and then use the standard normal table to find probabilities
	    function cumulative_std_normal_probability(z) {
	
	        // Calculate the position of this value.
	        var absZ = Math.abs(z),
	            // Each row begins with a different
	            // significant digit: 0.5, 0.6, 0.7, and so on. So the row is simply
	            // this value's significant digit: 0.567 will be in row 0, so row=0,
	            // 0.643 will be in row 1, so row=10.
	            row = Math.floor(absZ * 10),
	            column = 10 * (Math.floor(absZ * 100) / 10 - Math.floor(absZ * 100 / 10)),
	            index = Math.min((row * 10) + column, standard_normal_table.length - 1);
	
	        // The index we calculate must be in the table as a positive value,
	        // but we still pay attention to whether the input is positive
	        // or negative, and flip the output value as a last step.
	        if (z >= 0) {
	            return standard_normal_table[index];
	        } else {
	            // due to floating-point arithmetic, values in the table with
	            // 4 significant figures can nevertheless end up as repeating
	            // fractions when they're computed here.
	            return +(1 - standard_normal_table[index]).toFixed(4);
	        }
	    }
	
	    // # [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score)
	    //
	    // The standard score is the number of standard deviations an observation
	    // or datum is above or below the mean. Thus, a positive standard score
	    // represents a datum above the mean, while a negative standard score
	    // represents a datum below the mean. It is a dimensionless quantity
	    // obtained by subtracting the population mean from an individual raw
	    // score and then dividing the difference by the population standard
	    // deviation.
	    //
	    // The z-score is only defined if one knows the population parameters;
	    // if one only has a sample set, then the analogous computation with
	    // sample mean and sample standard deviation yields the
	    // Student's t-statistic.
	    function z_score(x, mean, standard_deviation) {
	        return (x - mean) / standard_deviation;
	    }
	
	    // We use `ε`, epsilon, as a stopping criterion when we want to iterate
	    // until we're "close enough".
	    var epsilon = 0.0001;
	
	    // # [Factorial](https://en.wikipedia.org/wiki/Factorial)
	    //
	    // A factorial, usually written n!, is the product of all positive
	    // integers less than or equal to n. Often factorial is implemented
	    // recursively, but this iterative approach is significantly faster
	    // and simpler.
	    function factorial(n) {
	
	        // factorial is mathematically undefined for negative numbers
	        if (n < 0 ) { return null; }
	
	        // typically you'll expand the factorial function going down, like
	        // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,
	        // counting from 2 up to the number in question, and since anything
	        // multiplied by 1 is itself, the loop only needs to start at 2.
	        var accumulator = 1;
	        for (var i = 2; i <= n; i++) {
	            // for each number up to and including the number `n`, multiply
	            // the accumulator my that number.
	            accumulator *= i;
	        }
	        return accumulator;
	    }
	
	    // # Bernoulli Distribution
	    //
	    // The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)
	    // is the probability discrete
	    // distribution of a random variable which takes value 1 with success
	    // probability `p` and value 0 with failure
	    // probability `q` = 1 - `p`. It can be used, for example, to represent the
	    // toss of a coin, where "1" is defined to mean "heads" and "0" is defined
	    // to mean "tails" (or vice versa). It is
	    // a special case of a Binomial Distribution
	    // where `n` = 1.
	    function bernoulli_distribution(p) {
	        // Check that `p` is a valid probability (0 ≤ p ≤ 1)
	        if (p < 0 || p > 1 ) { return null; }
	
	        return binomial_distribution(1, p);
	    }
	
	    // # Binomial Distribution
	    //
	    // The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability
	    // distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields
	    // success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or
	    // Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.
	    function binomial_distribution(trials, probability) {
	        // Check that `p` is a valid probability (0 ≤ p ≤ 1),
	        // that `n` is an integer, strictly positive.
	        if (probability < 0 || probability > 1 ||
	            trials <= 0 || trials % 1 !== 0) {
	            return null;
	        }
	
	        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)
	        function probability_mass(x, trials, probability) {
	            return factorial(trials) /
	                (factorial(x) * factorial(trials - x)) *
	                (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));
	        }
	
	        // We initialize `x`, the random variable, and `accumulator`, an accumulator
	        // for the cumulative distribution function to 0. `distribution_functions`
	        // is the object we'll return with the `probability_of_x` and the
	        // `cumulative_probability_of_x`, as well as the calculated mean &
	        // variance. We iterate until the `cumulative_probability_of_x` is
	        // within `epsilon` of 1.0.
	        var x = 0,
	            cumulative_probability = 0,
	            cells = {};
	
	        // This algorithm iterates through each potential outcome,
	        // until the `cumulative_probability` is very close to 1, at
	        // which point we've defined the vast majority of outcomes
	        do {
	            cells[x] = probability_mass(x, trials, probability);
	            cumulative_probability += cells[x];
	            x++;
	        // when the cumulative_probability is nearly 1, we've calculated
	        // the useful range of this distribution
	        } while (cumulative_probability < 1 - epsilon);
	
	        return cells;
	    }
	
	    // # Poisson Distribution
	    //
	    // The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)
	    // is a discrete probability distribution that expresses the probability
	    // of a given number of events occurring in a fixed interval of time
	    // and/or space if these events occur with a known average rate and
	    // independently of the time since the last event.
	    //
	    // The Poisson Distribution is characterized by the strictly positive
	    // mean arrival or occurrence rate, `λ`.
	    function poisson_distribution(lambda) {
	        // Check that lambda is strictly positive
	        if (lambda <= 0) { return null; }
	
	        // our current place in the distribution
	        var x = 0,
	            // and we keep track of the current cumulative probability, in
	            // order to know when to stop calculating chances.
	            cumulative_probability = 0,
	            // the calculated cells to be returned
	            cells = {};
	
	        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)
	        function probability_mass(x, lambda) {
	            return (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) /
	                factorial(x);
	        }
	
	        // This algorithm iterates through each potential outcome,
	        // until the `cumulative_probability` is very close to 1, at
	        // which point we've defined the vast majority of outcomes
	        do {
	            cells[x] = probability_mass(x, lambda);
	            cumulative_probability += cells[x];
	            x++;
	        // when the cumulative_probability is nearly 1, we've calculated
	        // the useful range of this distribution
	        } while (cumulative_probability < 1 - epsilon);
	
	        return cells;
	    }
	
	    // # Percentage Points of the χ2 (Chi-Squared) Distribution
	    // The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common
	    // chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two
	    // criteria of classification of qualitative data, and in confidence interval estimation for a population standard
	    // deviation of a normal distribution from a sample standard deviation.
	    //
	    // Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, "Probability and Statistics in
	    // Engineering and Management Science", Wiley (1980).
	    var chi_squared_distribution_table = {
	        1: { 0.995:  0.00, 0.99:  0.00, 0.975:  0.00, 0.95:  0.00, 0.9:  0.02, 0.5:  0.45, 0.1:  2.71, 0.05:  3.84, 0.025:  5.02, 0.01:  6.63, 0.005:  7.88 },
	        2: { 0.995:  0.01, 0.99:  0.02, 0.975:  0.05, 0.95:  0.10, 0.9:  0.21, 0.5:  1.39, 0.1:  4.61, 0.05:  5.99, 0.025:  7.38, 0.01:  9.21, 0.005: 10.60 },
	        3: { 0.995:  0.07, 0.99:  0.11, 0.975:  0.22, 0.95:  0.35, 0.9:  0.58, 0.5:  2.37, 0.1:  6.25, 0.05:  7.81, 0.025:  9.35, 0.01: 11.34, 0.005: 12.84 },
	        4: { 0.995:  0.21, 0.99:  0.30, 0.975:  0.48, 0.95:  0.71, 0.9:  1.06, 0.5:  3.36, 0.1:  7.78, 0.05:  9.49, 0.025: 11.14, 0.01: 13.28, 0.005: 14.86 },
	        5: { 0.995:  0.41, 0.99:  0.55, 0.975:  0.83, 0.95:  1.15, 0.9:  1.61, 0.5:  4.35, 0.1:  9.24, 0.05: 11.07, 0.025: 12.83, 0.01: 15.09, 0.005: 16.75 },
	        6: { 0.995:  0.68, 0.99:  0.87, 0.975:  1.24, 0.95:  1.64, 0.9:  2.20, 0.5:  5.35, 0.1: 10.65, 0.05: 12.59, 0.025: 14.45, 0.01: 16.81, 0.005: 18.55 },
	        7: { 0.995:  0.99, 0.99:  1.25, 0.975:  1.69, 0.95:  2.17, 0.9:  2.83, 0.5:  6.35, 0.1: 12.02, 0.05: 14.07, 0.025: 16.01, 0.01: 18.48, 0.005: 20.28 },
	        8: { 0.995:  1.34, 0.99:  1.65, 0.975:  2.18, 0.95:  2.73, 0.9:  3.49, 0.5:  7.34, 0.1: 13.36, 0.05: 15.51, 0.025: 17.53, 0.01: 20.09, 0.005: 21.96 },
	        9: { 0.995:  1.73, 0.99:  2.09, 0.975:  2.70, 0.95:  3.33, 0.9:  4.17, 0.5:  8.34, 0.1: 14.68, 0.05: 16.92, 0.025: 19.02, 0.01: 21.67, 0.005: 23.59 },
	        10: { 0.995:  2.16, 0.99:  2.56, 0.975:  3.25, 0.95:  3.94, 0.9:  4.87, 0.5:  9.34, 0.1: 15.99, 0.05: 18.31, 0.025: 20.48, 0.01: 23.21, 0.005: 25.19 },
	        11: { 0.995:  2.60, 0.99:  3.05, 0.975:  3.82, 0.95:  4.57, 0.9:  5.58, 0.5: 10.34, 0.1: 17.28, 0.05: 19.68, 0.025: 21.92, 0.01: 24.72, 0.005: 26.76 },
	        12: { 0.995:  3.07, 0.99:  3.57, 0.975:  4.40, 0.95:  5.23, 0.9:  6.30, 0.5: 11.34, 0.1: 18.55, 0.05: 21.03, 0.025: 23.34, 0.01: 26.22, 0.005: 28.30 },
	        13: { 0.995:  3.57, 0.99:  4.11, 0.975:  5.01, 0.95:  5.89, 0.9:  7.04, 0.5: 12.34, 0.1: 19.81, 0.05: 22.36, 0.025: 24.74, 0.01: 27.69, 0.005: 29.82 },
	        14: { 0.995:  4.07, 0.99:  4.66, 0.975:  5.63, 0.95:  6.57, 0.9:  7.79, 0.5: 13.34, 0.1: 21.06, 0.05: 23.68, 0.025: 26.12, 0.01: 29.14, 0.005: 31.32 },
	        15: { 0.995:  4.60, 0.99:  5.23, 0.975:  6.27, 0.95:  7.26, 0.9:  8.55, 0.5: 14.34, 0.1: 22.31, 0.05: 25.00, 0.025: 27.49, 0.01: 30.58, 0.005: 32.80 },
	        16: { 0.995:  5.14, 0.99:  5.81, 0.975:  6.91, 0.95:  7.96, 0.9:  9.31, 0.5: 15.34, 0.1: 23.54, 0.05: 26.30, 0.025: 28.85, 0.01: 32.00, 0.005: 34.27 },
	        17: { 0.995:  5.70, 0.99:  6.41, 0.975:  7.56, 0.95:  8.67, 0.9: 10.09, 0.5: 16.34, 0.1: 24.77, 0.05: 27.59, 0.025: 30.19, 0.01: 33.41, 0.005: 35.72 },
	        18: { 0.995:  6.26, 0.99:  7.01, 0.975:  8.23, 0.95:  9.39, 0.9: 10.87, 0.5: 17.34, 0.1: 25.99, 0.05: 28.87, 0.025: 31.53, 0.01: 34.81, 0.005: 37.16 },
	        19: { 0.995:  6.84, 0.99:  7.63, 0.975:  8.91, 0.95: 10.12, 0.9: 11.65, 0.5: 18.34, 0.1: 27.20, 0.05: 30.14, 0.025: 32.85, 0.01: 36.19, 0.005: 38.58 },
	        20: { 0.995:  7.43, 0.99:  8.26, 0.975:  9.59, 0.95: 10.85, 0.9: 12.44, 0.5: 19.34, 0.1: 28.41, 0.05: 31.41, 0.025: 34.17, 0.01: 37.57, 0.005: 40.00 },
	        21: { 0.995:  8.03, 0.99:  8.90, 0.975: 10.28, 0.95: 11.59, 0.9: 13.24, 0.5: 20.34, 0.1: 29.62, 0.05: 32.67, 0.025: 35.48, 0.01: 38.93, 0.005: 41.40 },
	        22: { 0.995:  8.64, 0.99:  9.54, 0.975: 10.98, 0.95: 12.34, 0.9: 14.04, 0.5: 21.34, 0.1: 30.81, 0.05: 33.92, 0.025: 36.78, 0.01: 40.29, 0.005: 42.80 },
	        23: { 0.995:  9.26, 0.99: 10.20, 0.975: 11.69, 0.95: 13.09, 0.9: 14.85, 0.5: 22.34, 0.1: 32.01, 0.05: 35.17, 0.025: 38.08, 0.01: 41.64, 0.005: 44.18 },
	        24: { 0.995:  9.89, 0.99: 10.86, 0.975: 12.40, 0.95: 13.85, 0.9: 15.66, 0.5: 23.34, 0.1: 33.20, 0.05: 36.42, 0.025: 39.36, 0.01: 42.98, 0.005: 45.56 },
	        25: { 0.995: 10.52, 0.99: 11.52, 0.975: 13.12, 0.95: 14.61, 0.9: 16.47, 0.5: 24.34, 0.1: 34.28, 0.05: 37.65, 0.025: 40.65, 0.01: 44.31, 0.005: 46.93 },
	        26: { 0.995: 11.16, 0.99: 12.20, 0.975: 13.84, 0.95: 15.38, 0.9: 17.29, 0.5: 25.34, 0.1: 35.56, 0.05: 38.89, 0.025: 41.92, 0.01: 45.64, 0.005: 48.29 },
	        27: { 0.995: 11.81, 0.99: 12.88, 0.975: 14.57, 0.95: 16.15, 0.9: 18.11, 0.5: 26.34, 0.1: 36.74, 0.05: 40.11, 0.025: 43.19, 0.01: 46.96, 0.005: 49.65 },
	        28: { 0.995: 12.46, 0.99: 13.57, 0.975: 15.31, 0.95: 16.93, 0.9: 18.94, 0.5: 27.34, 0.1: 37.92, 0.05: 41.34, 0.025: 44.46, 0.01: 48.28, 0.005: 50.99 },
	        29: { 0.995: 13.12, 0.99: 14.26, 0.975: 16.05, 0.95: 17.71, 0.9: 19.77, 0.5: 28.34, 0.1: 39.09, 0.05: 42.56, 0.025: 45.72, 0.01: 49.59, 0.005: 52.34 },
	        30: { 0.995: 13.79, 0.99: 14.95, 0.975: 16.79, 0.95: 18.49, 0.9: 20.60, 0.5: 29.34, 0.1: 40.26, 0.05: 43.77, 0.025: 46.98, 0.01: 50.89, 0.005: 53.67 },
	        40: { 0.995: 20.71, 0.99: 22.16, 0.975: 24.43, 0.95: 26.51, 0.9: 29.05, 0.5: 39.34, 0.1: 51.81, 0.05: 55.76, 0.025: 59.34, 0.01: 63.69, 0.005: 66.77 },
	        50: { 0.995: 27.99, 0.99: 29.71, 0.975: 32.36, 0.95: 34.76, 0.9: 37.69, 0.5: 49.33, 0.1: 63.17, 0.05: 67.50, 0.025: 71.42, 0.01: 76.15, 0.005: 79.49 },
	        60: { 0.995: 35.53, 0.99: 37.48, 0.975: 40.48, 0.95: 43.19, 0.9: 46.46, 0.5: 59.33, 0.1: 74.40, 0.05: 79.08, 0.025: 83.30, 0.01: 88.38, 0.005: 91.95 },
	        70: { 0.995: 43.28, 0.99: 45.44, 0.975: 48.76, 0.95: 51.74, 0.9: 55.33, 0.5: 69.33, 0.1: 85.53, 0.05: 90.53, 0.025: 95.02, 0.01: 100.42, 0.005: 104.22 },
	        80: { 0.995: 51.17, 0.99: 53.54, 0.975: 57.15, 0.95: 60.39, 0.9: 64.28, 0.5: 79.33, 0.1: 96.58, 0.05: 101.88, 0.025: 106.63, 0.01: 112.33, 0.005: 116.32 },
	        90: { 0.995: 59.20, 0.99: 61.75, 0.975: 65.65, 0.95: 69.13, 0.9: 73.29, 0.5: 89.33, 0.1: 107.57, 0.05: 113.14, 0.025: 118.14, 0.01: 124.12, 0.005: 128.30 },
	        100: { 0.995: 67.33, 0.99: 70.06, 0.975: 74.22, 0.95: 77.93, 0.9: 82.36, 0.5: 99.33, 0.1: 118.50, 0.05: 124.34, 0.025: 129.56, 0.01: 135.81, 0.005: 140.17 }
	    };
	
	    // # χ2 (Chi-Squared) Goodness-of-Fit Test
	    //
	    // The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)
	    // uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies
	    // (that is, counts of observations), each squared and divided by the number of observations expected given the
	    // hypothesized distribution. The resulting χ2 statistic, `chi_squared`, can be compared to the chi-squared distribution
	    // to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one
	    // takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic
	    // follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty
	    // cells and `c` is the number of estimated parameters for the distribution.
	    function chi_squared_goodness_of_fit(data, distribution_type, significance) {
	        // Estimate from the sample data, a weighted mean.
	        var input_mean = mean(data),
	            // Calculated value of the χ2 statistic.
	            chi_squared = 0,
	            // Degrees of freedom, calculated as (number of class intervals -
	            // number of hypothesized distribution parameters estimated - 1)
	            degrees_of_freedom,
	            // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.
	            // Lose one degree of freedom for estimating `lambda` from the sample data.
	            c = 1,
	            // The hypothesized distribution.
	            // Generate the hypothesized distribution.
	            hypothesized_distribution = distribution_type(input_mean),
	            observed_frequencies = [],
	            expected_frequencies = [],
	            k;
	
	        // Create an array holding a histogram from the sample data, of
	        // the form `{ value: numberOfOcurrences }`
	        for (var i = 0; i < data.length; i++) {
	            if (observed_frequencies[data[i]] === undefined) {
	                observed_frequencies[data[i]] = 0;
	            }
	            observed_frequencies[data[i]]++;
	        }
	
	        // The histogram we created might be sparse - there might be gaps
	        // between values. So we iterate through the histogram, making
	        // sure that instead of undefined, gaps have 0 values.
	        for (i = 0; i < observed_frequencies.length; i++) {
	            if (observed_frequencies[i] === undefined) {
	                observed_frequencies[i] = 0;
	            }
	        }
	
	        // Create an array holding a histogram of expected data given the
	        // sample size and hypothesized distribution.
	        for (k in hypothesized_distribution) {
	            if (k in observed_frequencies) {
	                expected_frequencies[k] = hypothesized_distribution[k] * data.length;
	            }
	        }
	
	        // Working backward through the expected frequencies, collapse classes
	        // if less than three observations are expected for a class.
	        // This transformation is applied to the observed frequencies as well.
	        for (k = expected_frequencies.length - 1; k >= 0; k--) {
	            if (expected_frequencies[k] < 3) {
	                expected_frequencies[k - 1] += expected_frequencies[k];
	                expected_frequencies.pop();
	
	                observed_frequencies[k - 1] += observed_frequencies[k];
	                observed_frequencies.pop();
	            }
	        }
	
	        // Iterate through the squared differences between observed & expected
	        // frequencies, accumulating the `chi_squared` statistic.
	        for (k = 0; k < observed_frequencies.length; k++) {
	            chi_squared += Math.pow(
	                observed_frequencies[k] - expected_frequencies[k], 2) /
	                expected_frequencies[k];
	        }
	
	        // Calculate degrees of freedom for this test and look it up in the
	        // `chi_squared_distribution_table` in order to
	        // accept or reject the goodness-of-fit of the hypothesized distribution.
	        degrees_of_freedom = observed_frequencies.length - c - 1;
	        return chi_squared_distribution_table[degrees_of_freedom][significance] < chi_squared;
	    }
	
	    // # Mixin
	    //
	    // Mixin simple_statistics to a single Array instance if provided
	    // or the Array native object if not. This is an optional
	    // feature that lets you treat simple_statistics as a native feature
	    // of Javascript.
	    function mixin(array) {
	        var support = !!(Object.defineProperty && Object.defineProperties);
	        if (!support) throw new Error('without defineProperty, simple-statistics cannot be mixed in');
	
	        // only methods which work on basic arrays in a single step
	        // are supported
	        var arrayMethods = ['median', 'standard_deviation', 'sum',
	            'sample_skewness',
	            'mean', 'min', 'max', 'quantile', 'geometric_mean',
	            'harmonic_mean', 'root_mean_square'];
	
	        // create a closure with a method name so that a reference
	        // like `arrayMethods[i]` doesn't follow the loop increment
	        function wrap(method) {
	            return function() {
	                // cast any arguments into an array, since they're
	                // natively objects
	                var args = Array.prototype.slice.apply(arguments);
	                // make the first argument the array itself
	                args.unshift(this);
	                // return the result of the ss method
	                return ss[method].apply(ss, args);
	            };
	        }
	
	        // select object to extend
	        var extending;
	        if (array) {
	            // create a shallow copy of the array so that our internal
	            // operations do not change it by reference
	            extending = array.slice();
	        } else {
	            extending = Array.prototype;
	        }
	
	        // for each array function, define a function that gets
	        // the array as the first argument.
	        // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)
	        // because it allows these properties to be non-enumerable:
	        // `for (var in x)` loops will not run into problems with this
	        // implementation.
	        for (var i = 0; i < arrayMethods.length; i++) {
	            Object.defineProperty(extending, arrayMethods[i], {
	                value: wrap(arrayMethods[i]),
	                configurable: true,
	                enumerable: false,
	                writable: true
	            });
	        }
	
	        return extending;
	    }
	
	    ss.linear_regression = linear_regression;
	    ss.standard_deviation = standard_deviation;
	    ss.r_squared = r_squared;
	    ss.median = median;
	    ss.mean = mean;
	    ss.mode = mode;
	    ss.min = min;
	    ss.max = max;
	    ss.sum = sum;
	    ss.quantile = quantile;
	    ss.quantile_sorted = quantile_sorted;
	    ss.iqr = iqr;
	    ss.mad = mad;
	
	    ss.chunk = chunk;
	    ss.shuffle = shuffle;
	    ss.shuffle_in_place = shuffle_in_place;
	
	    ss.sample = sample;
	
	    ss.sample_covariance = sample_covariance;
	    ss.sample_correlation = sample_correlation;
	    ss.sample_variance = sample_variance;
	    ss.sample_standard_deviation = sample_standard_deviation;
	    ss.sample_skewness = sample_skewness;
	
	    ss.geometric_mean = geometric_mean;
	    ss.harmonic_mean = harmonic_mean;
	    ss.root_mean_square = root_mean_square;
	    ss.variance = variance;
	    ss.t_test = t_test;
	    ss.t_test_two_sample = t_test_two_sample;
	
	    // jenks
	    ss.jenksMatrices = jenksMatrices;
	    ss.jenksBreaks = jenksBreaks;
	    ss.jenks = jenks;
	
	    ss.bayesian = bayesian;
	
	    // Distribution-related methods
	    ss.epsilon = epsilon; // We make ε available to the test suite.
	    ss.factorial = factorial;
	    ss.bernoulli_distribution = bernoulli_distribution;
	    ss.binomial_distribution = binomial_distribution;
	    ss.poisson_distribution = poisson_distribution;
	    ss.chi_squared_goodness_of_fit = chi_squared_goodness_of_fit;
	
	    // Normal distribution
	    ss.z_score = z_score;
	    ss.cumulative_std_normal_probability = cumulative_std_normal_probability;
	    ss.standard_normal_table = standard_normal_table;
	
	    // Alias this into its common name
	    ss.average = mean;
	    ss.interquartile_range = iqr;
	    ss.mixin = mixin;
	    ss.median_absolute_deviation = mad;
	    ss.rms = root_mean_square;
	
	})(this);


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 数据集合拓展方法
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(271);
	
	Util.augment(Frame, {
	  /**
	   * 获取行
	   * @param  {Number} index 行的索引
	   * @return {Frame}  行构成的子记录
	   */
	  row: function(index) {
	    var self = this;
	    var names = self.colNames();
	    var rowData = [];
	
	    rowData.push(self._getObject(index, names));
	    return new Frame(rowData, {
	      names: names.slice(0)
	    });
	  },
	  /**
	   * 添加一行数据
	   * @param {Object} obj 添加的数据
	   */
	  addRow: function(obj) {
	    var self = this;
	    var names = self.colNames();
	    var arr = self.arr;
	    Util.each(names, function(name, index) {
	      arr[index].push(obj[name]);
	    });
	  },
	  /**
	   * 获取多个行构成的集合
	   * @param  {Array} indexArr 行的索引
	   * @return {Frame}  行构成的子记录
	   */
	  rows: function(indexArr) {
	    var self = this;
	    var names = self.colNames();
	    var data = self.data;
	    var rowData = [];
	
	    if (data) {
	      for (var i = 0; i < indexArr.length; i++) {
	        rowData.push(self._getObject(i, names));
	      }
	    }
	    return new Frame(rowData, {
	      names: names.slice(0)
	    });
	  },
	  // 获取数组
	  _getColArray: function(names, startRow, endRow) {
	    var self = this;
	    var arr = self.arr;
	    var totalNames = self.colNames();
	    var rst = [];
	    var rowCount = self.rowCount();
	    var indexs = Util.map(names, function(name) {
	      return Util.indexOf(totalNames, name);
	    });
	
	    startRow = startRow || 0;
	    endRow = Util.isNull(endRow) ? rowCount : endRow;
	
	    for (var j = 0; j < indexs.length; j++) {
	      var temp = arr[indexs[j]] || [];
	      var subArray = temp.slice(startRow, endRow);
	      rst.push(subArray);
	    }
	
	    return rst;
	  },
	  /**
	   * 获取列构成的集合
	   * @param  {Number|String} index 列的索引或者name
	   * @return {Frame} 列数据集合
	   */
	  col: function(index) {
	    var self = this;
	    var names = self.colNames();
	    var name;
	
	    if (Util.isString(index)) {
	      name = index;
	      index = Util.indexOf(names, name);
	    } else {
	      name = names[index];
	    }
	    var data = self._getColArray([name]);
	
	    return new Frame(data, {
	      names: [name]
	    });
	  },
	  /**
	   * 获取多个列组成的集合
	   * @param  {Array} names 集合数组
	   * @return {[type]}       [description]
	   */
	  cols: function(names) {
	    var self = this;
	    // 转换数字和字符串
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (Util.isNumber(name)) {
	        names[i] = self.names[name];
	      }
	    }
	
	    var data = self._getColArray(names);
	    return new Frame(data, {
	      names: names
	    });
	  },
	  /**
	   * 获取单元格数据
	   * @param  {Number} rowIndex 行
	   * @param  {Number} colInex  列
	   * @return {*}  行列对应的数据
	   */
	  cell: function(rowIndex, colIndex) {
	    var self = this;
	    var names = self.colNames();
	    var arr = self.arr;
	    if (Util.isString(colIndex)) {
	      colIndex = Util.indexOf(names, colIndex);
	    }
	    return arr[colIndex] ? arr[colIndex][rowIndex] : undefined;
	  },
	  /**
	   * 复制一个Frame
	   * @return {Frame} 复制的frame
	   */
	  clone: function() {
	    var self = this;
	    var names = self.colNames();
	    var data = self.toJSON();
	    return new Frame(data, {
	      names: names.slice(0) // 复制数组，而不是传入引用
	    });
	  },
	  /**
	   * 根据行列获取子集合
	   * @param  {Number} startCol 开始列
	   * @param  {Number} endCol   结束列
	   * @param  {Number} startRow 开始行
	   * @param  {Number} endRow   结束行
	   * @return {Frame}  新的数据集合
	   */
	  sub: function(startCol, endCol, startRow, endRow) {
	    var self = this;
	    var data;
	    var names = self.colNames();
	
	    startCol = startCol || 0;
	    if (endCol) {
	      endCol += 1;
	    } else {
	      endCol = undefined;
	    }
	    names = names.slice(startCol, endCol);
	    if (!Util.isNull(startRow)) {
	      if (endRow) {
	        endRow += 1;
	      } else {
	        endRow = self.rowCount - 1;
	      }
	    }
	    data = self._getColArray(names, startRow, endRow);
	    return new Frame(data, {
	      names: names
	    });
	  },
	  // 覆写toString()方法
	  toString: function() {
	    var self = this;
	    var strArr = [];
	    var arr = self.arr;
	    var names = self.colNames();
	    var count = self.rowCount();
	
	    strArr.push(names.join('\t'));
	    for (var i = 0; i < count; i++) {
	      var sub = [];
	      for (var j = 0; j < arr.length; j++) {
	        sub.push(arr[j][i]);
	      }
	      strArr.push(sub.join('\t'));
	    }
	
	    return strArr.join('\n');
	  },
	  /**
	   * 将整个数据集合使用字符串输出，方便console.log
	   * @return {String} 数据集的字符串
	   */
	  s: function() {
	    return this.toString();
	  }
	});
	
	module.exports = Frame;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 初始化chart 需要的所有辅助类
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	
	'use strict';
	
	var CoordAssist = __webpack_require__(278);
	var AxisAssist = __webpack_require__(296);
	var ScaleAssist = __webpack_require__(297);
	var TooltipAssist = __webpack_require__(315);
	var LegendAssist = __webpack_require__(316);
	var GuideAssist = __webpack_require__(331);
	var EventAssist = __webpack_require__(342);
	
	var Assists = {
	  // 初始化事件辅助类
	  initEvent: function(chart) {
	    var eventAssist = new EventAssist({
	      chart: chart
	    });
	    eventAssist.bindEvents();
	    chart.set('eventAssist', eventAssist);
	  },
	  // 初始化度量辅助类
	  initScale: function(chart) {
	    var scaleAssist = new ScaleAssist();
	    chart.set('scaleAssist', scaleAssist);
	  },
	  // 初始化坐标系辅助类
	  initCoord: function(chart) {
	    var coordAssist = new CoordAssist({
	      chart: chart
	    });
	    chart.set('coordAssist', coordAssist);
	  },
	  // 初始化坐标轴辅助类
	  initAxis: function(chart) {
	    var axisAssist = new AxisAssist({
	      chart: chart
	    });
	    chart.set('axisAssist', axisAssist);
	  },
	  // 初始化图例辅助类
	  initLegend: function(chart) {
	    var legendAssist = new LegendAssist({
	      chart: chart
	    });
	    chart.set('legendAssist', legendAssist);
	  },
	  // 初始化 tooltip 辅助类
	  initTooltip: function(chart) {
	    var tooltipAssist = new TooltipAssist({
	      chart: chart
	    });
	    chart.set('tooltipAssist', tooltipAssist);
	  },
	  // 初始化guide辅助类
	  initGuide: function(chart) {
	    var options = chart.get('options');
	    if (!options.guides) {
	      options.guides = [];
	    }
	    var guideAssist = new GuideAssist({
	      options: options.guides
	    });
	    chart.set('guideAssist', guideAssist);
	  }
	};
	
	module.exports = Assists;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 产生坐标系的辅助类
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Coord = __webpack_require__(279);
	
	var CoordAssist = function(cfg) {
	  Util.mix(this, cfg);
	  this.resetActions();
	};
	
	Util.augment(CoordAssist, {
	  type: 'rect',
	  chart: null,
	  actions: null,
	
	  _getCoordOptions: function() {
	    var chart = this.chart;
	    if (!chart.get('options').coord) {
	      chart._setOptions('coord', {});
	    }
	    return chart.get('options').coord;
	  },
	  // 执行对应的转换
	  _execActions: function(coord) {
	    var coordOption = this._getCoordOptions();
	    var actions = coordOption.actions;
	    Util.each(actions, function(action) {
	      var m = action[0];
	      coord[m](action[1], action[2]);
	    });
	  },
	  // 是否存在指定的坐标系操作
	  hasAction: function(actionName) {
	    var actions = this.actions;
	    var rst = false;
	    Util.each(actions, function(action) {
	      if (actionName === action[0]) {
	        rst = true;
	        return false;
	      }
	    });
	    return rst;
	  },
	  /**
	   * 获取坐标系的构造函数
	   * @return {Function} 坐标系的构造函数
	   */
	  createCoord: function(start, end) {
	    var options = this.chart.get('options');
	    var coordOption = options.coord;
	    var self = this;
	    var type = coordOption && coordOption.type ? coordOption.type : self.type;
	    var C; // 构造函数
	    var coord;
	
	    var coordCfg = Util.mix({
	      start: start,
	      end: end
	    }, coordOption && coordOption.cfg);
	
	    if (type === 'theta') {
	      C = Coord.Polar;
	
	      if (!self.hasAction('transpose')) {
	        self.transpose(); // 极坐标，同时transpose
	      }
	
	      coord = new C(coordCfg);
	      coord.type = type;
	    } else {
	      C = Coord[Util.ucfirst(type)] || Coord.Rect;
	      coord = new C(coordCfg);
	    }
	
	    self._execActions(coord);
	    return coord;
	  },
	  rotate: function(angle) {
	    angle = angle * Math.PI / 180;
	    this.actions.push(['rotate', angle]);
	    var coordOption = this._getCoordOptions();
	    coordOption.actions = this.actions;
	    return this;
	  },
	  reflect: function(dim) {
	    this.actions.push(['reflect', dim]);
	    var coordOption = this._getCoordOptions();
	    coordOption.actions = this.actions;
	    return this;
	  },
	  scale: function(sx, sy) {
	    this.actions.push(['scale', sx, sy]);
	    var coordOption = this._getCoordOptions();
	    coordOption.actions = this.actions;
	    return this;
	  },
	  transpose: function() {
	    this.actions.push(['transpose']);
	    var coordOption = this._getCoordOptions();
	    coordOption.actions = this.actions;
	    return this;
	  },
	  resetActions: function() {
	    var options = this.chart.get('options');
	    if (options.coord && options.coord.actions) {
	      this.actions = options.coord.actions;
	    } else {
	      this.actions = [];
	    }
	    return this;
	  }
	});
	
	module.exports = CoordAssist;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	
	"use strict";
	
	var Coord = __webpack_require__(280);
	var Cartesian = __webpack_require__(281);
	var Polar = __webpack_require__(282);
	var Theta = __webpack_require__(284);
	var Rho = __webpack_require__(285);
	var Plus = __webpack_require__(283);
	var TriAngle = __webpack_require__(286);
	var Clock = __webpack_require__(287);
	var Gauge = __webpack_require__(288);
	var Helix = __webpack_require__(289);
	var Map = __webpack_require__(290);
	
	Coord.Cartesian = Cartesian;
	Coord.Rect = Cartesian;
	Coord.Polar = Polar;
	Coord.Theta = Theta;
	Coord.Rho = Rho;
	Coord.Plus = Plus;
	Coord.TriAngle = TriAngle;
	Coord.Clock = Clock;
	Coord.Gauge = Gauge;
	Coord.Helix = Helix;
	Coord.Map = Map;
	
	module.exports = Coord;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 坐标系的基类
	 * @author dxq613
	 */
	'use strict';
	
	
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(185);
	var Matrix3 = Matrix.Matrix3;
	var Vector3 = Matrix.Vector3;
	
	var Coord = function(cfg) {
	  this._attrs = {};
	  this._attrs.matrix = new Matrix3();
	  Util.mix(this._attrs, Coord.ATTRS, cfg);
	  this.init();
	};
	
	Util.augment(Coord, {
	  /**
	   * 是否x,y转置
	   * @type {Boolean}
	   */
	  isTransposed: false,
	
	  /**
	   * 设置对应属性的值
	   **/
	  set: function(attr, value) {
	    this._attrs[attr] = value;
	    return this;
	  },
	  /**
	   * 获得相应属性的值
	   **/
	  get: function(attr) {
	    return this._attrs[attr];
	  },
	  /**
	   * 获得中心节点
	   **/
	  getDim: function(dim) {
	    switch (dim) {
	      case 'x':
	        return this.get('x');
	      case 'y':
	        return this.get('y');
	      case 'z':
	        return this.get('z');
	      default:
	        console.error('没有' + dim + '代表的维度!');
	    }
	  },
	  init: function() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	
	    var center = {
	      x: (start.x + end.x) / 2,
	      y: (start.y + end.y) / 2
	    };
	
	    self.set('center', center);
	    self.set('width', Math.abs(end.x - start.x));
	    self.set('height', Math.abs(end.y - start.y));
	  },
	  /**
	   * 获取坐标系的宽度
	   * @return {Number} 宽度
	   */
	  getWidth: function() {
	    return this.get('width');
	  },
	  /**
	   * 坐标系高度
	   * @return {Number} 高度
	   */
	  getHeight: function() {
	    return this.get('height');
	  },
	  convertDim: function(percent, dim) {
	    var self = this;
	    dim = self.get(dim);
	    return dim.start + percent * (dim.end - dim.start);
	  },
	  invertDim: function(value, dim) {
	    var self = this;
	    dim = self.get(dim);
	    return (value - dim.start) / (dim.end - dim.start);
	  },
	  rotate: function(rad) {
	    var self = this;
	    var matrix = self.get('matrix');
	    var center = self.get('center');
	    matrix.translate(-center.x, -center.y);
	    matrix.rotate(rad);
	    matrix.translate(center.x, center.y);
	    return this;
	  },
	  reflect: function(param) {
	    var self = this;
	    switch (param) {
	      case 'x':
	        self._swapDim('x');
	        break;
	      case 'y':
	        self._swapDim('y');
	        break;
	      default:
	        self._swapDim('y');
	    }
	    return this;
	  },
	  _swapDim: function(dim) {
	    var self = this;
	    var dimRange = self.get(dim);
	    if (dimRange) {
	      var tmp = dimRange.start;
	      dimRange.start = dimRange.end;
	      dimRange.end = tmp;
	    }
	  },
	  scale: function(s1, s2) {
	    var self = this;
	    var matrix = self.get('matrix');
	    var center = self.get('center');
	    matrix.translate(-center.x, -center.y);
	    matrix.scale(s1, s2);
	    matrix.translate(center.x, center.y);
	    return this;
	  },
	  translate: function(x, y) {
	    var self = this;
	    var matrix = self.get('matrix');
	    matrix.translate(x, y);
	    return this;
	  },
	  transpose: function() {
	    this.isTransposed = !this.isTransposed;
	  },
	  /**
	   *  正向转换，将百分比转换为视口中的点
	   **/
	  convertPoint: function(point) {
	    return point;
	  },
	  /**
	   * 反向转换，将视口的店转换为百分比表示
	   **/
	  invertPoint: function(point) {
	    return point;
	  },
	  convert: function(point) {
	    var self = this;
	    point = this.convertPoint(point);
	    var v = self.trans(point.x, point.y, 1);
	    return {
	      x: v.x,
	      y: v.y
	    };
	  },
	  invert: function(point) {
	    var self = this;
	    var v = self.reverse(point.x, point.y, 1);
	    return this.invertPoint({
	      x: v.x,
	      y: v.y
	    });
	  },
	  trans: function(x, y, tag) {
	    tag = tag || 0;
	    var self = this;
	    var matrix = self.get('matrix');
	    var v = new Vector3(x, y, tag);
	    v.applyMatrix(matrix);
	    return v;
	  },
	  reverse: function(x, y, tag) {
	    tag = tag || 0;
	    var self = this;
	    var matrix = self.get('matrix');
	    var invMatrix = matrix.getInverse();
	    var v = new Vector3(x, y, tag);
	    v.applyMatrix(invMatrix);
	    return v;
	  }
	});
	
	
	module.exports = Coord;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview cartesian coordinates
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Coord = __webpack_require__(280);
	
	var Cartesian = function(cfg) {
	  var tmp = {};
	  Util.mix(tmp, Cartesian.ATTRS, cfg);
	  Cartesian.superclass.constructor.call(this, tmp);
	  this._init();
	};
	
	Cartesian.ATTRS = {
	  start: {
	    x: 0,
	    y: 0
	  },
	  end: {
	    x: 0,
	    y: 0
	  }
	};
	
	Util.extend(Cartesian, Coord);
	
	Util.augment(Cartesian, {
	  type: 'cartesian',
	  isRect: true,
	  _init: function() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var x = {
	      start: start.x,
	      end: end.x
	    };
	    var y = {
	      start: start.y,
	      end: end.y
	    };
	    self.set('x', x);
	    self.set('y', y);
	  },
	  /**
	   * 函数重载，将点变成屏幕坐标
	   **/
	  convertPoint: function(point) {
	    var self = this;
	    var x = self.isTransposed ? point.y : point.x;
	    var y = self.isTransposed ? point.x : point.y;
	    return {
	      x: this.convertDim(x, 'x'),
	      y: this.convertDim(y, 'y')
	    };
	  },
	  /**
	   * 函数重载,将点还原成百分比坐标
	   **/
	  invertPoint: function(point) {
	    var self = this;
	    var x = this.invertDim(point.x, 'x');
	    var y = this.invertDim(point.y, 'y');
	    var rst = {};
	    rst.x = self.isTransposed ? y : x;
	    rst.y = self.isTransposed ? x : y;
	    return rst;
	  }
	});
	
	module.exports = Cartesian;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Polar coordinates
	 * @author dxq613@gmail.com
	 * @author hankaiai@126.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Plus = __webpack_require__(283);
	
	var Polar = function(cfg) {
	  cfg.inner = cfg.inner || 0;
	  Polar.superclass.constructor.call(this, cfg);
	};
	
	
	Util.extend(Polar, Plus);
	
	Util.augment(Polar, {
	  type: 'polar'
	});
	
	module.exports = Polar;


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview a special ploar coord
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Coord = __webpack_require__(280);
	var Matrix = __webpack_require__(185);
	var gMath = __webpack_require__(187);
	var Vector2 = Matrix.Vector2;
	var Matrix3 = Matrix.Matrix3;
	var Vector3 = Matrix.Vector3;
	
	var Plus = function(cfg) {
	  var tmp = {};
	  Util.mix(tmp, Plus.ATTRS, cfg);
	  Plus.superclass.constructor.call(this, tmp);
	  this._init();
	};
	
	Plus.ATTRS = {
	  startAngle: -Math.PI / 2,
	  endAngle: Math.PI * 3 / 2,
	  inner: 0.5
	};
	
	Util.extend(Plus, Coord);
	
	Util.augment(Plus, {
	  type: 'plus',
	  isPolar: true,
	  _init: function() {
	    var self = this;
	    var radius = self.get('radius');
	    var inner = self.get('inner');
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var center = self.get('center');
	
	    var oneBox = self.getOneBox();
	
	    var oneWidth = oneBox.maxX - oneBox.minX;
	    var oneHeight = oneBox.maxY - oneBox.minY;
	    var left = Math.abs(oneBox.minX) / oneWidth;
	    var top = Math.abs(oneBox.minY) / oneHeight;
	    var width = self.getWidth();
	    var height = self.getHeight();
	    var maxRadius;
	    var circleCentre;
	    if (height / oneHeight > width / oneWidth) {
	      // width为主
	      maxRadius = width / oneWidth;
	      circleCentre = {
	        x: center.x - (0.5 - left) * width,
	        y: center.y - (0.5 - top) * maxRadius * oneHeight
	      };
	    } else {
	      // height为主
	      maxRadius = height / oneHeight;
	      circleCentre = {
	        x: center.x - (0.5 - left) * maxRadius * oneWidth,
	        y: center.y - (0.5 - top) * height
	      };
	    }
	
	    if (!radius) {
	      radius = maxRadius;
	    } else if (radius > 0 && radius <= 1) {
	      radius = maxRadius * radius;
	    } else if (radius > 0 && radius <= maxRadius) {
	      radius = radius;
	    } else {
	      radius = maxRadius;
	    }
	
	    var x = {
	      start: startAngle,
	      end: endAngle
	    };
	    var y = {
	      start: inner * radius,
	      end: radius
	    };
	
	    self.set('x', x);
	    self.set('y', y);
	    self.set('radius', radius);
	    self.set('circleCentre', circleCentre);
	    self.set('center', circleCentre);
	  },
	  getCenter: function() {
	    return this.get('circleCentre');
	  },
	  getOneBox: function() {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    if (endAngle - startAngle >= Math.PI * 2) {
	      return {
	        minX: -1,
	        maxX: 1,
	        minY: -1,
	        maxY: 1
	      };
	    }
	    var xs = [0, Math.cos(startAngle), Math.cos(endAngle)];
	    var ys = [0, Math.sin(startAngle), Math.sin(endAngle)];
	    for (var i = -Math.PI * 5 / 2; i < Math.PI * 3 / 2; i += Math.PI / 2) {
	      if (startAngle <= i && i <= endAngle) {
	        xs.push(Math.cos(i));
	        ys.push(Math.sin(i));
	      }
	    }
	
	    return {
	      minX: Math.min.apply(Math, xs),
	      maxX: Math.max.apply(Math, xs),
	      minY: Math.min.apply(Math, ys),
	      maxY: Math.max.apply(Math, ys)
	    };
	  },
	  getRadius: function() {
	    return this.get('radius');
	  },
	  convertPoint: function(point) {
	    var self = this;
	    var center = self.getCenter();
	    var x = self.isTransposed ? point.y : point.x;
	    var y = self.isTransposed ? point.x : point.y;
	
	    x = self.convertDim(x, 'x');
	    y = self.convertDim(y, 'y');
	
	    return {
	      x: center.x + Math.cos(x) * y,
	      y: center.y + Math.sin(x) * y
	    };
	  },
	  invertPoint: function(point) {
	    var self = this;
	    var center = self.getCenter();
	    var vPoint = new Vector2(point.x - center.x, point.y - center.y);
	    var x = self.get('x');
	    var m = new Matrix3();
	    m.rotate(x.start);
	    var vStart = new Vector3(1, 0, 0);
	    vStart.applyMatrix(m);
	    vStart = new Vector2(vStart.x, vStart.y);
	    var angle = vStart.angleTo(vPoint, x.end < x.start);
	    if (gMath.equal(angle, Math.PI * 2)) {
	      angle = 0;
	    }
	    var radius = vPoint.length();
	    var xPercent = angle / (x.end - x.start);
	
	    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;
	    var yPercent = self.invertDim(radius, 'y');
	    var rst = {};
	    rst.x = self.isTransposed ? yPercent : xPercent;
	    rst.y = self.isTransposed ? xPercent : yPercent;
	    return rst;
	  }
	});
	
	module.exports = Plus;


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview a special ploar coord to draw pie
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Plus = __webpack_require__(283);
	var Matrix = __webpack_require__(185);
	var gMath = __webpack_require__(187);
	var Vector2 = Matrix.Vector2;
	var Matrix3 = Matrix.Matrix3;
	var Vector3 = Matrix.Vector3;
	
	var Theta = function(cfg) {
	  cfg.inner = cfg.inner || 0;
	  Theta.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Theta, Plus);
	
	Util.augment(Theta, {
	  type: 'theta',
	  convertPoint: function(point) {
	    var self = this;
	    var center = self.getCenter();
	    var x = self.convertDim(point.x, 'x');
	    var y = self.get('y').end;
	
	    return {
	      x: center.x + Math.cos(x) * y,
	      y: center.y + Math.sin(x) * y
	    };
	  },
	  invertPoint: function(point) {
	    var _self = this;
	    var center = _self.getCenter();
	    var vPoint = new Vector2(point.x - center.x, point.y - center.y);
	    var x = _self.get('x');
	    var m = new Matrix3();
	    m.rotate(x.start);
	    var vStart = new Vector3(1, 0, 0);
	    vStart.applyMatrix(m);
	    vStart = new Vector2(vStart.x, vStart.y);
	    var angle = vStart.angleTo(vPoint, x.end < x.start);
	    if (gMath.equal(angle, Math.PI * 2)) {
	      angle = 0;
	    }
	    var xPercent = angle / (x.end - x.start);
	
	    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;
	    return {
	      x: xPercent
	    };
	  }
	});
	
	module.exports = Theta;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview a special ploar coord to draw Concentric circles
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Plus = __webpack_require__(283);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Rho = function(cfg) {
	  cfg.inner = cfg.inner || 0;
	  Rho.superclass.constructor.call(this, cfg);
	  var tmp = this.get('x');
	  this.set('x', this.get('y'));
	  this.set('y', tmp);
	};
	
	Util.extend(Rho, Plus);
	
	Util.augment(Rho, {
	  type: 'rho',
	  convertPoint: function(point) {
	    var self = this;
	    var center = self.getCenter();
	    var x = self.get('y').start;
	    var y = self.convertDim(point.x, 'x');
	
	    return {
	      x: center.x + Math.cos(x) * y,
	      y: center.y + Math.sin(x) * y
	    };
	  },
	  invertPoint: function(point) {
	    var _self = this;
	    var center = _self.getCenter();
	    var vPoint = new Vector2(point.x - center.x, point.y - center.y);
	    var radius = vPoint.length();
	
	    return {
	      x: _self.invertDim(radius, 'x')
	    };
	  }
	});
	
	module.exports = Rho;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview cartesian coordinates
	 * @author hankaiai@126.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Coord = __webpack_require__(280);
	
	function TriAngle(cfg) {
	  var tmp = {};
	  Util.mix(tmp, TriAngle.ATTRS, cfg);
	  TriAngle.superclass.constructor.call(this, tmp);
	  this._init();
	}
	
	TriAngle.ATTRS = {
	  start: {
	    x: 0,
	    y: 0
	  },
	  end: {
	    x: 0,
	    y: 0
	  },
	  top: 0.5
	};
	
	Util.extend(TriAngle, Coord);
	
	Util.augment(TriAngle, {
	  type: 'triAngle',
	  triAngle: true,
	  _init: function() {
	    this.setTopfactor();
	    return this;
	  },
	  setTopfactor: function() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var starEnd = {
	      x: end.x,
	      y: start.y
	    };
	    var top = {
	      x: start.x + (end.x - start.x) * self.get('top'),
	      y: end.y
	    };
	    self.getXStart = function(y) {
	      return start.x + ((top.x - start.x) / (top.y - start.y)) * (y - start.y);
	    };
	    self.getXEnd = function(y) {
	      return starEnd.x + ((top.x - starEnd.x) / (top.y - starEnd.y)) * (y - starEnd.y);
	    };
	  },
	  set: function(attr, value) {
	    this._attrs[attr] = value;
	    if (attr === 'top') {
	      this.setTopfactor();
	    }
	    return this;
	  },
	  /**
	   * 函数重载，将点变成屏幕坐标
	   **/
	  convertPoint: function(point) {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var y = point.y;
	    var x = point.x;
	    if (isNaN(y)) {
	      y = 0;
	    }
	    y = start.y + (end.y - start.y) * y;
	    var xStart = self.getXStart(y);
	    var xEnd = self.getXEnd(y);
	    x = xStart + (xEnd - xStart) * x;
	    return {
	      x: x,
	      y: y
	    };
	  },
	  /**
	   * 函数重载,将点还原成百分比坐标
	   **/
	  invertPoint: function(point) {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var xStart = self.getXStart(point.y);
	    var xEnd = self.getXEnd(point.y);
	    var x = (point.x - xStart) / (xStart - xEnd);
	    return {
	      x: -x,
	      y: -(point.y - start.y) / (end.y - start.y)
	    };
	  }
	});
	
	
	module.exports = TriAngle;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 时钟坐标系
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Polar = __webpack_require__(282);
	
	var Clock = function(cfg) {
	  cfg.inner = cfg.inner || 0;
	  Clock.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Clock, Polar);
	
	Util.augment(Clock, {
	  type: 'clock'
	});
	
	module.exports = Clock;


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 仪表盘系
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Polar = __webpack_require__(282);
	
	var Gauge = function(cfg) {
	  cfg.inner = cfg.inner || 0;
	  Gauge.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Gauge, Polar);
	
	Util.augment(Gauge, {
	  type: 'gauge'
	});
	
	module.exports = Gauge;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 阿基米德螺线坐标系
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 */
	var Util = __webpack_require__(169);
	var Coord = __webpack_require__(280);
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	var Helix = function(cfg) {
	  var tmp = {};
	  Util.mix(tmp, Helix.ATTRS, cfg);
	  Helix.superclass.constructor.call(this, tmp);
	  this._init();
	};
	
	Helix.ATTRS = {
	  startAngle: 1.25 * Math.PI,
	  endAngle: 7.25 * Math.PI
	};
	
	Util.extend(Helix, Coord);
	
	Util.augment(Helix, {
	  type: 'helix',
	  isHelix: true,
	  PRECISION: 0.00001,
	  _init: function() {
	    var self = this;
	    var width = self.getWidth();
	    var height = self.getHeight();
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    // 螺线圈数
	    var index = (endAngle - startAngle) / (2 * Math.PI);
	    index = (2 * index) + 2;
	
	    var d = Math.floor(Math.min(width / index, height / index));// 线圈间距
	    var a = d / (Math.PI * 2);// 螺线系数
	
	    var x = {
	      start: startAngle,
	      end: endAngle
	    };
	    var y = {
	      start: 0,
	      end: d * 0.99
	    };
	
	    self.set('a', a);
	    self.set('d', d);
	    self.set('x', x);
	    self.set('y', y);
	  },
	
	  getCenter: function() {
	    return this.get('center');
	  },
	  /**
	   * 函数重载，将百分比数据变成屏幕坐标
	   **/
	  convertPoint: function(point) {
	    var self = this;
	    var a = self.get('a');
	    var center = self.get('center');
	    var x = self.isTransposed ? point.y : point.x;
	    var y = self.isTransposed ? point.x : point.y;
	
	    var thi = this.convertDim(x, 'x');
	    var r = a * thi;
	    var newY = this.convertDim(y, 'y');
	
	    return {
	      x: center.x + Math.cos(thi) * (r + newY),
	      y: center.y + Math.sin(thi) * (r + newY)
	    };
	  },
	  /**
	   * 函数重载,将屏幕坐标点还原成百分比数据
	   **/
	  invertPoint: function(point) {
	    var self = this;
	    var center = self.get('center');
	    var a = self.get('a');
	    var d = self.get('d');
	    var v = new Vector2.sub(point, center);
	    var i = new Vector2(1, 0);
	    var thi = v.angleTo(i, true);
	    // 坐标与原点的连线在第一圈上的交点，最小r值
	    var rMin = thi * a;
	    var index;
	    // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况
	    if (v.length() < rMin) {
	      rMin = v.length();
	    }
	    // 当前点位于第index圈
	    index = Math.floor((v.length() - rMin) / d);
	    // 螺旋坐标（thi,newY）
	    thi = 2 * index * Math.PI + thi;
	    var r = a * thi;
	    var newY = v.length() - r;
	    newY = self.equal(newY, 0) ? 0 : newY;
	
	    var x = self.invertDim(thi, 'x');
	    var y = self.invertDim(newY, 'y');
	    x = self.equal(x, 0) ? 0 : x;
	    y = self.equal(y, 0) ? 0 : y;
	
	    var rst = {};
	    rst.x = self.isTransposed ? y : x;
	    rst.y = self.isTransposed ? x : y;
	    return rst;
	  },
	  equal: function(a, b) {
	    return (Math.abs((a - b)) < this.PRECISION);
	  }
	});
	
	module.exports = Helix;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview cartesian coordinates
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Cartesian = __webpack_require__(281);
	var GMapProjection = __webpack_require__(291);
	
	var Map = function(cfg) {
	  var tmp = {};
	  Util.mix(tmp, Map.ATTRS, cfg);
	  Map.superclass.constructor.call(this, tmp);
	  var projectionType = this.get('projection');
	  var basic = this.get('basic');
	  var C = GMapProjection[projectionType];
	  this.set('project', new C({
	    basic: basic
	  }));
	};
	
	Map.ATTRS = {
	  projection: 'mercator' // 默认的投影
	};
	
	Util.extend(Map, Cartesian);
	
	Util.augment(Map, {
	  type: 'map',
	  _getOriginRange: function() {
	    var self = this;
	    var xMin = self.get('originMin') ? self.get('originMin')[0] : self.get('min')[0];
	    var yMin = self.get('originMin') ? self.get('originMin')[1] : self.get('min')[1];
	    var xMax = self.get('originMax') ? self.get('originMax')[0] : self.get('max')[0];
	    var yMax = self.get('originMax') ? self.get('originMax')[1] : self.get('max')[1];
	    var range = {
	      x: (xMax - xMin),
	      y: (yMax - yMin)
	    };
	
	    return {
	      xMin: xMin,
	      yMin: yMin,
	      range: range
	    };
	  },
	  _getProjectRange: function() {
	    var self = this;
	    var min = self.get('min') ? self.get('min') : self.get('originMin');
	    var max = self.get('max') ? self.get('max') : self.get('originMax');
	    var xMin = min[0];
	    var yMin = min[1];
	    var xMax = max[0];
	    var yMax = max[1];
	    var range = {
	      x: (xMax - xMin),
	      y: (yMax - yMin)
	    };
	    return {
	      xMin: xMin,
	      yMin: yMin,
	      range: range
	    };
	  },
	  _invert: function(point, type) {
	    var param;
	    if (type === 'origin') {
	      param = this._getOriginRange();
	    } else if (type === 'project') {
	      param = this._getProjectRange();
	    }
	    var xMin = param.xMin;
	    var yMin = param.yMin;
	    var range = param.range;
	
	    point.x = xMin + point.x * range.x;
	    point.y = yMin + point.y * range.y;
	
	    return point;
	  },
	  _scale: function(point, type) {
	    var param;
	    if (type === 'origin') {
	      param = this._getOriginRange();
	    } else if (type === 'project') {
	      param = this._getProjectRange();
	    }
	    var xMin = param.xMin;
	    var yMin = param.yMin;
	    var range = param.range;
	
	    point.x = (point.x - xMin) / range.x;
	    point.y = (point.y - yMin) / range.y;
	    return point;
	  },
	  /**
	   * 函数重载，将点变成屏幕坐标
	   **/
	  convertPoint: function(point) {
	    var self = this;
	    var x = self.isTransposed ? point.y : point.x;
	    var y = self.isTransposed ? point.x : point.y;
	    var project = self.get('project');
	    var aPoint = self._invert({
	      x: x,
	      y: y
	    }, 'origin'); // 转换为度量前的数值
	    aPoint = project.project(aPoint.x, aPoint.y);
	    aPoint = self._scale(aPoint, 'project');
	
	    return {
	      x: this.convertDim(aPoint.x, 'x'),
	      y: this.convertDim(aPoint.y, 'y')
	    };
	  },
	  /**
	   * 函数重载,将点还原成百分比坐标
	   **/
	  invertPoint: function(point) {
	    var self = this;
	    var x = this.invertDim(point.x, 'x');
	    var y = this.invertDim(point.y, 'y');
	    var rst = {};
	    rst.x = self.isTransposed ? y : x;
	    rst.y = self.isTransposed ? x : y;
	    var project = self.get('project');
	    rst = self._invert(rst, 'project');
	    rst = project.invert(rst);
	    rst = self._scale(rst, 'origin');
	
	    return rst;
	  }
	});
	
	module.exports = Map;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	var gMapProjection;
	
	gMapProjection = {
	  albers: __webpack_require__(292),
	  mercator: __webpack_require__(294),
	  orthographic: __webpack_require__(295)
	}
	
	module.exports = gMapProjection;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Albers projection 亚尔波斯投影 正轴等面积割圆锥投影
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	"use strict";
	
	var Util = __webpack_require__(169);
	var Projection = __webpack_require__(293);
	
	var Albers = function(cfg) {
	  Albers.superclass.constructor.call(this,cfg);
	  this._init();
	};
	
	Util.extend(Albers, Projection);
	
	Util.augment(Albers, {
	  λ0: 0, // 中央经线
	  φ0: 0, // 坐标起始纬度
	  φ1: 0, // 第一标准纬线
	  φ2: 0, // 第二标准纬线
	  basic: [0, 0, 0, 60],
	  _init: function() {
	    this.λ0 = this.toRadians(this.basic[0]);
	    this.φ0 = this.toRadians(this.basic[1]);
	    this.φ1 = this.toRadians(this.basic[2]);
	    this.φ2 = this.toRadians(this.basic[3]);
	  },
	  project: function(λ, φ) {
	    var λ0 = this.λ0;
	    var φ0 = this.φ0;
	    var φ1 = this.φ1;
	    var φ2 = this.φ2;
	
	    var n = 0.5 * (Math.sin(φ1) + Math.sin(φ2)),
	      c = Math.cos(φ1),
	      C = c * c + 2 * n * Math.sin(φ1),
	      ρ0 = Math.sqrt(C - 2 * n * Math.sin(λ0)) / n,
	      theta = n * (this.toRadians(λ) - λ0),
	      ρ = Math.sqrt(C - 2 * n * Math.sin(this.toRadians(φ))) / n;
	
	    return {
	      x: this.toDegrees(ρ * Math.sin(theta)),
	      y: this.toDegrees(ρ0 - ρ * Math.cos(theta))
	    };
	  },
	  invert: function(point) {
	    var λ0 = this.λ0;
	    var φ0 = this.φ0;
	    var φ1 = this.φ1;
	    var φ2 = this.φ2;
	
	    var x = this.toRadians(point.x);
	    var y = this.toRadians(point.y);
	
	    var n = 0.5 * (Math.sin(φ1) + Math.sin(φ2)),
	      c = Math.cos(φ1),
	      C = c * c + 2 * n * Math.sin(φ1),
	      ρ0 = Math.sqrt(C - 2 * n * Math.sin(λ0)) / n;
	    var theta = Math.atan(x / (ρ0 - y)),
	      ρ = Math.sqrt(x * x + Math.pow(ρ0 - y, 2));
	    return {
	      x: this.toDegrees(λ0 + theta / n),
	      y: this.toDegrees(Math.asin((C - ρ * ρ * n * n) / (2 * n)))
	    };
	  }
	});
	
	module.exports = Albers;


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Util = __webpack_require__(169);
	var RADIANS = Math.PI / 180;
	var DEGREES = 180 / Math.PI;
	
	var Projection = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(Projection, {
	  basic: null,
	  toRadians: function(degrees) {
	    return RADIANS * degrees;
	  },
	  toDegrees: function(radians) {
	    return radians * DEGREES;
	  },
	  project: function(λ, φ) {
	    // override, 对经度和纬度进行投影
	    return {
	      x: λ,
	      y: φ
	    };
	  },
	  invert: function(point) {
	    return {
	      x: point.x,
	      y: point.y
	    };
	  }
	});
	
	module.exports = Projection;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Mercator projection 正轴等角圆柱投影
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	"use strict";
	
	var Util = __webpack_require__(169);
	var Projection = __webpack_require__(293);
	
	var Mercator = function(cfg) {
	  Mercator.superclass.constructor.call(this, cfg);
	  this._init();
	};
	
	Util.extend(Mercator, Projection);
	
	Util.augment(Mercator, {
	  λ0: 0, //  λ0 is the longitude of an arbitrary central meridian usually, but not always, that of Greenwich (i.e., zero).
	  _init: function() {
	    this.λ0 = this.toRadians(this.λ0);
	  },
	  /**
	   *  进行 mercator 投影
	   * @param  {Number} λ 经度
	   * @param  {Number} φ 纬度
	   * @return {Object} 返回投影后的经纬度
	   */
	  project: function(λ, φ) {
	    λ = this.toRadians(λ); // 转换成弧度
	    φ = this.toRadians(φ);
	
	    return {
	      x: this.toDegrees(λ - this.λ0),
	      y: this.toDegrees(Math.log(Math.tan(Math.PI / 4 + φ / 2)))
	    };
	  },
	  /**
	   * 转换成投影前的经纬度
	   * @param  {Object} point
	   * @return {Object}
	   */
	  invert: function(point) {
	    var x = this.toRadians(point.x); // 转换成弧度
	    var y = this.toRadians(point.y);
	
	    return {
	      x: this.toDegrees(x + this.λ0),
	      y: this.toDegrees(2 * Math.atan(Math.exp(y)) - Math.PI / 2)
	    };
	  }
	});
	
	module.exports = Mercator;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview orthographic projection 正射投影
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	"use strict";
	
	var Util = __webpack_require__(169);
	var Projection = __webpack_require__(293);
	
	var Orthographic = function(cfg) {
	  Orthographic.superclass.constructor.call(this, cfg);
	  this._init();
	};
	
	Util.extend(Orthographic, Projection);
	
	Util.augment(Orthographic, {
	  λ0: 110, // 中央经线
	  φ1: 25, // 第一标准纬线
	  _init: function() {
	    this.λ0 = this.toRadians(this.λ0);
	    this.φ1 = this.toRadians(this.φ1);
	  },
	  /**
	   *  进行 Orthographic 投影
	   * @param  {Number} λ 经度
	   * @param  {Number} φ 纬度
	   * @return {Object} 返回投影后的经纬度
	   */
	  project: function(λ, φ) {
	    λ = this.toRadians(λ); // 转换成弧度
	    φ = this.toRadians(φ);
	
	    var x = Math.cos(φ) * Math.sin(λ - this.λ0);
	    var y = Math.cos(φ1) * Math.sin(φ) - Math.sin(φ1) * Math.cos(φ) * Math.cos(λ - λ0);
	
	    return {
	      x: this.toDegrees(x),
	      y: this.toDegrees(y)
	    };
	  },
	  /**
	   * 转换成投影前的经纬度
	   * @param  {Object} point
	   * @return {Object}
	   */
	  invert: function(point) {
	    var x = this.toRadians(point.x); // 转换成弧度
	    var y = this.toRadians(point.y);
	
	    var ρ = Math.sqrt(x * x + y * y);
	    var c = Math.asin(ρ);
	
	    var λ = this.λ0 + Math.atan(x * Math.sin(c) / (ρ * Math.cos(this.φ1) * Math.cos(c) - y * Math.sin(this.φ11) * Math.sin(c)));
	    var φ = Math.asin(Math.cos(c) * Math.sin(this.φ1) + (y * Math.sin(c) * Math.cos(this.φ1)) / ρ);
	
	    return {
	      x: this.toDegrees(λ),
	      y: this.toDegrees(φ)
	    };
	  }
	});
	
	module.exports = Orthographic;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 坐标轴生成的辅助类
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Components = __webpack_require__(244);
	var Axis = Components.Axis;
	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	var Global = __webpack_require__(264);
	var HIDE_DIMS = ['..x', '..y', '..long', '..lant', '..pieX'];
	
	function formatTicks(ticks) {
	  var tmp = [];
	  if (ticks.length > 0) {
	    tmp = ticks.slice(0);
	    var first = tmp[0];
	    var last = tmp[tmp.length - 1];
	    if (first.value !== 0) {
	      tmp.unshift({
	        value: 0
	      });
	    }
	    if (last.value !== 1) {
	      tmp.push({
	        value: 1
	      });
	    }
	  }
	  return tmp;
	}
	
	var AxisAssist = function(cfg) {
	  this.axisCfg = {};
	  Util.mix(this, cfg);
	};
	
	Util.augment(AxisAssist, {
	  axisCfg: null,
	  visible: true, // 坐标轴是否可用
	  container: null,
	  chart: null,
	
	  // 对应的坐标轴是否隐藏
	  _isHide: function(dim) {
	    var axisCfg = this.axisCfg;
	    if (Util.inArray(HIDE_DIMS, dim) && Util.isNull(axisCfg[dim])) {
	      return true; // 默认不展示带 .. 的 dim
	    }
	    return axisCfg && axisCfg[dim] === false;
	  },
	  _getMiddleValue: function(curValue, ticks, index) {
	    var tickCount = ticks.length;
	    if (index === tickCount - 1) {
	      return null;
	    }
	    var nextValue = ticks[index + 1].value;
	    return (curValue + nextValue) / 2;
	  },
	  _getLineRange: function(coord, scale, dimType, index) {
	    var start;
	    var end;
	    var isVertical;
	    var dim = scale.dim;
	    var axisCfg = this.axisCfg;
	    var position = '';
	    if (axisCfg[dim] && axisCfg[dim].position) {
	      position = axisCfg[dim].position;
	    }
	
	    if (dimType === 'x') { // x轴的坐标轴,底部的横坐标
	      start = {
	        x: 0,
	        y: position === 'top' ? 1 : 0
	      };
	      end = {
	        x: 1,
	        y: position === 'top' ? 1 : 0
	      };
	      isVertical = false;
	    } else { // y轴坐标轴
	      if (index) { // 多轴的情况
	        start = {
	          x: position === 'left' ? 0 : 1,
	          y: 0
	        };
	        end = {
	          x: position === 'left' ? 0 : 1,
	          y: 1
	        };
	      } else { // 单个y轴，或者第一个y轴
	        start = {
	          x: position === 'right' ? 1 : 0,
	          y: 0
	        };
	        end = {
	          x: position === 'right' ? 1 : 0,
	          y: 1
	        };
	      }
	      isVertical = true;
	    }
	
	    start = coord.convert(start);
	    end = coord.convert(end);
	
	    return {
	      start: start,
	      end: end,
	      isVertical: isVertical
	    };
	  },
	  // 获取直线坐标轴配置项信息
	  _getLineCfg: function(coord, scale, dimType, index) {
	    var factor;
	    var range = this._getLineRange(coord, scale, dimType, index);
	    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标
	    var start = range.start;
	    var end = range.end;
	    var center = coord.get('center');
	
	    if (coord.isTransposed) {
	      isVertical = isVertical ? false : true;
	    }
	
	    if ((isVertical && (start.x > center.x)) || (!isVertical && (start.y > center.y))) {
	      factor = 1;
	    } else {
	      factor = -1;
	    }
	
	    return {
	      isVertical: isVertical,
	      factor: factor,
	      start: start,
	      end: end
	    };
	  },
	  // 获取圆弧坐标轴配置项信息
	  _getCircleCfg: function(coord) {
	    var circleCfg = {};
	    var rangeX = coord.get('x');
	    var rangeY = coord.get('y');
	    var isReflectY = rangeY.start > rangeY.end ? true : false;
	    var start;
	    if (coord.isTransposed) {
	      start = {
	        x: isReflectY ? 0 : 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: isReflectY ? 0 : 1
	      };
	    }
	
	    start = coord.convert(start);
	    var center = coord.get('circleCentre');
	    var startVector = new Vector2(start.x - center.x, start.y - center.y);
	    var normalVector = new Vector2(1, 0);
	    var startAngle;
	    if (start.y > center.y) {
	      startAngle = Vector2.angle(startVector, normalVector);
	    } else {
	      startAngle = Vector2.angle(startVector, normalVector) * -1;
	    }
	    var endAngle = startAngle + (rangeX.end - rangeX.start);
	
	    circleCfg.startAngle = startAngle;
	    circleCfg.endAngle = endAngle;
	    circleCfg.center = center;
	    circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));
	    circleCfg.inner = coord.get('inner') || 0;
	    return circleCfg;
	  },
	  _getRadiusCfg: function(coord) {
	    var startAngle = coord.get('x').start;
	    var factor = startAngle < 0 ? -1 : 1;
	    var start;
	    var end;
	    if (coord.isTransposed) {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 0,
	        y: 1
	      };
	    }
	    return {
	      factor: factor,
	      start: coord.convert(start),
	      end: coord.convert(end)
	    };
	  },
	  // 获取由多个点组成的坐标轴
	  _getMultiLineCfg: function(coord, scale, dimType) {
	    var ticks = scale.getTicks();
	    var tickPoints = [];
	    var range = this._getLineRange(coord, scale, dimType);
	    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标
	
	    Util.each(ticks, function(tick) {
	      var point = coord.convert({
	        x: isVertical ? 0 : tick.value,
	        y: isVertical ? tick.value : 0
	      });
	      tickPoints.push(point);
	    });
	
	    return {
	      start: range.start,
	      end: range.end,
	      tickPoints: tickPoints
	    };
	  },
	  // 确定坐标轴的位置
	  _getAxisPosition: function(coord, dimType, index) {
	    var coordType = coord.type;
	    var position = '';
	    if (coord.isRect) {
	      if (this.facet && this.facet.type === 'mirror') {
	        if (dimType === 'x') {
	          position = 'bottom';
	        }
	      } else if (dimType === 'x') {
	        position = 'bottom';
	      }
	      if (dimType === 'y') {
	        if (index) {
	          position = 'right';
	        } else {
	          position = 'left';
	        }
	      }
	    } else if (coordType === 'clock') {
	      position = 'clock';
	    } else if (coordType === 'gauge') {
	      position = 'gauge';
	    } else if (coordType === 'helix') {
	      position = 'helix';
	    } else if (dimType === 'x') {
	      position = coord.isTransposed ? 'radius' : 'circle';
	    } else {
	      position = coord.isTransposed ? 'circle' : 'radius';
	    }
	
	    return position;
	  },
	  // 获取坐标轴构成的配置信息
	  _getAxisDefaultCfg: function(coord, scale, type, position, index) {
	    var cfg = {};
	    var self = this;
	    var facet = self.facet;
	    var axisCfg = self.axisCfg;
	    var height = coord.getHeight();
	    var coordType = coord.type;
	
	    // 唯一的分面，或者非直角坐标系，直接显示坐标轴
	    if (coordType !== 'cartesian' || Util.isNull(facet) || (facet && facet.rows === 1 && facet.cols === 1)) {
	      if (coordType === 'cartesian') {
	        cfg.title = {
	          text: scale.alias || scale.dim
	        };
	      }
	    } else {
	      var rows = facet.rows;
	      var cols = facet.cols;
	      var rowIndex = facet.rowIndex;
	      var colIndex = facet.colIndex;
	      var facetType = facet.type;
	      cfg.title = {
	        text: scale.alias || scale.dim
	      }; // 设置 title
	
	      if (facetType === 'tree') { // 树状分面，仅展示最左侧y 轴文本和叶子节点的 x轴文本
	        if ((type === 'y' && (facet.originColIndex !== 0 && colIndex !== 0)) || (type === 'x' && facet.children)) {
	          cfg.labels = null;
	          cfg.title = null;
	        }
	      } else if (facetType === 'circle') { // 圆形分面不展示坐标轴
	        cfg.labels = null;
	        cfg.title = null;
	      } else {
	        // 处理y轴的场景，行列分面和可换行的分面，y轴只有最左侧的显示文本
	        if (facetType !== 'mirror' && type === 'y' && ((colIndex !== 0 && position === 'left') || colIndex !== cols - 1 && position === 'right')) {
	          cfg.labels = null;
	          cfg.title = null;
	        }
	
	        if (facetType === 'rect') {
	          if ((type === 'x' && rowIndex !== 0)) {
	            cfg.labels = null;
	            cfg.title = null;
	          }
	        } else if (facetType === 'list') { // 考虑到换行场景，最后一行可能不满
	          if (type === 'x' && rowIndex !== rows - 1 && (cols * rowIndex + colIndex + 1) + cols <= facet.count) {
	            cfg.labels = null;
	            cfg.title = null;
	          }
	        } else if (facetType === 'mirror') {
	          if (type === 'x') {
	            if ((rows === 1 && colIndex === 1) || (rows === 2 && rowIndex === 0)) {
	              cfg.labels = null;
	              cfg.title = null;
	            }
	          }
	        }
	      }
	      if (type === 'y' && cfg.title) {
	        if (rowIndex !== Math.floor(rows / 2)) {
	          cfg.title = null;
	        }
	      }
	      if (type === 'x' && cfg.title) {
	        if (colIndex !== Math.floor(cols / 2)) {
	          cfg.title = null;
	        }
	      }
	    }
	    cfg = Util.mix(true, {}, Global.axis[position], cfg, axisCfg[scale.dim]);
	    cfg.ticks = scale.getTicks();
	
	    if (coord.isPolar && !scale.isCategory) {
	      if (type === 'x') {
	        if (coord.type === 'clock') {
	          cfg.ticks[0].text = '';
	        } else if (coord.type !== 'gauge') {
	          cfg.ticks.pop();
	        }
	      }
	    }
	
	    // 处理由于分面导致，y轴文本过于密集的问题
	    if (type === 'y') {
	      var ticks = cfg.ticks;
	      var tickCount = ticks.length;
	      var lineHeight = 16;
	      if (height / tickCount < lineHeight) {
	        var tmp = [];
	        var count = Math.floor(height / lineHeight) + 1;
	        var step = Math.floor(tickCount / count);
	        if (step < 1) {
	          step = 1;
	        }
	        tmp.push(ticks[0]);
	        for (var i = step; i <= tickCount - 2; i = i + step) {
	          tmp.push(ticks[i]);
	        }
	        tmp.push(ticks[tickCount - 1]);
	        cfg.ticks = tmp;
	      }
	    }
	    cfg.coord = coord;
	    cfg.id = self._getViewId() + index + type;
	    // 未禁止文本自动转置，则设置自动转置
	    if (cfg.labels && Util.isNull(cfg.labels.autoRotate)) {
	      cfg.labels.autoRotate = true; // 允许自动旋转，避免重叠
	    }
	    return cfg;
	  },
	  // 确定坐标轴的配置信息
	  _getAxisCfg: function(coord, scale, verticalScale, dimType, index) {
	    if (Util.isNull(index)) index = '';
	    var self = this;
	    var cfg = {};
	    var position = self._getAxisPosition(coord, dimType, index);
	    var viewId = self._getViewId();
	
	    cfg = self._getAxisDefaultCfg(coord, scale, dimType, position, index);
	    if (cfg.grid && verticalScale) { // 生成 gridPoints
	      var gridPoints = [];
	      var verticalTicks = formatTicks(verticalScale.getTicks());
	      var ticks = cfg.ticks;
	      Util.each(ticks, function(tick, idx) {
	        var subPoints = [];
	        var value = tick.value;
	        if (cfg.gridAlign === 'middle') {
	          value = self._getMiddleValue(value, ticks, idx);
	        }
	        if (!Util.isNull(value)) {
	          var rangeX = coord.get('x');
	          var rangeY = coord.get('y');
	          Util.each(verticalTicks, function(verticalTick) {
	            var x = dimType === 'x' ? value : verticalTick.value;
	            var y = dimType === 'x' ? verticalTick.value : value;
	            var point = coord.convert({
	              x: x,
	              y: y
	            });
	            if (coord.isPolar) {
	              var center = coord.get('circleCentre');
	              if (rangeY.start > rangeY.end) {
	                y = 1 - y;
	              }
	              point.flag = rangeX.start > rangeX.end ? 0 : 1;
	              point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	            }
	            subPoints.push(point);
	          });
	          subPoints.id = viewId + index + dimType + tick.text;
	          gridPoints.push(subPoints);
	        }
	      });
	
	      cfg.grid.items = gridPoints;
	      cfg.grid.id = viewId + index + dimType + scale.dim;
	      if (cfg.coord.type === 'map') {
	        cfg.grid.smooth = true;
	      }
	    }
	    return cfg;
	  },
	  _getHelixCfg: function(coord) {
	    var helixCfg = {};
	    var a = coord.get('a');
	    var startAngle = coord.get('startAngle');
	    var endAngle = coord.get('endAngle');
	    var index = 100;
	    var crp = [];
	    for (var i = 0; i <= index; i++) {
	      var point = coord.convert({
	        x: i / 100,
	        y: 0
	      });
	      crp.push(point.x);
	      crp.push(point.y);
	    }
	    var axisStart = coord.convert({
	      x: 0,
	      y: 0
	    });
	    helixCfg.a = a;
	    helixCfg.startAngle = startAngle;
	    helixCfg.endAngle = endAngle;
	    helixCfg.crp = crp;
	    helixCfg.axisStart = axisStart;
	    helixCfg.center = coord.get('center');
	    return helixCfg;
	  },
	  _getViewId: function() {
	    var chart = this.chart;
	    var viewId = chart ? chart.get('viewId') : '';
	    return viewId;
	  },
	  // 绘制坐标轴
	  _drawAxis: function(coord, scale, verticalScale, dimType, xAxis, index) {
	    var container = this.container;
	    var C; // 坐标轴类
	    var appendCfg; // 每个坐标轴 start end 等绘制边界的信息
	    var viewId = this._getViewId();
	
	    if (coord.isRect) {
	      if (coord.type === 'map' && dimType === 'x') {
	        C = Axis.MultLine;
	        appendCfg = this._getMultiLineCfg(coord, scale, dimType);
	      } else {
	        C = Axis;
	        appendCfg = this._getLineCfg(coord, scale, dimType, index);
	      }
	    } else if (coord.isHelix && dimType === 'x') {
	      C = Axis.Helix;
	      appendCfg = this._getHelixCfg(coord);
	    } else if (dimType === 'x') {
	      C = Axis.Circle;
	      appendCfg = this._getCircleCfg(coord);
	    } else {
	      C = Axis;
	      appendCfg = this._getRadiusCfg(coord);
	    }
	
	    var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index);
	    cfg = Util.mix(true, {
	      id: viewId + index + dimType + scale.dim
	    }, cfg, appendCfg);
	
	    if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {
	      cfg.circle = xAxis;
	    }
	    return container.addGroup(C, cfg);
	  },
	  /**
	   * 绘制坐标轴
	   * @param  {View} 视图
	   * @param  {Scale} xScale  x轴的度量
	   * @param  {Scale} yScales y轴的度量
	   */
	  createAxis: function(view, xScale, yScales, options) {
	    var self = this;
	    var visible = options && Util.isBoolean(options.visible) ? options.visible : self.visible;
	    if (!visible) { // 不显示坐标轴
	      return;
	    }
	    var axisCfg = {};
	    if (options) {
	      Util.each(options, function(cfg, dim) {
	        if (dim !== visible) {
	          axisCfg[dim] = cfg;
	        }
	      });
	    }
	
	    self.axisCfg = axisCfg;
	    var coord = view.get('coord');
	    var coordType = coord.type;
	    this.facet = view.get('facet');
	
	    // theta坐标系默认不绘制坐标轴
	    if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {
	      var xAxis;
	      if (xScale && !self._isHide(xScale.dim)) {
	        xAxis = self._drawAxis(coord, xScale, yScales[0], 'x'); // 绘制 x 轴
	      }
	      if (yScales && yScales.length && coordType !== 'helix') {
	        Util.each(yScales, function(yScale, index) {
	          if (!self._isHide(yScale.dim)) {
	            self._drawAxis(coord, yScale, xScale, 'y', xAxis, index);
	          }
	        });
	      }
	    }
	  }
	});
	
	module.exports = AxisAssist;


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 同数据和度量操作相关的类
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Scale = __webpack_require__(298);
	var DateUtil = __webpack_require__(311);
	var DataFrame = __webpack_require__(270);
	var Global = __webpack_require__(264);
	var TYPES = {
	  LINEAR: 'linear',
	  CAT: 'cat',
	  TIME: 'time'
	};
	
	var ScaleAssist = function(cfg) {
	  Util.mix(this, cfg);
	  this.defs = this.defs || {};
	};
	
	Util.augment(ScaleAssist, {
	  defs: null,
	
	  // 如果 def 中有定义 dims，根据 dims 值生成新列
	  _addNewCol: function(dim, def, frame) {
	    var self = this;
	    var defs = self._getDefs();
	    var dims = def.dims;
	    var dimTypes = [];
	    Util.each(dims, function(dimItem) { // 检测参与加法运算的属性值是否同类型
	      var type = (defs[dimItem] && defs[dimItem].type) || self._getDefaultType(dimItem, frame);
	      if (dimTypes.length === 0) {
	        dimTypes.push(type);
	      } else if (!Util.inArray(dimTypes, type)) { // 加法运算符中的字段类型不相同
	        throw new Error('Sorry, the values that are involved in "+" must be of the same type.');
	      }
	    });
	    if (Util.isNull(def.type)) {
	      def.type = dimTypes[0];
	    }
	
	    var dimsValues = [];
	    Util.each(dims, function(dimItem) {
	      dimsValues.push(frame.colArray(dimItem));
	    });
	
	    var newColValues = [];
	    for (var i = 0; i < dimsValues[0].length; i++) {
	      newColValues[i] = [];
	      for (var j = 0; j < dims.length; j++) {
	        newColValues[i].push(dimsValues[j][i]);
	      }
	    }
	    frame.addCol(dim, newColValues);
	  },
	  _getDefs: function() {
	    var defs = this.defs;
	    return Util.mix(true, {}, Global.scales, defs);
	  },
	  _getScaleCfg: function(type, dim, frame, isIntervalY) {
	    var cfg = {
	      dim: dim
	    };
	    if (frame.contains(dim)) {
	      var values = DataFrame.values(frame, dim);
	      cfg.values = values;
	
	      if (!Scale.isCategory(type) && type !== 'time') {
	        cfg.min = DataFrame.min(frame, dim);
	        cfg.max = DataFrame.max(frame, dim);
	        cfg.nice = true;
	      }
	
	      if (type === 'time') {
	        cfg.nice = false;
	      }
	    }
	
	    if (!Scale.isCategory(type) && type !== 'time' && isIntervalY && (!cfg.min || cfg.min > 0)) {
	      var defs = this.defs;
	      var newDef = {};
	      newDef[dim] = {
	        min: 0
	      };
	      this.defs = Util.mix(true, newDef, defs);
	    }
	
	    return cfg;
	  },
	  _getDefaultType: function(dim, frame) {
	    var type = TYPES.LINEAR;
	    var values = DataFrame.values(frame, dim);
	    var value = values[0];
	    if (Util.isArray(value)) {
	      value = value[0];
	    }
	
	    if (DateUtil.isDateString(value)) {
	      type = TYPES.TIME;
	    } else if (Util.isString(value)) {
	      type = TYPES.CAT;
	    }
	    return type;
	  },
	  _syncScales: function(scale, newScale) {
	    if (scale.type !== 'identity') {
	      var obj = {};
	      for (var k in newScale) {
	        if (Object.prototype.hasOwnProperty.call(newScale, k)) {
	          obj[k] = newScale[k];
	        }
	      }
	      scale.change(obj);
	    }
	  },
	  createDefaultScale: function(dim, frame, isIntervalY) {
	    var type = this._getDefaultType(dim, frame);
	    var cfg = this._getScaleCfg(type, dim, frame, isIntervalY);
	    return Scale[type](cfg);
	  },
	  /**
	   * 创建合适的度量
	   * @protected
	   * @param  {*} dim 字段名或者常量（数字、字符串）
	   * @param  {Frame} frame 数据集合
	   * @return {Scale} 度量
	   */
	  createScale: function(dim, frame, isIntervalY) {
	    var self = this;
	    var defs = self._getDefs();
	
	    var scale;
	    if (Util.isNumber(dim)) {
	      scale = Scale.I({
	        value: dim,
	        dim: dim.toString()
	      });
	    } else if (!defs[dim] && Util.indexOf(frame.colNames(), dim) === -1) { // 未定义或者数据中没有对应的列
	      scale = Scale.I({
	        value: dim,
	        dim: dim
	      });
	    } else if (defs[dim]) { // 如果已经定义过这个度量
	      var def = defs[dim];
	      // 如果有定义 dims，默认新增一列，每项数据为 [dim1, dim2, dim3, ...] 按照 dims 的顺序
	      if (def.dims && !frame.contains(dim)) {
	        self._addNewCol(dim, def, frame);
	      }
	
	      var type = def.type || self._getDefaultType(dim, frame);
	      var cfg = self._getScaleCfg(type, dim, frame, isIntervalY);
	      Util.mix(cfg, def);
	      scale = Scale[type](cfg);
	    } else {
	      scale = self.createDefaultScale(dim, frame, isIntervalY);
	    }
	    return scale;
	  },
	  /**
	   * 对数据集合进行排序，然后重置scale对应的values
	   * @param  {DataFrame} frames
	   */
	  sortScales: function(frames, scales, sortFn) {
	    var self = this;
	
	    if (!sortFn) {
	      return null;
	    }
	
	    frames = DataFrame.sortBy(frames, sortFn);
	    Util.each(scales, function(scale, dim) {
	      var type = scale.type;
	      if (type !== 'identity' && frames.contains(dim)) {
	        var newScale = self.createScale(dim, frames);
	        scale.values = newScale.values;
	      }
	    });
	  },
	  /**
	   * 统计完成后，训练度量
	   */
	  trainScales: function(frame, scales) {
	    var self = this;
	
	    Util.each(scales, function(scale) {
	      var type = scale.type;
	      var dim = scale.dim;
	      if (type !== 'identity' && frame.contains(dim)) {
	        var newScale = self.createScale(dim, frame);
	        self._syncScales(scale, newScale);
	      }
	    });
	  },
	  // 获取不同度量的过滤函数
	  _getFilterFunction: function(scale, values) {
	    var fn;
	    var dim = scale.dim;
	    var value;
	    var valueMin;
	    var valueMax;
	
	    if (scale.isCategory) { // 字符串类型
	      if (scale.type === 'timeCat') {
	        fn = function(obj) {
	          value = new Date(obj[dim]).getTime();
	          valueMin = new Date(values[0]).getTime();
	          valueMax = new Date(values[1]).getTime();
	          return (value >= valueMin && value <= valueMax);
	        };
	      } else {
	        fn = function(obj) {
	          var tmp = false;
	          Util.each(values, function(val) {
	            value = obj[dim];
	            tmp = tmp || scale.getText(val) === scale.getText(value);
	            if (tmp) return false;
	          });
	          return tmp;
	        };
	      }
	    } else if (scale.isLinear) {
	      fn = function(obj) {
	        value = scale.translate(obj[dim]);
	        valueMin = scale.translate(values[0]);
	        valueMax = scale.translate(values[1]);
	        return (value >= valueMin && value <= valueMax);
	      };
	    } else {
	      fn = function(obj) {
	        value = obj[dim];
	        return Util.inArray(values, value);
	      };
	    }
	    return fn;
	  },
	
	  _getMultpleFilterFunction: function(scales, values) {
	    var fn = function(obj) {
	      var rst = false;
	      Util.each(values, function(val) {
	        var subValues = val.split('*');
	        var tmp = true;
	        Util.each(subValues, function(subVal, index) {
	          if (subVal) {
	            var scale = scales[index];
	            var value = obj[scale.dim];
	            tmp = tmp && scale.getText(subVal) === scale.getText(value);
	          }
	        });
	        rst = rst || tmp;
	        if (rst) {
	          return false;
	        }
	      });
	      return rst;
	    };
	    return fn;
	  },
	  /**
	   * 过滤数据
	   * @param  {DataFrame} frame 需要过滤的数据源
	   * @param  {Object} filters 过滤器
	   * @param  {Object} scales  数据对应的度量集合
	   * @return {DataFrame} 返回过滤后的数据
	   */
	  filterData: function(frame, filters, scales) {
	    var self = this;
	
	    // 统一将分类类型的数据转换为字符串类型
	    frame = self.convertToString(frame, scales);
	
	    var filterFuncs = [];
	    Util.each(filters, function(values, dim) {
	      var fn;
	      if (dim.indexOf('*') !== -1) {
	        var dims = dim.split('*');
	        var subScales = dims.map(function(subDim) {
	          return scales[subDim];
	        });
	        if (values && subScales.length) {
	          fn = self._getMultpleFilterFunction(subScales, values);
	          filterFuncs.push(fn);
	        }
	      } else {
	        var scale = scales[dim];
	        if (values && scale) {
	          fn = self._getFilterFunction(scale, values);
	          filterFuncs.push(fn);
	        }
	      }
	    });
	
	    var filteredFrame = frame;
	    if (filterFuncs.length) {
	      filteredFrame = DataFrame.filter(frame, function(obj) {
	        var filtered = true;
	        Util.each(filterFuncs, function(fun) {
	          filtered = filtered && fun(obj);
	        });
	        return filtered;
	      });
	    }
	
	    return filteredFrame;
	  },
	  /**
	   * 将分类度量的数据转换为字符串
	   * @param  {DataFrame} frame 原始数据
	   * @param  {Object} scales 相关度量的集合
	   * @return {DataFrame} 返回处理后的数据
	   */
	  convertToString: function(frame, scales) {
	    var defs = this._getDefs();
	    Util.each(scales, function(scale, dim) {
	      var type = scale.type;
	      if (scale.isCategory && (type !== 'timeCat') && frame.contains(dim)) {
	        var def = defs[dim];
	        if ((def && !def.hasOwnProperty('values')) || !def) {
	          var temp = frame.colArray(dim);
	          Util.each(temp, function(v, i) {
	            if (!Util.isNull(v)) { // 数据会存在undefined的情况
	              temp[i] = v.toString();
	            }
	          });
	          frame.colReplace(dim, temp);
	        }
	      }
	    });
	
	    return frame;
	  }
	});
	
	module.exports = ScaleAssist;


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Scale = __webpack_require__(299);
	
	Scale.Linear = __webpack_require__(300);
	Scale.linear = function(cfg) {
	  return new Scale.Linear(cfg);
	};
	
	Scale.Cat = __webpack_require__(306);
	Scale.cat = function(cfg) {
	  return new Scale.Cat(cfg);
	};
	
	Scale.Pow = __webpack_require__(307);
	Scale.pow = function(cfg) {
	  return new Scale.Pow(cfg);
	};
	
	Scale.Log = __webpack_require__(308);
	Scale.log = function(cfg) {
	  return new Scale.Log(cfg);
	};
	
	Scale.Identity = __webpack_require__(309);
	Scale.I = function(cfg) {
	  return new Scale.Identity(cfg);
	};
	
	Scale.Time = __webpack_require__(310);
	Scale.time = function(cfg) {
	  return new Scale.Time(cfg);
	};
	
	Scale.TimeCat = __webpack_require__(314);
	Scale.timeCat = function(cfg) {
	  return new Scale.TimeCat(cfg);
	};
	
	Scale.I_TYPE = 'identity';
	// 判定是否是分类类型
	Scale.isCategory = function(type) {
	  if (type === 'cat') {
	    return true;
	  }
	  var c = Util.ucfirst(type);
	  if (Scale[c] && Scale[c].superclass && Scale[c].superclass.type === 'cat') {
	    return true;
	  }
	  return false;
	};
	
	module.exports = Scale;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the base class of scale
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	var Util = __webpack_require__(169);
	
	/**
	 * 度量的构造函数
	 * @class  Scale
	 */
	var Scale = function(cfg) {
	  Util.mix(this, cfg);
	  this.init();
	};
	
	Util.augment(Scale, {
	
	  /**
	   * 格式化函数,输出文本或者tick时的格式化函数
	   * @type {Function}
	   */
	  formatter: null,
	
	  /**
	   * 输出的值域
	   * @type {Array}
	   */
	  range: [0, 1],
	
	  /**
	   * 度量的标记
	   * @type {Array}
	   */
	  ticks: null,
	
	  /**
	   * 参与度量计算的值，可选项
	   * @type {Array}
	   */
	  values: [],
	
	  /**
	   * 度量初始化
	   * @protected
	   */
	  init: function() {
	
	  },
	  /**
	   * 获取该度量的ticks,返回的是多个对象，
	   *   - text: tick 的文本
	   *   - value: 对应的度量转换后的值
	   * <code>
	   *   [
	   *     {text: 0,value:0},
	   *     {text: 1,value:0.2},
	   *     {text: 2,value:0.4},
	   *     {text: 3,value:0.6},
	   *     {text: 4,value:0.8},
	   *     {text: 5,value:1}
	   *   ]
	   * </code>
	   * @param {Number} count 输出tick的个数的近似值，默认是 10
	   * @return {Array}
	   */
	  getTicks: function() {
	    var self = this;
	    var ticks = self.ticks;
	    var rst = [];
	    Util.each(ticks, function(tick) {
	      var obj;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: self.getText(tick),
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  },
	  /**
	   * 获取格式化后的文本
	   * @param  {*} value 输入的数据
	   * @return {String} 格式化的文本
	   */
	  getText: function(value) {
	    var formatter = this.formatter;
	    value = formatter ? formatter(value) : value;
	    if (Util.isNull(value) || !value.toString) {
	      value = '';
	    }
	    return value.toString();
	  },
	  /**
	   * 输出的值域最小值
	   * @protected
	   * @return {Number}
	   */
	  rangeMin: function() {
	    return this.range[0];
	  },
	  /**
	   * 输出的值域最大值
	   * @protected
	   * @return {Number}
	   */
	  rangeMax: function() {
	    var range = this.range;
	    return range[range.length - 1];
	  },
	  /**
	   * 度量转换后的结果，翻转回输入域
	   * @param  {Number} value
	   * @return {*} 度量的输入值
	   */
	  invert: function(/* value */) {
	    // return value;
	  },
	  /**
	   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等
	   * @param  {*} value 传入的值
	   * @return {Number} 转换的值
	   */
	  translate: function(value) {
	    return value;
	  },
	  /**
	   * 进行度量转换
	   * @param  {*} value 输入值
	   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]
	   */
	  scale: function(/* value */) {
	    // return value;
	  },
	  /**
	   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等
	   * @return {Scale}
	   */
	  clone: function() {
	    var self = this;
	    var constr = self.constructor;
	    var cfg = {};
	    Util.each(self, function(v, k) {
	      cfg[k] = self[k];
	    });
	    return new constr(cfg);
	  },
	  /**
	   * 更改度量的属性信息
	   * @param  {Object} info 属性信息
	   */
	  change: function(info) {
	    this.ticks = null;
	    Util.mix(this, info);
	    this.init();
	    return this;
	  }
	});
	
	module.exports = Scale;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Scale = __webpack_require__(299);
	var Util = __webpack_require__(169);
	var Auto = __webpack_require__(301);
	
	/**
	 * 线性度量
	 * @name linear
	 * @memberOf Scale
	 */
	var Linear = function(cfg) {
	  Linear.superclass.constructor.call(this, cfg);
	};
	
	
	Util.extend(Linear, Scale);
	
	Util.augment(Linear, {
	  type: 'linear',
	  /**
	   * 是否线性
	   * @type {Boolean}
	   */
	  isLinear: true,
	  min: null,
	  max: null,
	
	  /**
	   * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks
	   * @type {Boolean}
	   */
	  nice: false,
	  /**
	   * 自动生成标记时的个数
	   * @type {Number}
	   */
	  tickCount: null,
	  tickInterval: null, // 坐标轴点之间的间距，指的是真实数据的差值
	
	  init: function() {
	    var self = this;
	    if (!self.ticks) {
	      self.min = self.translate(self.min);
	      self.max = self.translate(self.max);
	      self.initTicks();
	    } else {
	      var ticks = self.ticks;
	      var firstValue = self.translate(ticks[0]);
	      var lastValue = self.translate(ticks[ticks.length - 1]);
	      if (Util.isNull(self.min) || self.min > firstValue) {
	        self.min = firstValue;
	      }
	      if (Util.isNull(self.max) || self.max < lastValue) {
	        self.max = lastValue;
	      }
	    }
	  },
	  calculateTicks: function() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    var tmp = Auto.caculate({
	      min: min,
	      max: max,
	      minCount: count,
	      maxCount: count,
	      interval: interval
	    });
	    return tmp.ticks;
	  },
	  // 初始化ticks
	  initTicks: function() {
	    var self = this;
	    var calTicks = self.calculateTicks();
	    if (self.nice) { // 如果需要优化显示的tick
	      self.ticks = calTicks;
	      self.min = calTicks[0];
	      self.max = calTicks[calTicks.length - 1];
	    } else {
	      var ticks = [];
	      Util.each(calTicks, function(tick) {
	        if (tick >= self.min && tick <= self.max) {
	          ticks.push(tick);
	        }
	      });
	      self.ticks = ticks;
	    }
	  },
	  // override scale
	  scale: function(value) {
	    if (value === null || value === undefined) {
	      return NaN;
	    }
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	
	    var percent = (value - min) / (max - min);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  },
	  // override invert
	  invert: function(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    return this.min + percent * (this.max - this.min);
	  }
	});
	
	module.exports = Linear;


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	var gAuto = {
	  caculate: __webpack_require__(302),
	  Time: {
	    caculate: __webpack_require__(304)
	  },
	  Category: {
	    caculate: __webpack_require__(305)
	  }
	};
	
	module.exports = gAuto;


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自动计算数字坐标轴
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	var MIN_COUNT = 5;
	var MAX_COUNT = 7;
	var intervalArray = [0, 1, 2, 3, 4, 5, 10];
	var isNull = Util.isNull;
	var AutoUtil = __webpack_require__(303);
	
	var NumberAuto = function(info) {
	  var min = info.min; // min ,max 不能为空
	  var max = info.max;
	  var interval = info.interval;
	  var ticks = [];
	  var minCount = info.minCount || MIN_COUNT;
	  var maxCount = info.maxCount || MAX_COUNT;
	  var avgCount = (minCount + maxCount) / 2;
	  var count;
	
	  if (Util.isNull(min)) {
	    min = 0;
	  }
	  if (Util.isNull(max)) {
	    max = 0;
	  }
	  if (max === min) {
	    if (min === 0) {
	      max = interval ? interval : 1;
	    } else {
	      if (min > 0) {
	        min = interval ? max - interval : 0;
	      } else {
	        max = interval ? max + interval : 0;
	      }
	    }
	    if (max - min < 5 && !interval && max - min >= 1) {
	      interval = 1;
	    }
	  }
	
	  if (isNull(interval)) {
	    // 计算间距
	    var temp = (max - min) / (avgCount - 1);
	    interval = AutoUtil.snapFactorTo(temp, intervalArray, 'ceil');
	    if (maxCount !== minCount) {
	      count = parseInt((max - min) / interval, 10);
	      if (count > maxCount) {
	        count = maxCount;
	      }
	      if (count < minCount) {
	        count = minCount;
	      }
	      // 不确定tick的个数时，使得tick偏小
	      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), intervalArray, 'floor');
	    } else {
	      count = avgCount;
	    }
	  }
	  if (info.interval || maxCount !== minCount) {
	    // 校正 max 和 min
	    max = AutoUtil.snapMultiple(max, interval, 'ceil'); // 向上逼近
	    min = AutoUtil.snapMultiple(min, interval, 'floor'); // 向下逼近
	    count = Math.round((max - min) / interval);
	    min = Util.fixedBase(min, interval);
	    max = Util.fixedBase(max, interval);
	  } else {
	    avgCount = parseInt(avgCount, 10); // 取整
	    var avg = (max + min) / 2;
	    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');
	    var sideCount = Math.floor((avgCount - 2) / 2);
	    var maxTick = avgTick + sideCount * interval;
	    var minTick;
	    if (avgCount % 2 === 0) {
	      minTick = avgTick - sideCount * interval;
	    } else {
	      minTick = avgTick - (sideCount + 1) * interval;
	    }
	    if (maxTick < max) {
	      maxTick = maxTick + interval;
	    }
	    if (minTick > min) {
	      minTick = minTick - interval;
	    }
	    max = Util.fixedBase(maxTick, interval);
	    min = Util.fixedBase(minTick, interval);
	  }
	
	  ticks.push(min);
	  for (var i = 1; i < count; i++) {
	    ticks.push(Util.fixedBase(interval * i + min, interval));
	  }
	  if (ticks[ticks.length - 1] < max) {
	    ticks.push(max);
	  }
	  return {
	    min: min,
	    max: max,
	    interval: interval,
	    count: count,
	    ticks: ticks
	  };
	};
	
	module.exports = NumberAuto;


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview 计算方法
	 * @author dxq613@gmail.com
	 */
	
	// 获取系数
	function getFactor(v) {
	  var factor = 1;
	
	  while (v > 10) {
	    factor = factor * 10;
	    v = v / 10;
	  }
	
	  while (v < 1) {
	    factor = factor / 10;
	    v = v * 10;
	  }
	  return factor;
	}
	
	// 取小于当前值的
	function arrayFloor(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	
	  var pre = values[0];
	
	  if (value < values[0]) {
	    return NaN;
	  }
	
	  if (value >= values[length - 1]) {
	    return values[length - 1];
	  }
	  for (var i = 1; i < values.length; i++) {
	    if (value < values[i]) {
	      break;
	    }
	    pre = values[i];
	  }
	
	  return pre;
	}
	
	// 大于当前值的第一个
	function arrayCeiling(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	  // var pre = values[0];
	  var rst;
	  if (value > values[length - 1]) {
	    return NaN;
	  }
	  if (value < values[0]) {
	    return values[0];
	  }
	
	  for (var i = 1; i < values.length; i++) {
	    if (value <= values[i]) {
	      rst = values[i];
	      break;
	    }
	    // pre = values[i];
	  }
	
	  return rst;
	}
	
	var Util = {
	  // 获取逼近的数值
	  snapFactorTo: function(v, arr, snapType) { // 假设 v = -512,isFloor = true
	    if (isNaN(v)) {
	      return NaN;
	    }
	    var factor = 1; // 计算系数
	    if (v !== 0) {
	      if (v < 0) {
	        factor = -1;
	      }
	      v = v * factor; // v = 512
	      var tmpFactor = getFactor(v);
	      factor = factor * tmpFactor; // factor = -100
	
	      v = v / tmpFactor; // v = 5.12
	    }
	    if (snapType === 'floor') {
	      v = Util.snapFloor(arr, v); // v = 5
	    } else if (snapType === 'ceil') {
	      v = Util.snapCeiling(arr, v); // v = 6
	    } else {
	      v = Util.snapTo(arr, v); // 四舍五入 5
	    }
	    return v * factor;
	  },
	  // 获取逼近的倍数
	  snapMultiple: function(v, base, snapType) {
	    var div;
	    if (snapType === 'ceil') {
	      div = Math.ceil(v / base);
	    } else if (snapType === 'floor') {
	      div = Math.floor(v / base);
	    } else {
	      div = Math.round(v / base);
	    }
	    return div * base;
	  },
	  /**
	   * 获取逼近的值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的值
	   */
	  snapTo: function(values, value) {
	    // 这里假定values是升序排列
	    var floorVal = arrayFloor(values, value);
	    var ceilingVal = arrayCeiling(values, value);
	    if (isNaN(floorVal) || isNaN(ceilingVal)) {
	      if (values[0] >= value) {
	        return values[0];
	      }
	      var last = values[values.length - 1];
	      if (last <= value) {
	        return last;
	      }
	    }
	    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {
	      return floorVal;
	    }
	    return ceilingVal;
	  },
	  /**
	   * 获取逼近的最小值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最小值
	   */
	  snapFloor: function(values, value) {
	    // 这里假定values是升序排列
	    return arrayFloor(values, value);
	  },
	  /**
	   * 获取逼近的最大值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最大值
	   */
	  snapCeiling: function(values, value) {
	    // 这里假定values是升序排列
	    return arrayCeiling(values, value);
	  }
	};
	
	module.exports = Util;


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算时间坐标轴
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	var MAX_COUNT = 6;
	var snapTimeArray = [1, 2, 4, 6, 8, 12];
	var MINUTE_MS = 60 * 1000;
	var HOUR_MS = 3600 * 1000;
	var DAY_MS = 24 * 3600 * 1000;
	var AutoUtil = __webpack_require__(303);
	
	function getYear(date) {
	  return new Date(date).getFullYear();
	}
	
	function createYear(year) {
	  return new Date(year, 0, 1).getTime();
	}
	
	function getMonth(date) {
	  return new Date(date).getMonth();
	}
	
	function diffMonth(min, max) {
	  var minYear = getYear(min);
	  var maxYear = getYear(max);
	  var minMonth = getMonth(min);
	  var maxMonth = getMonth(max);
	  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;
	}
	
	function creatMonth(year, month) {
	  return new Date(year, month, 1).getTime();
	}
	
	function diffDay(min, max) {
	  return Math.ceil((max - min) / DAY_MS);
	}
	
	function diffHour(min, max) {
	  return Math.ceil((max - min) / HOUR_MS);
	}
	
	function diffMinus(min, max) {
	  return Math.ceil((max - min) / (60 * 1000));
	}
	
	var TimeAuto = function(info) {
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var minInterval = info.minInterval;
	  var ticks = [];
	
	  // 如果最大值和最小值相等，则设置最大值大于最小值一天
	  if (max === min) {
	    max = min + DAY_MS;
	  }
	
	  // 计算间距
	  if (Util.isNull(interval)) {
	    var innerTime = max - min;
	    var dms = DAY_MS; // 天代表的秒
	    var yms = 365 * dms; // 年代表的秒
	    var yfactor;
	    var year;
	    var month;
	    var date;
	    var day;
	
	    interval = parseInt(innerTime / (info.maxCount || MAX_COUNT), 10);
	    if (minInterval && minInterval > interval) {
	      interval = minInterval;
	    }
	    yfactor = interval / yms;
	    var minYear = getYear(min);
	
	    // 大于半年
	    if (yfactor > 0.51) {
	      year = Math.ceil(yfactor);
	      var maxYear = getYear(max);
	
	      for (var i = minYear; i <= maxYear + year; i = i + year) {
	        ticks.push(createYear(i));
	      }
	      interval = null;
	    } else if (yfactor > 0.0834) { // 大于一个月
	      year = getYear(min);
	      month = Math.ceil(yfactor / 0.0834);
	      var mmMoth = getMonth(min);
	      var dMonths = diffMonth(min, max);
	
	      for (var j = 0; j <= dMonths + month; j = j + month) {
	        ticks.push(creatMonth(minYear, j + mmMoth));
	      }
	      interval = null;
	    } else if (interval > dms * 0.5) { // 大于一天
	      date = new Date(min);
	      year = date.getFullYear();
	      month = date.getMonth(min);
	      day = Math.ceil(interval / dms);
	
	      var mday = date.getDate();
	      var ddays = diffDay(min, max);
	      interval = day * dms;
	      for (var k = 0; k < ddays + day; k = k + day) {
	        ticks.push(new Date(year, month, mday + k).getTime());
	      }
	    } else if (interval > HOUR_MS) { // 大于一个小时
	      date = new Date(min);
	      year = date.getFullYear();
	      month = date.getMonth(min);
	      day = date.getDate();
	      var hour = date.getHours();
	      var hours = AutoUtil.snapTo(snapTimeArray, Math.ceil(interval / HOUR_MS));
	      var dHours = diffHour(min, max);
	      interval = hours * HOUR_MS;
	
	      for (var p = 0; p <= dHours + hours; p = p + hours) {
	        ticks.push(new Date(year, month, day, hour + p).getTime());
	      }
	    } else if (interval > MINUTE_MS) { // 最小单位是分钟
	      var dMinus = diffMinus(min, max);
	      var minutes = Math.ceil(interval / MINUTE_MS);
	      interval = minutes * MINUTE_MS;
	
	      for (var q = 0; q <= dMinus + minutes; q = q + minutes) {
	        ticks.push(min + q * MINUTE_MS);
	      }
	    } else {
	      if (interval < 1000) {
	        interval = 1000;
	      }
	      min = Math.floor(min / 1000) * 1000;
	      var dSeconds = Math.ceil((max - min) / 1000);
	      var seconds = Math.ceil(interval / 1000);
	
	      interval = seconds * 1000;
	
	      for (var l = 0; l < dSeconds + seconds; l = l + seconds) {
	        ticks.push(min + l * 1000);
	      }
	    }
	  }
	
	  if (!ticks.length) {
	    min = Math.floor(min / 1000) * 1000;
	    max = Math.ceil(max / 1000) * 1000;
	    var count = (max - min) / interval;
	    for (var m = 0; m <= count; m++) {
	      ticks.push(Util.fixedBase(interval * m + min, interval));
	    }
	  }
	
	  return {
	    max: max,
	    min: min,
	    interval: interval,
	    ticks: ticks,
	    count: ticks.length
	  };
	};
	
	module.exports = TimeAuto;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算分类的的坐标点
	 * @author dxq613@gmail.com
	 */
	
	var MAX_COUNT = 8;
	var Util = __webpack_require__(169);
	function getSimpleArray(data) {
	  var arr = [];
	  Util.each(data, function(sub) {
	    if (Util.isArray(sub)) {
	      arr = arr.concat(sub);
	    } else {
	      arr.push(sub);
	    }
	  });
	  return arr;
	}
	module.exports = function(info) {
	  var rst = {};
	  var ticks = [];
	  var tickCount = info.maxCount || MAX_COUNT;
	
	  var categories = getSimpleArray(info.data);
	  if (categories.length <= tickCount + tickCount / 2) {
	    ticks = [].concat(categories);
	  } else {
	    var length = categories.length;
	    var step = parseInt(length / (tickCount - 1), 10);
	
	    var groups = categories.map(function(e, i) {
	      return i % step === 0 ? categories.slice(i, i + step) : null;
	    }).filter(function(e) {
	      return e;
	    });
	
	    ticks.push(categories[0]);
	    for (var i = 1; (i < groups.length) && (i < tickCount - 1); i++) {
	      ticks.push(groups[i][0]);
	    }
	
	    ticks.push(categories[length - 1]);
	  }
	
	  rst.categories = categories;
	  rst.ticks = ticks;
	  return rst;
	};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the scale function to process the categories
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Scale = __webpack_require__(299);
	var Util = __webpack_require__(169);
	var Auto = __webpack_require__(301);
	
	var Category = function(cfg) {
	  Category.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Category, Scale);
	
	Util.augment(Category, {
	  type: 'cat',
	  tickCount: null,
	  /**
	   * 是否分类度量
	   * @type {Boolean}
	   */
	  isCategory: true,
	  // 初始化
	  init: function() {
	    var self = this;
	    var values = self.values;
	    var tickCount = self.tickCount;
	
	    Util.each(values, function(v, i) {
	      values[i] = v.toString();
	    });
	    if (!self.ticks) {
	      var ticks = values;
	      if (tickCount) {
	        var temp = Auto.Category.caculate({
	          maxCount: tickCount,
	          data: values
	        });
	        ticks = temp.ticks;
	      }
	      this.ticks = ticks;
	    }
	  },
	  // 覆写获取文本
	  getText: function(value) {
	    if (this.values.indexOf(value) > -1) {
	      value = value;
	    } else if (Util.isNumber(value)) {
	      value = this.values[Math.round(value)];
	    }
	
	    return Category.superclass.getText.call(this, value);
	  },
	  // 将文本翻译成对应的索引
	  translate: function(value) {
	    var index = this.values.indexOf(value);
	    if (index === -1 && Util.isNumber(value)) {
	      index = value;
	    } else if (index === -1) {
	      index = NaN;
	    }
	    return index;
	  },
	  // 覆写度量运算
	  scale: function(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var percent;
	
	    if (Util.isString(value) || this.values.indexOf(value) !== -1) {
	      value = this.translate(value);
	    }
	    if (this.values.length > 1) {
	      percent = (value) / (this.values.length - 1);
	    } else {
	      percent = value;
	    }
	    return rangeMin + percent * (rangeMax - rangeMin);
	  },
	  // 覆写翻转度量运算,翻转回的是索引值
	  invert: function(value) {
	    if (Util.isString(value)) { // 如果已经是字符串
	      return value;
	    }
	    var min = this.rangeMin();
	    var max = this.rangeMax();
	
	    // 归一到 范围内
	    if (value < min) {
	      value = min;
	    }
	    if (value > max) {
	      value = max;
	    }
	    var percent = (value - min) / (max - min);
	    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;
	    index = index || 0;
	    return this.values[index];
	  }
	});
	
	module.exports = Category;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 使用pow进行度量计算
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Linear = __webpack_require__(300);
	
	// 求以a为次幂，结果为b的基数，如 x^^a = b;求x
	function calBase(a, b) {
	  var e = Math.E;
	  var value = Math.pow(e, Math.log(b) / a); // 使用换底公式求底
	  return value;
	}
	/**
	 * 度量的Pow计算
	 * @class Scale.Log
	 */
	var Pow = function(cfg) {
	  Pow.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Pow, Linear);
	
	Util.augment(Pow, {
	
	  type: 'pow',
	
	  /**
	   * 进行pow计算的基数
	   * @type {Number}
	   */
	  exponent: 2,
	
	  /**
	   * @override
	   * pow 的坐标点的个数控制在10个以下
	   * @type {Number}
	   */
	  tickCount: 12,
	
	  calculateTicks: function() {
	    var self = this;
	    var exponent = self.exponent;
	    var min;
	    var max = Math.ceil(calBase(exponent, self.max));
	
	    if (self.min >= 0) {
	      min = Math.round(calBase(exponent, self.min));
	    } else {
	      min = 0;
	    }
	    if (min > max) {
	      var tmp = max;
	      max = min;
	      min = tmp;
	    }
	    var count = max - min;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];
	
	    for (var i = min; i < max + avg; i = i + avg) {
	      ticks.push(Math.pow(i, exponent));
	    }
	    return ticks;
	  },
	  // 获取度量计算时，value占的定义域百分比
	  getScalePercent: function(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    var exponent = this.exponent;
	    var percent = (calBase(exponent, value) - calBase(exponent, min)) / (calBase(exponent, max) - calBase(exponent, min));
	    return percent;
	  },
	  // override scale
	  scale: function(value) {
	    var percent = this.getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  },
	  // override invert
	  invert: function(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    var exponent = this.exponent;
	    var max = calBase(exponent, this.max);
	    var min = calBase(exponent, this.min);
	    var tmp = percent * (max - min) + min;
	    return Math.pow(tmp, exponent);
	  }
	});
	
	module.exports = Pow;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 使用度量，进行log转换
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Linear = __webpack_require__(300);
	
	// 计算log
	function log(a, b) {
	  if (a === 1) {
	    return 1;
	  }
	  return Math.log(b) / Math.log(a);
	}
	
	/**
	 * 度量的log计算
	 * @class Scale.Log
	 */
	var Log = function(cfg) {
	  Log.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Log, Linear);
	
	Util.augment(Log, {
	
	  type: 'log',
	
	  /**
	   * 进行log计算的基数
	   * @type {Number}
	   */
	  base: 2,
	
	  /**
	   * @override
	   * log 的坐标点的个数控制在10个以下
	   * @type {Number}
	   */
	  tickCount: 10,
	
	  _minTick: null,
	  calculateTicks: function() {
	    var self = this;
	    var base = self.base;
	    var minTick;
	    if (self.min < 0) {
	      throw new Error('The minimum value must be greater than zero');
	    }
	    var maxTick = log(base, self.max);
	
	    if (self.min > 0) {
	      minTick = Math.floor(log(base, self.min));
	    } else {
	      var values = self.values;
	      var positiveMin = self.max; // 查找大于0的第一个值, 如果都小于0，默认为1
	      Util.each(values, function(value) {
	        if (value > 0 && value < positiveMin) {
	          positiveMin = value;
	        }
	      });
	      if (positiveMin === self.max) {
	        positiveMin = self.max / base;
	      }
	      if (positiveMin > 1) {
	        positiveMin = 1;
	      }
	      minTick = Math.floor(log(base, positiveMin));
	      self._minTick = minTick;
	      self.positiveMin = positiveMin;
	    }
	    var count = maxTick - minTick;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];
	
	    for (var i = minTick; i < maxTick + avg; i = i + avg) {
	      ticks.push(Math.pow(base, i));
	    } /**/
	    if (self.min === 0) {
	      ticks.unshift(0);
	    }
	    return ticks;
	  },
	  // 获取度量计算时，value占的定义域百分比
	  getScalePercent: function(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    // 如果值小于等于0，则按照0处理
	    if (value <= 0) {
	      return 0;
	    }
	    var base = this.base;
	    var positiveMin = this.positiveMin;
	    // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示
	    if (positiveMin) {
	      min = positiveMin * 1 / base;
	    }
	    var percent;
	    // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例
	    if (value < positiveMin) {
	      percent = (value / positiveMin) / (log(base, max) - log(base, min));
	    } else {
	      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));
	    }
	    return percent;
	  },
	  // override scale
	  scale: function(value) {
	    var percent = this.getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  },
	  // override invert
	  invert: function(value) {
	    var percent;
	    var base = this.base;
	    var max = log(base, this.max);
	    var rangeMin = this.rangeMin();
	    var range = (this.rangeMax() - rangeMin);
	    var min;
	    var positiveMin = this.positiveMin;
	    if (positiveMin) {
	      if (value === 0) {
	        return 0;
	      }
	      min = log(base, positiveMin / base);
	      var appendPercent = (1 / (max - min)) * range; // 0 到 positiveMin的占比
	      if (value < appendPercent) { // 落到 0 - positiveMin 之间
	        return value / appendPercent * positiveMin;
	      }
	    } else {
	      min = log(base, this.min);
	    }
	    percent = (value - rangeMin) / (range);
	    var tmp = percent * (max - min) + min;
	    return Math.pow(base, tmp);
	  }
	});
	
	module.exports = Log;


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The data is replaced with constant
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Scale = __webpack_require__(299);
	var Util = __webpack_require__(169);
	
	var Identity = function(cfg) {
	  Identity.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Identity, Scale);
	
	Util.augment(Identity, {
	  type: 'identity',
	  value: null,
	  getText: function() {
	    return this.value.toString();
	  },
	  scale: function() {
	    return 1;
	  },
	  invert: function() {
	    return this.value;
	  }
	});
	
	module.exports = Identity;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Linear = __webpack_require__(300);
	var Util = __webpack_require__(169);
	var Auto = __webpack_require__(301);
	var DateUtil = __webpack_require__(311);
	var TimeUtil = __webpack_require__(313);
	
	var Time = function(cfg) {
	  Time.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Time, Linear);
	
	Util.augment(Time, {
	  type: 'time',
	  mask: 'yyyy-mm-dd',
	  init: function() {
	    var self = this;
	    var values = self.values;
	    if (values) { // 重新计算最大最小值
	      var timeStamps = [];
	      var min = Infinity; // 最小值
	      var secondMin = min; // 次小值
	      var max = 0;
	      // 使用一个循环，计算min,max,secondMin
	      Util.each(values, function(v) {
	        var timeStamp = self._toTimeStamp(v);
	        if (min > timeStamp) {
	          secondMin = min;
	          min = timeStamp;
	        } else if (secondMin > timeStamp) {
	          secondMin = timeStamp;
	        }
	        if (max < timeStamp) {
	          max = timeStamp;
	        }
	        timeStamps.push(timeStamp);
	      });
	      // 存在多个值时，设置最小间距
	      if (values.length > 1) {
	        self.minTickInterval = secondMin - min;
	      }
	      if (Util.isNull(self.min) || self._toTimeStamp(self.min) > min) {
	        self.min = min;
	      }
	      if (Util.isNull(self.max) || self._toTimeStamp(self.max) < max) {
	        self.max = max;
	      }
	    }
	    Time.superclass.init.call(self);
	  },
	  calculateTicks: function() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    var tmp = Auto.Time.caculate({
	      min: min,
	      max: max,
	      minCount: count,
	      maxCount: count,
	      interval: interval,
	      minInterval: self.minTickInterval
	    });
	    return tmp.ticks;
	  },
	  getText: function(value) {
	    var formatter = this.formatter;
	    value = this.translate(value);
	    value = formatter ? formatter(value) : DateUtil.format(value, this.mask);
	    return value;
	  },
	  scale: function(value) {
	    if (Util.isString(value)) {
	      value = this.translate(value);
	    }
	    return Time.superclass.scale.call(this, value);
	  },
	  // 格式化成时间
	  translate: function(value) {
	    return this._toTimeStamp(value);
	  },
	  // 将时间转换为时间戳
	  _toTimeStamp: function(value) {
	    return TimeUtil.toTimeStamp(value);
	  }
	});
	
	module.exports = Time;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var gDate = __webpack_require__(312);
	
	module.exports = gDate;


/***/ }),
/* 312 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview 日期Util类
	 * @author dxq613@gmial.com
	 */
	
	"use strict";
	
	var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
	
	function dateParse(val) {
	  if (val instanceof Date) {
	    return val;
	  }
	  return new Date(val);
	}
	
	function DateAdd(strInterval, NumDay, dtDate) {
	  var dtTmp = new Date(dtDate);
	  if (isNaN(dtTmp)) {
	    dtTmp = new Date();
	  }
	  NumDay = parseInt(NumDay, 10);
	  switch (strInterval) {
	    case 's':
	      dtTmp = new Date(dtTmp.getTime() + (1000 * NumDay));
	      break;
	    case 'n':
	      dtTmp = new Date(dtTmp.getTime() + (60000 * NumDay));
	      break;
	    case 'h':
	      dtTmp = new Date(dtTmp.getTime() + (3600000 * NumDay));
	      break;
	    case 'd':
	      dtTmp = new Date(dtTmp.getTime() + (86400000 * NumDay));
	      break;
	    case 'w':
	      dtTmp = new Date(dtTmp.getTime() + ((86400000 * 7) * NumDay));
	      break;
	    case 'm':
	      dtTmp = new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + NumDay, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());
	      break;
	    case 'y':
	      //alert(dtTmp.getFullYear());
	      dtTmp = new Date(dtTmp.getFullYear() + NumDay, dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());
	      //alert(dtTmp);
	      break;
	  }
	  return dtTmp;
	}
	
	var dateFormat = function() {
	  var token = /w{1}|d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
	    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
	    timezoneClip = /[^-+\dA-Z]/g,
	    pad = function(val, len) {
	      val = String(val);
	      len = len || 2;
	      while (val.length < len) {
	        val = '0' + val;
	      }
	      return val;
	    },
	    // Some common format strings
	    masks = {
	      'default': 'ddd mmm dd yyyy HH:MM:ss',
	      shortDate: 'm/d/yy',
	      //mediumDate:   'mmm d, yyyy',
	      longDate: 'mmmm d, yyyy',
	      fullDate: 'dddd, mmmm d, yyyy',
	      shortTime: 'h:MM TT',
	      //mediumTime:   'h:MM:ss TT',
	      longTime: 'h:MM:ss TT Z',
	      isoDate: 'yyyy-mm-dd',
	      isoTime: 'HH:MM:ss',
	      isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
	      isoUTCDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",
	
	      //added by jayli
	      localShortDate: 'yy年mm月dd日',
	      localShortDateTime: 'yy年mm月dd日 hh:MM:ss TT',
	      localLongDate: 'yyyy年mm月dd日',
	      localLongDateTime: 'yyyy年mm月dd日 hh:MM:ss TT',
	      localFullDate: 'yyyy年mm月dd日 w',
	      localFullDateTime: 'yyyy年mm月dd日 w hh:MM:ss TT'
	
	    },
	
	    // Internationalization strings
	    i18n = {
	      dayNames: [
	        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
	        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',
	        '星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'
	      ],
	      monthNames: [
	        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
	        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
	      ]
	    };
	
	  // Regexes and supporting functions are cached through closure
	  return function(date, mask, utc) {
	
	    // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
	    if (arguments.length === 1 && Object.prototype.toString.call(date) === '[object String]' && !/\d/.test(date)) {
	      mask = date;
	      date = undefined;
	    }
	
	    // Passing date through Date applies Date.parse, if necessary
	    date = date ? new Date(date) : new Date();
	    if (isNaN(date)) {
	      throw SyntaxError('invalid date');
	    }
	
	    mask = String(masks[mask] || mask || masks['default']);
	
	    // Allow setting the utc argument via the mask
	    if (mask.slice(0, 4) === 'UTC:') {
	      mask = mask.slice(4);
	      utc = true;
	    }
	
	    var _ = utc ? 'getUTC' : 'get',
	      d = date[_ + 'Date'](),
	      D = date[_ + 'Day'](),
	      m = date[_ + 'Month'](),
	      y = date[_ + 'FullYear'](),
	      H = date[_ + 'Hours'](),
	      M = date[_ + 'Minutes'](),
	      s = date[_ + 'Seconds'](),
	      L = date[_ + 'Milliseconds'](),
	      o = utc ? 0 : date.getTimezoneOffset(),
	      flags = {
	        d: d,
	        dd: pad(d, undefined),
	        ddd: i18n.dayNames[D],
	        dddd: i18n.dayNames[D + 7],
	        w: i18n.dayNames[D + 14],
	        m: m + 1,
	        mm: pad(m + 1, undefined),
	        mmm: i18n.monthNames[m],
	        mmmm: i18n.monthNames[m + 12],
	        yy: String(y).slice(2),
	        yyyy: y,
	        h: H % 12 || 12,
	        hh: pad(H % 12 || 12, undefined),
	        H: H,
	        HH: pad(H, undefined),
	        M: M,
	        MM: pad(M, undefined),
	        s: s,
	        ss: pad(s, undefined),
	        l: pad(L, 3),
	        L: pad(L > 99 ? Math.round(L / 10) : L, undefined),
	        t: H < 12 ? 'a' : 'p',
	        tt: H < 12 ? 'am' : 'pm',
	        T: H < 12 ? 'A' : 'P',
	        TT: H < 12 ? 'AM' : 'PM',
	        Z: utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
	        o: (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
	        S: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10]
	      };
	
	    return mask.replace(token, function($0) {
	      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
	    });
	  };
	}();
	
	/**
	 * 日期的工具方法
	 * @class Chart.Date
	 * @singleton
	 */
	var DateUtil = {
	  /**
	   * 日期加法
	   * @param {String} strInterval 加法的类型，s(秒),n(分),h(时),d(天),w(周),m(月),y(年)
	   * @param {Number} Num     数量，如果为负数，则为减法
	   * @param {Date} dtDate    起始日期，默认为此时
	   */
	  add: function(strInterval, Num, dtDate) {
	    return DateAdd(strInterval, Num, dtDate);
	  },
	  /**
	   * 小时的加法
	   * @param {Number} hours 小时
	   * @param {Date} date 起始日期
	   */
	  addHour: function(hours, date) {
	    return DateAdd('h', hours, date);
	  },
	  /**
	   * 分的加法
	   * @param {Number} minutes 分
	   * @param {Date} date 起始日期
	   */
	  addMinute: function(minutes, date) {
	    return DateAdd('n', minutes, date);
	  },
	  /**
	   * 秒的加法
	   * @param {Number} seconds 秒
	   * @param {Date} date 起始日期
	   */
	  addSecond: function(seconds, date) {
	    return DateAdd('s', seconds, date);
	  },
	  /**
	   * 天的加法
	   * @param {Number} days 天数
	   * @param {Date} date 起始日期
	   */
	  addDay: function(days, date) {
	    return DateAdd('d', days, date);
	  },
	  /**
	   * 增加周
	   * @param {Number} weeks 周数
	   * @param {Date} date  起始日期
	   */
	  addWeek: function(weeks, date) {
	    return DateAdd('w', weeks, date);
	  },
	  /**
	   * 增加月
	   * @param {Number} months 月数
	   * @param {Date} date  起始日期
	   */
	  addMonths: function(months, date) {
	    return DateAdd('m', months, date);
	  },
	  /**
	   * 增加年
	   * @param {Number} years 年数
	   * @param {Date} date  起始日期
	   */
	  addYear: function(years, date) {
	    return DateAdd('y', years, date);
	  },
	  /**
	   * 日期是否相等，忽略时间
	   * @param  {Date}  d1 日期对象
	   * @param  {Date}  d2 日期对象
	   * @return {Boolean}  是否相等
	   */
	  isDateEquals: function(d1, d2) {
	
	    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
	  },
	  /**
	   * 日期时间是否相等，包含时间
	   * @param  {Date}  d1 日期对象
	   * @param  {Date}  d2 日期对象
	   * @return {Boolean}  是否相等
	   */
	  isEquals: function(d1, d2) {
	    if (d1 === d2) {
	      return true;
	    }
	    if (!d1 || !d2) {
	      return false;
	    }
	    if (!d1.getTime || !d2.getTime) {
	      return false;
	    }
	    return d1.getTime() === d2.getTime();
	  },
	  /**
	   * 字符串是否是有效的日期类型
	   * @param {String} str 字符串
	   * @return 字符串是否能转换成日期
	   */
	  isDateString: function(str) {
	    return dateRegex.test(str);
	  },
	  /**
	   * 将日期格式化成字符串
	   * @param  {Date} date 日期
	   * @param  {String} mask 格式化方式
	   * @param  {Date} utc  是否utc时间
	   * @return {String}    日期的字符串
	   */
	  format: function(date, mask, utc) {
	    return dateFormat(date, mask, utc);
	  },
	  /**
	   * 转换成日期
	   * @param  {String|Date} date 字符串或者日期
	   * @return {Date}    日期对象
	   */
	  parse: function(date) {
	    if (typeof date === 'string') {
	      date = date.replace(/-/g, '/');
	    }
	    return dateParse(date);
	  },
	  /**
	   * 当前天
	   * @return {Date} 当前天 00:00:00
	   */
	  today: function() {
	    var now = new Date();
	    return new Date(now.getFullYear(), now.getMonth(), now.getDate());
	  },
	  /**
	   * 返回当前日期
	   * @return {Date} 日期的 00:00:00
	   */
	  getDate: function(date) {
	    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
	  }
	};
	
	module.exports = DateUtil;


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 提取公共代码到util方法
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	
	module.exports = {
	  toTimeStamp: function(value) {
	    if (Util.isString(value)) {
	      if (value.indexOf('T') > 0) {
	        value = new Date(value).getTime();
	      } else {
	        value = new Date(value.replace(/-/ig, '/')).getTime();
	      }
	    }
	    if (Util.isDate(value)) {
	      value = value.getTime();
	    }
	    return value;
	  }
	};


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 时间数据作为分类类型
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Category = __webpack_require__(306);
	var Util = __webpack_require__(169);
	var DateUtil = __webpack_require__(311);
	var Auto = __webpack_require__(301);
	var TimeUtil = __webpack_require__(313);
	
	// 分组分类
	var TimeCategory = function(cfg) {
	  TimeCategory.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(TimeCategory, Category);
	
	Util.augment(TimeCategory, {
	  type: 'timeCat',
	  mask: 'yyyy-mm-dd HH:MM:ss',
	  tickCount: 5,
	  init: function() {
	    var self = this;
	    var values = this.values;
	    values.sort(function(v1, v2) {
	      v1 = self._toTimeStamp(v1);
	      v2 = self._toTimeStamp(v2);
	      return v1 - v2;
	    });
	    // 针对时间分类类型，会将时间统一转换为时间戳
	    Util.each(values, function(v, i) {
	      values[i] = self._toTimeStamp(v);
	    });
	    this.ticks = this.calculateTicks(true);
	  },
	  /**
	   * 计算 ticks
	   * @param  {[boolean]} formated 是否将 ticks 按照指定的 mask 格式化
	   * @return {[array]}          返回 ticks 数组
	   */
	  calculateTicks: function(formated) {
	    var self = this;
	    var count = self.tickCount;
	    var temp = Auto.Category.caculate({
	      maxCount: count,
	      data: self.values
	    });
	
	    var ticks = temp.ticks;
	    if (formated) {
	      Util.each(ticks, function(value, index) {
	        ticks[index] = DateUtil.format(value, self.mask);
	      });
	    }
	    return ticks;
	  },
	  /**
	   * 转成成索引值，只接受原始数据或者索引值
	   * @param  {[type]} value 原始数据或者索引值
	   * @return {[number]}       索引值
	   */
	  translate: function(value) {
	    value = this._toTimeStamp(value);
	    var index = this.values.indexOf(value);
	
	    if (index === -1) {
	      if (Util.isNumber(value) && value < this.values.length) {
	        index = value;
	      } else {
	        index = NaN;
	      }
	    }
	    return index;
	  },
	  /**
	   * 将数据转换为指定范围内的值
	   * @param  {[number|strinf]} value 索引值或者原始数据
	   * @return {[number]}       [description]
	   */
	  scale: function(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var index = this.translate(value);
	    var percent;
	
	    if (this.values.length === 1) {
	      percent = index;
	    } else if (index > -1) {
	      percent = (index) / (this.values.length - 1);
	    } else {
	      percent = 0;
	    }
	
	    return rangeMin + percent * (rangeMax - rangeMin);
	  },
	  /**
	   * 根据 value 或者对应的文本
	   * @param  {[number|string]} value 索引值或者原始数据
	   * @return {[string]}       文本
	   */
	  getText: function(value) {
	    var result = '';
	    var index = this.translate(value);
	    if (index > -1) {
	      result = this.values[index];
	    }
	
	    var formatter = this.formatter;
	    result = parseInt(result, 10);
	    result = formatter ? formatter(result) : DateUtil.format(result, this.mask);
	    return result;
	  },
	  getTicks: function() {
	    var self = this;
	    var ticks = this.calculateTicks(false);
	    var rst = [];
	    Util.each(ticks, function(tick) {
	      var obj;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: self.getText(tick),
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  },
	  // 将时间转换为时间戳
	  _toTimeStamp: function(value) {
	    return TimeUtil.toTimeStamp(value);
	  }
	});
	
	module.exports = TimeCategory;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview tooltip生成的辅助类
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Global = __webpack_require__(264);
	var Components = __webpack_require__(244);
	var Tooltip = Components.Tooltip;
	var TYPE_SHOW_MARKERS = ['line', 'area', 'path', 'areaStack'];
	var TYPE_SHOW_CROSSHAIRS = ['line', 'area'];
	
	function _indexOfArray(items, item) {
	  var rst = -1;
	  Util.each(items, function(sub, index) {
	    if (sub.title === item.title && sub.name === item.name && sub.value === item.value && sub.color === item.color) {
	      rst = index;
	      return false;
	    }
	  });
	  return rst;
	}
	
	// 判断是否有样式
	function _hasClass(dom, className) {
	  if (!dom) {
	    return false;
	  }
	  var cls = '';
	  if (!dom.className) return false;
	  if (!Util.isNull(dom.className.baseVal)) {
	    cls = dom.className.baseVal;
	  } else {
	    cls = dom.className;
	  }
	  return cls.indexOf(className) !== -1;
	}
	
	function _isParent(dom, cls) {
	  var parent = dom.parentNode;
	  var rst = false;
	  while (parent && parent !== document.body) {
	    if (_hasClass(parent, cls)) {
	      rst = true;
	      break;
	    }
	    parent = parent.parentNode;
	  }
	  return rst;
	}
	
	// 去除重复的值, 去除不同图形相同数据，只展示一份即可
	function _uniqItems(items) {
	  var tmp = [];
	  Util.each(items, function(item) {
	    var index = _indexOfArray(tmp, item);
	    if (index === -1) {
	      tmp.push(item);
	    } else {
	      tmp[index] = item;
	    }
	  });
	  return tmp;
	}
	
	
	var TooltipAssist = function(cfg) {
	  this.cfg = {
	    visible: true // 是否可用
	  };
	  Util.mix(this, cfg);
	};
	
	Util.augment(TooltipAssist, {
	  cfg: null, // tooltip的配置信息
	  tooltip: null,
	  markerGroup: null,
	  chart: null,
	  timeStamp: 0, // 时间戳
	  get: function(name) {
	    return this[name];
	  },
	  set: function(name, value) {
	    this[name] = value;
	  },
	  // 根据图形设置默认 crosshairs 配置
	  _setTooltipCrosshairs: function() {
	    var self = this;
	    var defaultCfg = Util.mix({}, Global.tooltip);
	    var chart = self.get('chart');
	    var geoms = chart.getAllGeoms();
	    var shapes = [];
	    Util.each(geoms, function(geom) {
	      var type = geom.get('type');
	      if (Util.indexOf(shapes, type) === -1) {
	        shapes.push(type);
	      }
	    });
	    if (geoms.length && geoms[0].get('coord').type === 'cartesian') {
	      if (shapes.length === 1 && Util.indexOf(TYPE_SHOW_CROSSHAIRS, shapes[0]) > -1) {
	        Util.mix(defaultCfg, {
	          crosshairs: true
	        });
	      }
	    }
	
	    return defaultCfg;
	  },
	  _showMarkers: function(items, coord) {
	    var self = this;
	    var markerGroup = self.get('markerGroup');
	    markerGroup.setMatrix(coord.get('matrix').clone());
	    markerGroup.clear();
	    Util.each(items, function(item) {
	      var point = item.point;
	      var cfg = Util.mix({}, markerGroup.get('marker'), {
	        x: Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x,
	        y: Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y,
	        stroke: item.color
	      });
	      markerGroup.addShape('Marker', {
	        attrs: cfg
	      });
	    });
	    markerGroup.show();
	  },
	  _getCanvas: function() {
	    return this.chart.get('frontCanvas');
	  },
	  _setTooltip: function(title, point, items) {
	    var self = this;
	    var tooltip = self.get('tooltip');
	    var prePoint = self.get('prePoint');
	    if (!prePoint || (prePoint.x !== point.x || prePoint.y !== point.y)) {
	      items = _uniqItems(items);
	      self.set('prePoint', point);
	
	      var chart = self.chart;
	      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	      if (!tooltip.get('visible')) {
	        chart.fire('tooltipshow', {
	          x: x,
	          y: y,
	          tooltip: tooltip
	        });
	      }
	      chart.fire('tooltipchange', {
	        tooltip: tooltip,
	        x: x,
	        y: y,
	        items: items
	      });
	      tooltip.setContent(title, items);
	      tooltip.setPosition(x, y);
	      tooltip.show();
	    }
	  },
	  _clearActive: function() {
	    var self = this;
	    var chart = self.get('chart');
	    var geoms = chart.getAllGeoms();
	    Util.each(geoms, function(geom) {
	      geom.clearShapeActived();
	    });
	  },
	  _bindEvent: function() {
	    var self = this;
	    var chart = self.chart;
	    chart.on('plotmove', Util.wrapBehavior(self, 'onMouseMove'));
	    chart.on('plotleave', Util.wrapBehavior(self, 'onMouseOut'));
	  },
	  _offEvent: function() {
	    var self = this;
	    var chart = self.chart;
	    chart.off('plotmove', Util.getWrapBehavior(self, 'onMouseMove'));
	    chart.off('plotleave', Util.getWrapBehavior(self, 'onMouseOut'));
	  },
	  renderTooltip: function() {
	    var self = this;
	    if (self.get('tooltip')) {
	      return;
	    }
	    var chart = self.get('chart');
	    var cfg = self.get('cfg');
	    var defaultCfg = self._setTooltipCrosshairs();
	    // var defaultCfg = Util.mix({}, Global.tooltip);
	    cfg = Util.mix({
	      plotRange: chart.get('plotRange'),
	      capture: false
	    }, defaultCfg, cfg);
	    cfg.visible = false;
	    var canvas = self._getCanvas();
	    if (!self.get('markerGroup')) {
	      var markerGroup = canvas.addGroup({
	        zIndex: 11,
	        capture: false,
	        marker: Global.tooltipMarker
	      });
	
	      self.set('markerGroup', markerGroup);
	    }
	    var tooltip = canvas.addGroup(Tooltip, cfg);
	    canvas.sort();
	    self.set('tooltip', tooltip);
	    // tooltip.get('custom') && self.bindCustomDivEvent();
	    self._bindEvent();
	  },
	  // bindCustomDivEvent: function() {
	  //   var self = this;
	  //   var tooltip = self.get('tooltip');
	  //   var customDiv = tooltip.get('customDiv');
	  //   customDiv.addEventListener('mouseout', function() {
	  //     self.onMouseOut();
	  //   });
	  // },
	  showTooltip: function(point, views) {
	    var self = this;
	    if ((views && !views.length) || !point) {
	      return;
	    }
	    var cfg = self.get('cfg');
	
	    var tooltipMap = cfg && cfg.map;
	    var markersItems = [];
	    var items = [];
	
	    Util.each(views, function(view) {
	      if (!view.get('tooltipEnable')) { // 如果不显示tooltip，则跳过
	        return true;
	      }
	      var geoms = view.get('geoms');
	      var coord = view.get('coord');
	      Util.each(geoms, function(geom) {
	        var geomContainer = geom.get('container');
	        if (geomContainer.get('visible')) {
	          var frames = geom.get('frames');
	          if (geom.isShareTooltip()) {
	            var points = [];
	            Util.each(frames, function(frame) {
	              var tmpPoint = geom.findPoint(point, frame);
	              if (tmpPoint) {
	                points.push(tmpPoint);
	                var subItems = geom.getTipItems(tmpPoint, tooltipMap);
	                items = items.concat(subItems);
	                var type = geom.get('type');
	                if (Util.indexOf(TYPE_SHOW_MARKERS, type) !== -1) {
	                  markersItems = markersItems.concat(subItems);
	                }
	              }
	            });
	            if (points.length) {
	              geom.setActiveByPoint(points[0]);
	            }
	          } else {
	            var shape = geom.getSingleShape(point, frames);
	            if (shape && shape.get('visible')) {
	              items = geom.getTipItems(shape.get('origin'), tooltipMap);
	              geom.setShapesActive([shape]);
	            }
	          }
	        }
	      });
	      if (markersItems.length) {
	        self._showMarkers(markersItems, coord);
	      }
	    });
	
	    if (items.length) {
	      var first = items[0];
	      // 存在多个点时，同时不存在折线图
	      if (markersItems.length) {
	        point = first.point;
	        var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	        var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	        var coord = views[0].get('coord');
	        point = coord.trans(x, y, 1);
	      }
	      var title = first.title || first.name;
	      self._setTooltip(title, point, items);
	    } else { // 不显示tooltip
	      self._clearActive();
	    }
	  },
	  hideTooltip: function() {
	    var self = this;
	    var tooltip = self.get('tooltip');
	    var chart = self.chart;
	    var markerGroup = self.get('markerGroup');
	    var canvas = self._getCanvas();
	    self.set('prePoint', null);
	    tooltip.hide();
	    markerGroup.hide();
	    self._clearActive();
	    chart.fire('tooltiphide', {
	      tooltip: tooltip
	    });
	    // 元素hide后需要重新绘制画布才会生效
	    canvas.draw();
	  },
	  onMouseMove: function(ev) {
	    var lastTimeStamp = this.get('timeStamp');
	    var timeStamp = +new Date();
	    if (!this.cfg.visible || !ev.views || !ev.views.length) {
	      return;
	    }
	    var self = this;
	    var point = {
	      x: ev.x,
	      y: ev.y
	    };
	    if ((timeStamp - lastTimeStamp) > 16) {
	      self.showTooltip(point, ev.views);
	      this.set('timeStamp', timeStamp);
	    }
	  },
	  onMouseOut: function(ev) {
	    var self = this;
	    var tooltip = self.get('tooltip');
	    var canvas = self._getCanvas();
	    if (!tooltip.get('visible')) {
	      return;
	    }
	    if (ev && ev.target !== canvas) {
	      return;
	    }
	    if (ev && tooltip.get('custom') && ev.toElement && (_hasClass(ev.toElement, 'ac-tooltip') || _isParent(ev.toElement, 'ac-tooltip'))) {
	      return;
	    }
	    self.hideTooltip();
	  },
	  clear: function() {
	    var self = this;
	    var tooltip = self.get('tooltip');
	    var markerGroup = self.get('markerGroup');
	
	    tooltip && tooltip.remove();
	    markerGroup && markerGroup.remove();
	    self.set('tooltip', null);
	    self.set('markerGroup', null);
	    self.set('prePoint', null);
	    self._offEvent();
	  }
	});
	
	module.exports = TooltipAssist;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 图例辅助类
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Components = __webpack_require__(244);
	var Legend = Components.Legend;
	var Global = __webpack_require__(264);
	var ShapeFactory = __webpack_require__(317);
	var MARGIN = 16;
	var MARGIN_LEGEND = 16;
	var FIELD_VALUE = 'value';
	var FIELD_ORIGIN = '_origin';
	
	function isSameAttrValues(items) {
	  var rst = true;
	  var first = items[0];
	  var firstValue = first.attrValue;
	  for (var i = 1; i < items.length; i++) {
	    if (items[i].attrValue !== firstValue) {
	      rst = false;
	      break;
	    }
	  }
	  return rst;
	}
	
	function findItems(items, value) {
	  var rst = [];
	  Util.each(items, function(item) {
	    if (item[FIELD_VALUE].endsWith(value)) {
	      rst.push(item);
	    }
	  });
	  return rst;
	}
	
	function combineTitle(name, combinValue) {
	  return name + '（' + combinValue + '）';
	}
	
	function getTitle(scale) {
	  return scale.alias || scale.dim;
	}
	
	function filterItems(items, dim, filterVals) {
	  if (!filterVals) {
	    return;
	  }
	
	  Util.each(items, function(item) {
	    item.checked = filterVals.indexOf(item.value) !== -1;
	  });
	}
	
	function _snapEqual(v1, v2, scale) {
	  var equals;
	  if (Util.isNull(scale)) {
	    return false;
	  }
	  v1 = scale.translate(v1);
	  v2 = scale.translate(v2);
	  if (scale.isCategory) {
	    equals = (v1 === v2);
	  } else {
	    equals = Math.abs(v1 - v2) <= 1;
	  }
	  return equals;
	}
	
	var LegendAssist = function(cfg) {
	  this.legendCfg = {
	    visible: true
	  };
	  Util.mix(this, cfg);
	  this.clear();
	  var chart = this.chart;
	  this.container = chart.get('frontCanvas');
	  this.plotRange = chart.get('plotRange');
	};
	
	Util.augment(LegendAssist, {
	  plotRange: null, // 绘图区域 Plot.Range
	  container: null, // 画布 Canvas.Group
	  chart: null,
	  position: 'right',
	  legendCfg: {},
	
	  _isFiltered: function(scale, values, value) {
	    if (!scale.isCategory) {
	      return true;
	    }
	    var rst = false;
	    value = scale.invert(value);
	    Util.each(values, function(val) {
	      rst = rst || scale.getText(val) === scale.getText(value);
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  },
	  _getFilterVals: function(dim, view, isSingeSelected) {
	    var filters = view.get('options').filters || {};
	    if (isSingeSelected) {
	      filters[dim] = [];
	    }
	    return filters[dim];
	  },
	  _isDimInView: function(dim, dimValue, view) {
	    var flag = false;
	    var dimArr = dim.split('*');
	    var dimValueArr = dimValue.split('*');
	    Util.each(dimArr, function(aDim, idx) {
	      var dimScale = view.getScale(aDim);
	      if (dimScale && dimScale.values) {
	        var value = dimValueArr[idx];
	        flag = Util.inArray(dimScale.values, value);
	      }
	    });
	
	    return flag;
	  },
	  _addFilterVals: function(dim, dimValue, view, isSingeSelected) {
	    if (this._isDimInView(dim, dimValue, view)) {
	      var filterVals = this._getFilterVals(dim, view, isSingeSelected);
	      filterVals.push(dimValue);
	    }
	  },
	  _removeFilterVals: function(dim, dimValue, legendItems, view) {
	    if (this._isDimInView(dim, dimValue, view)) {
	      var filterVals = this._getFilterVals(dim, view);
	      if (!filterVals) {
	        filterVals = legendItems.slice(0);
	      }
	      Util.remove(filterVals, dimValue);
	      view.filter(dim, filterVals);
	    }
	  },
	  _bindClickEvent: function(legend, dim) {
	    var self = this;
	    var chart = self.chart;
	    var views = chart.getViews();
	
	    var values = [];
	    var items = legend.get('items');
	    Util.each(items, function(item) {
	      values.push(item[FIELD_VALUE]);
	    });
	
	    legend.on('itemchecked', function(ev) {
	      var dimValue = ev.item.value;
	      var isSingeSelected = this.get('mode') === 'single';
	      self._addFilterVals(dim, dimValue, chart, isSingeSelected);
	      Util.each(views, function(view) {
	        self._addFilterVals(dim, dimValue, view, isSingeSelected);
	      });
	      chart.repaint();
	    });
	
	    legend.on('itemunchecked', function(ev) {
	      if (this.get('mode') === 'single') {
	        return;
	      }
	      var dimValue = ev.item.value;
	      self._removeFilterVals(dim, dimValue, values, chart);
	
	      Util.each(views, function(view) {
	        self._removeFilterVals(dim, dimValue, values, view);
	      });
	      chart.repaint();
	    });
	
	    legend.on('itemfiltered', function(ev) {
	      var range = ev.range;
	      var geoms = chart.getAllGeoms();
	      Util.each(geoms, function(geom) {
	        var shapes = geom.getShapes();
	        Util.each(shapes, function(shape) {
	          var value = shape.get('origin')[FIELD_ORIGIN][dim];
	          if (value < range[0] || value > range[1]) {
	            shape.set('visible', false);
	          } else {
	            shape.set('visible', true);
	          }
	        });
	        geom.setShapesFiltered(shapes);
	      });
	    });
	  },
	  _bindActiveEvent: function(legend, dim) {
	    var self = this;
	    var chart = self.chart;
	    legend.on('itemactived', function(ev) {
	      var dimValue = ev.item.value;
	      var geoms = chart.getAllGeoms();
	      Util.each(geoms, function(geom) {
	        var shapes = geom.getShapes();
	        var scale = geom.getScales()[dim];
	        var activeShapes = [];
	        Util.each(shapes, function(shape) {
	          var origin = shape.get('origin')[FIELD_ORIGIN];
	          if (_snapEqual(origin[dim], dimValue, scale)) {
	            activeShapes.push(shape);
	          }
	        });
	        geom.setShapesActive(activeShapes);
	      });
	    });
	
	    legend.on('itemunactived', function() {
	      var geoms = chart.getAllGeoms();
	      Util.each(geoms, function(geom) {
	        geom.clearShapeActived();
	      });
	    });
	  },
	  _getLayoutType: function(position) {
	    return (position === 'right' || position === 'left') ? 'vertical' : 'horizontal';
	  },
	  // 获取图例的宽度信息，最大值和总宽度
	  _getRegion: function(legends) {
	    var maxWidth = 0;
	    var totalWidth = 0;
	    Util.each(legends, function(legend) {
	      var bbox = legend.getBBox();
	      if (maxWidth < bbox.width) {
	        maxWidth = bbox.width;
	      }
	      totalWidth += bbox.width;
	    });
	    return {
	      maxWidth: maxWidth,
	      totalWidth: totalWidth
	    };
	  },
	  _alignLegend: function(legend, pre, region, position) {
	    var self = this;
	    var container = self.container;
	    var canvas = container.get('canvas');
	    var width = canvas.get('width');
	    var height = canvas.get('height');
	    var plotRange = self.plotRange;
	    var x = 0;
	    var y = 0;
	    var dx = legend.get('dx') || 0;
	    var dy = legend.get('dy') || 0;
	    var bbox = legend.getBBox();
	
	    if (position === 'left' || position === 'right') { // 垂直
	      var legendWidth = region.maxWidth;
	      if (plotRange) {
	        height = plotRange.br.y;
	        x = position === 'left' ? MARGIN : plotRange.br.x + MARGIN;
	      } else {
	        x = position === 'left' ? MARGIN : width - legendWidth + MARGIN;
	      }
	
	      y = height - bbox.height;
	      if (pre) {
	        y = pre.get('y') - bbox.height - MARGIN_LEGEND;
	      }
	    } else {
	      var statrX = 0;
	
	      if (plotRange) {
	        statrX = plotRange.bl.x + (plotRange.getWidth() - region.totalWidth) / 2;
	      }
	      x = statrX;
	      y = position === 'top' ? MARGIN : height - bbox.height - MARGIN;
	
	      if (pre) {
	        x = pre.get('x') + pre.getBBox().width + MARGIN_LEGEND;
	      }
	    }
	    legend.move(x + dx, y + dy);
	  },
	  _setItemChecked: function(legend, ev, isChecked, isSingeSelected) {
	    var self = this;
	    var container = self.container;
	    var chart = self.chart;
	    var canvas = chart.get('canvas');
	    var currentItem = ev.item;
	    var currentGeom = currentItem.geom;
	    var legendLi = ev.currentTarget;
	    var unCheckedColor = legend.get('unChecked');
	    var wordColor = currentItem.word.fill;
	
	    if (isSingeSelected) {
	      if (!isChecked) {
	        return;
	      }
	      var geoms = chart.getAllGeoms();
	      var itemsGroup = legend.get('itemsGroup').get('children');
	      Util.each(geoms, function(geom) {
	        if (currentGeom !== geom) {
	          geom.setVisible(false);
	        }
	      });
	
	      Util.each(itemsGroup, function(item) {
	        if (item !== currentItem) {
	          var children = item.get('children');
	          children[0].attr('fill', unCheckedColor);
	          children[1].attr('fill', unCheckedColor);
	          item.set('checked', false);
	        }
	      });
	    }
	
	    currentGeom.setVisible(isChecked);
	    currentItem.checked = isChecked;
	    legendLi.get('children')[0].attr('fill', isChecked ? currentItem.color : unCheckedColor);
	    legendLi.get('children')[1].attr('fill', isChecked ? wordColor : unCheckedColor);
	    legendLi.set('checked', isChecked);
	
	    container.draw();
	    canvas.draw();
	  },
	  addMixedLegend: function(items) {
	    var self = this;
	    if (!self.legendCfg.visible) {
	      return null;
	    }
	    var legendCfg = self.legendCfg;
	    var singleSelected = (legendCfg.mode === 'single');
	    var pointShape = ShapeFactory.getShape('point');
	    var markerType = legendCfg.marker || 'circle';
	
	    Util.each(items, function(item, idx) {
	      item.type = null;
	      item.marker = pointShape.getMarkerCfg(markerType, item);
	      item.word = Util.mix({
	        fill: '#333',
	        textBaseline: 'middle'
	      }, legendCfg.word);
	      if (singleSelected && idx > 0) {
	        var geom = item.geom;
	        geom.setVisible(false);
	        item.checked = false;
	      } else {
	        item.checked = true;
	      }
	    });
	
	    var container = self.container;
	    var position = this.getPosition();
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var legend = container.addGroup(Legend.Category, Util.mix({}, {
	      checkable: !(legendCfg.mode === false),
	      layout: self._getLayoutType(position),
	      items: items
	    }, Global.legend[position], legendCfg));
	    legends[position].push(legend);
	
	    legend.on('itemchecked', function(ev) {
	      self._setItemChecked(this, ev, true, singleSelected);
	    });
	
	    legend.on('itemunchecked', function(ev) {
	      self._setItemChecked(this, ev, false, singleSelected);
	    });
	
	    return legend;
	  },
	  getPosition: function(dim) {
	    var legendCfg = this.legendCfg;
	    var position = legendCfg.position || this.position;
	    if (legendCfg[dim] && legendCfg[dim].position) { // 如果对某个图例单独设置 position，则对 position 重新赋值
	      position = legendCfg[dim].position;
	    }
	    return position;
	  },
	  addLegend: function(scale, attr, geom, filterVals) {
	    var self = this;
	    if (!self.legendCfg.visible) {
	      return;
	    }
	
	    var legendCfg = self.legendCfg;
	    var dim = scale.dim;
	    if (legendCfg && legendCfg[dim] === false) {
	      return;
	    }
	
	    var position = self.getPosition(dim);
	
	    var dimLegendCfg = Util.mix(true, {
	      titleText: getTitle(scale),
	      attrType: attr.type
	    }, Global.legend[position], legendCfg, legendCfg[dim]);
	    dimLegendCfg.checkable = !(dimLegendCfg.mode === false);
	
	    var scales = attr.scales;
	    var items = [];
	    var legend;
	    var legendDim;
	    if (scales.length === 1 || scale.isLinear) { // 单个图例 或者第一个是连续图例
	      items = self._getLegendItems(scale, attr, geom, filterVals);
	      legendDim = scale.dim;
	      legend = self._addLegend(scale, dimLegendCfg, items, position, attr);
	    } else {
	      var nextScale = scales[1];
	      var ticks = scale.getTicks();
	      var tempItems = []; // 临时图例的数组，用户合并图例
	      legendDim = scale.dim + '*' + nextScale.dim;
	      if (dimLegendCfg.titleText) {
	        dimLegendCfg.titleText = combineTitle(getTitle(nextScale), getTitle(scale));
	      }
	      Util.each(ticks, function(tick) {
	        var value = scale.invert(tick.value);
	        var subItems = self._getCategoryItems(nextScale, attr, geom, filterVals, value);
	        if (isSameAttrValues(subItems)) {
	          var first = subItems[0];
	          first[FIELD_VALUE] = value;
	          first.name = scale.getText(value);
	          first.attrValue = value;
	          items.push(first);
	        } else {
	          tempItems = tempItems.concat(subItems);
	        }
	      });
	      if (tempItems.length) {
	        var nextTicks = nextScale.getTicks();
	        Util.each(nextTicks, function(tick) {
	          var value = nextScale.invert(tick.value);
	          var subItems = findItems(tempItems, value);
	          if (subItems.length === ticks.length && isSameAttrValues(subItems)) {
	            var first = subItems[0];
	            first[FIELD_VALUE] = '*' + value;
	            first.name = nextScale.getText(value);
	            first.attrValue = value;
	            items.push(first);
	          } else {
	            items = items.concat(subItems);
	          }
	        });
	      }
	
	      filterItems(items, legendDim, filterVals);
	      legend = self._addLegend(scale, dimLegendCfg, items, position, attr);
	    }
	
	    if (legend.get('checkable')) { // 图例可点击则注册点击事件
	      self._bindClickEvent(legend, legendDim);
	    }
	
	    self._bindActiveEvent(legend, legendDim);
	  },
	  _getLegendItems: function(scale, attr, geom, filterVals, combinValue) {
	    var self = this;
	    if (scale.isLinear) {
	      return self._getContinuousItems(scale, attr, combinValue);
	    }
	    return self._getCategoryItems(scale, attr, geom, filterVals, combinValue);
	  },
	  // 获取连续图例的图例项
	  _getContinuousItems: function(scale, attr, combinValue) {
	    var self = this;
	    var items = [];
	    var ticks = scale.getTicks();
	    var minValue;
	    var maxValue;
	
	    Util.each(ticks, function(v) {
	      var scaleValue = v.value;
	      var invertValue = scale.invert(scaleValue);
	      var attrValue = self._mappingValues(invertValue, attr, combinValue);
	
	      items.push({
	        name: v.text,
	        color: attrValue,
	        value: scaleValue
	      });
	      if (scaleValue === 0) {
	        minValue = true;
	      }
	      if (scaleValue === 1) {
	        maxValue = true;
	      }
	    });
	    if (!minValue) {
	      items.unshift({
	        name: scale.getText(scale.invert(0)),
	        color: self._mappingValues(scale.invert(0), attr, combinValue),
	        value: 0
	      });
	    }
	    if (!maxValue) {
	      items.push({
	        name: scale.getText(scale.invert(1)),
	        color: self._mappingValues(scale.invert(1), attr, combinValue),
	        value: 1
	      });
	    }
	    return items;
	  },
	  _getCategoryItems: function(scale, attr, geom, filterVals, combinValue) {
	    var self = this;
	    var ticks = scale.getTicks();
	    var legendCfg = self.legendCfg;
	    var items = [];
	    var shapeType = 'point';
	    var dim = scale.dim;
	    var shape = legendCfg.marker || (legendCfg[dim] && legendCfg[dim].marker) || 'circle';
	    var singleSelected = legendCfg.mode === 'single' || (legendCfg[dim] && legendCfg[dim].mode === 'single');
	    var wordCfg = legendCfg.word || (legendCfg[dim] && legendCfg[dim].word) || {};
	    var size;
	    var name;
	    Util.each(ticks, function(tick, idx) {
	      var text = tick.text;
	      name = text;
	      var scaleValue = tick.value;
	      var value = scale.invert(scaleValue);
	      var cfg = {
	        isInCircle: geom.isInCircle()
	      };
	      var attrValue = self._mappingValues(value, attr, combinValue);
	      if (attr.type === 'color') {
	        cfg.color = attrValue;
	      } else if (attr.type === 'shape') {
	        shapeType = geom.get('shapeType') || geom.get('type');
	        shape = attrValue;
	      } else if (attr.type === 'size') {
	        size = attrValue;
	      }
	      // 暂时先不开放自定义shape，仅允许更改现有的样式
	      var shapeObject = ShapeFactory.getShape(shapeType);
	      var marker = shapeObject.getMarkerCfg(shape, cfg);
	      if (!Util.isNull(size)) {
	        marker.radius = size;
	      }
	      var checked = true;
	      if (!Util.isNull(combinValue)) {
	        value = combinValue + '*' + value;
	        name = combineTitle(name, combinValue);
	      } else if (singleSelected) {
	        if (filterVals) {
	          checked = self._isFiltered(scale, filterVals, scaleValue);
	        } else {
	          checked = idx === 0 ? true : false;
	        }
	      } else {
	        checked = filterVals ? self._isFiltered(scale, filterVals, scaleValue) : true;
	      }
	
	      items.push({
	        name: name,
	        checked: checked,
	        type: null,
	        marker: marker,
	        attrValue: attrValue,
	        value: value,
	        word: Util.mix({
	          fill: '#333',
	          textBaseline: 'middle'
	        }, wordCfg)
	      });
	    });
	    return items;
	  },
	  // 映射属性值
	  _mappingValues: function(value, attr, combinValue) {
	    var rst;
	    if (Util.isNull(combinValue)) {
	      rst = attr.mappingValues(value).join('');
	    } else {
	      var values = [combinValue, value];
	      rst = attr.mappingValues.apply(attr, values).join('');
	    }
	    return rst;
	  },
	  _addLegend: function(scale, legendCfg, items, position, attr) {
	    var self = this;
	    var cfg;
	    var cons;
	    var layout = self._getLayoutType(position);
	    if (scale.isLinear) {
	      cons = Legend.Continuous;
	      cfg = Util.mix({
	        layout: layout,
	        attr: attr
	      }, legendCfg);
	    } else {
	      cons = Legend.Category;
	      var plotRange = self.plotRange;
	      var maxLength = (position === 'right' || position === 'left') ? plotRange.bl.y - plotRange.tr.y : plotRange.tr.x - plotRange.bl.x;
	      cfg = Util.mix(true, {
	        maxLength: maxLength,
	        layout: layout,
	        items: items
	      }, legendCfg);
	    }
	    cfg.items = items;
	    var container = self.container;
	    var legends = self.legends;
	    var legend = container.addGroup(cons, cfg);
	    legends[position] = legends[position] || [];
	    legends[position].push(legend);
	    return legend;
	  },
	  alignLegends: function() {
	    var self = this;
	    var legends = self.legends;
	    Util.each(legends, function(legendItems, position) {
	      var region = self._getRegion(legendItems);
	      Util.each(legendItems, function(legend, index) {
	        var pre = legendItems[index - 1];
	        self._alignLegend(legend, pre, region, position);
	      });
	    });
	
	    return this;
	  },
	  clear: function() {
	    var self = this;
	    var legends = self.legends;
	    Util.each(legends, function(legendItems) {
	      Util.each(legendItems, function(legend) {
	        legend.remove();
	      });
	    });
	    this.legends = {};
	  }
	});
	
	module.exports = LegendAssist;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape pc端shapes
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Shape = __webpack_require__(318);
	
	__webpack_require__(323);
	__webpack_require__(324);
	__webpack_require__(326);
	__webpack_require__(327);
	__webpack_require__(328);
	__webpack_require__(329);
	__webpack_require__(330);
	Shape.Path = Shape.Line;
	module.exports = Shape;


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape 的基类
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var shapeFactory = __webpack_require__(319);
	var PathUtil = __webpack_require__(320);
	var Util = __webpack_require__(169);
	
	Util.mix(shapeFactory.GeomShape, {
	  getMarkerCfg: function(type, cfg) {
	    var shape = this.getShape(type);
	    return shape.getMarkerCfg(cfg);
	  },
	  drawShape: function(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = shape.drawShape(cfg, container);
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      // 如果shape里有设置动画类型则用具体shape的动画，没有则用geom类的动画
	      gShape.animateType = gShape.animateType ? gShape.animateType : cfg.geomType;
	      gShape.id = cfg.id;
	      if (cfg.splitedIndex) gShape.id += 'splI' + cfg.splitedIndex;
	    }
	    return gShape;
	  },
	  // 激活状态
	  getActiveCfg: function(type, cfg) {
	    var shape = this.getShape(type);
	    return shape.getActiveCfg(cfg);
	  },
	  // 选中状态
	  getSelectedCfg: function(type, cfg) {
	    var shape = this.getShape(type);
	    return shape.getSelectedCfg(cfg);
	  }
	});
	
	Util.mix(shapeFactory.ShapeBase, {
	  getActiveCfg: function(/* cfg */) {
	    return {};
	  },
	  getSelectedCfg: function(/* cfg */) {
	    return {};
	  },
	  /**
	   * 设置坐标系
	   * @param {Coord} coord 坐标系
	   */
	  setCoord: function(coord) {
	    this._coord = coord;
	  },
	  /**
	   * 0～1 path 转 画布 path
	   * @param  {path} path
	   * @param  {Boolean} islineToArc
	   * @return {path} path
	   */
	  parsePath: function(path, islineToArc) {
	    var coord = this._coord;
	    path = Util.parsePathString(path);
	    if (coord.isPolar && islineToArc !== false) {
	      path = PathUtil.convertPolarPath(path, coord);
	    } else {
	      path = PathUtil.convertNormalPath(path, coord);
	    }
	    return path;
	  },
	  /**
	   * 0～1 point 转 画布 point
	   * @param  {point} point
	   * @return {point} point
	   */
	  parsePoint: function(point) {
	    var coord = this._coord;
	    return coord.convertPoint(point);
	  },
	  /**
	   * 0～1 points 转 画布 points
	   * @param  {points} points
	   * @return {points} points
	   */
	  parsePoints: function(points) {
	    if (!points) return false;
	    var coord = this._coord;
	    var rst = [];
	    Util.each(points, function(point) {
	      rst.push(coord.convertPoint(point));
	    });
	    return rst;
	  }
	});
	
	module.exports = shapeFactory;


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape 的基类
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = {};
	
	var GeomShape = {
	  defaultShapeType: null,
	  getShape: function(type) {
	    var self = this;
	    var shape = self[type] || self[self.defaultShapeType] || Shape.ShapeBase;
	    shape._coord = self._coord;
	    return shape;
	  },
	  getShapePoints: function(type, cfg) {
	    var shape = this.getShape(type);
	    return shape.getShapePoints(cfg);
	  },
	  drawShape: function(type, cfg, container) {
	    var self = this;
	    var shape = this.getShape(type);
	    return shape.drawShape(cfg, container);
	  }
	};
	
	var ShapeBase = {
	  _coord: null,
	  drawShape: function( /* cfg, container*/ ) {
	
	  },
	  getShapePoints: function( /* cfg */ ) {
	
	  }
	};
	
	// 注册 Geometry 获取图形的入口
	Shape.registGeom = function(geomType, cfg) {
	  var className = Util.ucfirst(geomType);
	  var geomObj = Util.mix({}, GeomShape, cfg);
	  Shape[className] = geomObj;
	  geomObj.className = className;
	  return geomObj;
	};
	
	// 注册图形
	Shape.registShape = function(geomType, shapeType, cfg) {
	  var className = Util.ucfirst(geomType);
	  var geomClass = Shape[className];
	  var defaultShape = geomClass.getShape();
	  var shapeObj = Util.mix({}, defaultShape, cfg);
	
	  geomClass[shapeType] = shapeObj;
	  return shapeObj;
	};
	
	// 获得Shape
	Shape.getShape = function(geomType) {
	  var self = this;
	  geomType = geomType || 'point';
	  geomType = Util.ucfirst(geomType);
	  return self[geomType] || Shape.ShapeBase;
	};
	Shape.GeomShape = GeomShape;
	Shape.ShapeBase = ShapeBase;
	
	module.exports = Shape;


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Path util
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Spline = __webpack_require__(321);
	
	function points2path(points, isInCircle, smooth) {
	  if (!points.length) {
	    return '';
	  }
	  var path = '';
	  var str = '';
	
	  if (points.length <= 2) { // 少于3个点不能使用smooth
	    smooth = false;
	  }
	
	  for (var i = 0, length = points.length; i < length; i++) {
	    var item = points[i];
	
	    if (i === 0) {
	      str = smooth ? 'M{x} {y} R' : 'M{x} {y}';
	    } else {
	      str = smooth ? ' {x} {y}' : 'L{x} {y}';
	    }
	
	    path += Util.substitute(str, item);
	  }
	
	  if (isInCircle) {
	    path += 'Z';
	  }
	  return path;
	}
	
	function getPointRadius(coord, point) {
	  var center = coord.getCenter();
	  var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	  return r;
	}
	
	function convertArr(arr, coord) {
	  var len = arr.length;
	  var tmp = [arr[0]];
	  for (var i = 1; i < len; i = i + 2) {
	    var point = coord.convertPoint({
	      x: arr[i],
	      y: arr[i + 1]
	    });
	    tmp.push(point.x, point.y);
	  }
	  return tmp;
	}
	
	function convertPolarPath(pre, cur, coord) {
	  var radius = coord.getRadius();
	  var inner = coord.get('inner') || 0;
	  var innerRadius = inner * radius;
	  var transposed = coord.isTransposed;
	  var startAngle = coord.get('startAngle');
	  var endAngle = coord.get('endAngle');
	
	  var prePoint = {
	    x: pre[1],
	    y: pre[2]
	  };
	  var curPoint = {
	    x: cur[1],
	    y: cur[2]
	  };
	  var rst = [];
	  innerRadius = innerRadius || 0;
	  var xDim = transposed ? 'y' : 'x';
	  // var yDim = transposed ? 'x' : 'y';
	  var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);
	  var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向
	  var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位
	  // var r = innerRadius + (radius - innerRadius) * curPoint[yDim]; // 如果坐标系发生reflect，此时不能直接使用 curPoint.y
	  var convertPoint = coord.convertPoint(curPoint);
	  var r = getPointRadius(coord, convertPoint);
	  if (r >= 0.5) { // 小于1像素的圆在图像上无法识别
	    if (angleRange === Math.PI * 2) {
	      var middlePoint = {
	        x: (curPoint.x + prePoint.x) / 2,
	        y: (curPoint.y + prePoint.y) / 2
	      };
	      var middleConvertPoint = coord.convertPoint(middlePoint);
	      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    } else {
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    }
	  }
	  return rst;
	}
	
	// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形
	function filterFullCirleLine(path) {
	  Util.each(path, function(subPath, index) {
	    var cur = subPath;
	    if (cur[0].toLowerCase() === 'a') {
	      var pre = path[index - 1];
	      var next = path[index + 1];
	      if (next && next[0].toLowerCase() === 'a') {
	        if (pre && pre[0].toLowerCase() === 'l') {
	          pre[0] = 'M';
	        }
	      } else if (pre && pre[0].toLowerCase() === 'a') {
	        if (next && next[0].toLowerCase() === 'l') {
	          next[0] = 'M';
	        }
	      }
	    }
	  });
	}
	
	var PathUtil = {
	  // 线的path
	  getLinePath: function(points, isInCircle, smooth) {
	    return points2path(points, isInCircle, smooth);
	  },
	  // get spline： 限定了范围的平滑线
	  getSplinePath: function(points, isInCircle) {
	    var data = [];
	    var first = points[0];
	    var prePoint = null;
	
	    Util.each(points, function(point) {
	      if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {
	        data.push(point.x);
	        data.push(point.y);
	        prePoint = point;
	      }
	    });
	    var constaint = [ // 范围
	      [0, 0],
	      [1, 1]
	    ];
	    var path = Spline.catmullRom2bezier(data, isInCircle, constaint);
	
	    return 'M' + first.x + ' ' + first.y + Util.parsePathArray(path);
	  },
	  getPointRadius: function(coord, point) {
	    var result = getPointRadius(coord, point);
	    return result;
	  },
	  getPointAngle: function(coord, point) {
	    var center = coord.getCenter();
	    var angle = Math.atan2(point.y - center.y, point.x - center.x);
	    return angle;
	  },
	  convertNormalPath: function(path, coord) {
	    var tmp = [];
	    Util.each(path, function(subPath) {
	      var action = subPath[0];
	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'l':
	        case 'c':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    return tmp;
	  },
	  convertPolarPath: function(path, coord) {
	    var tmp = [];
	    Util.each(path, function(subPath, index) {
	      var action = subPath[0];
	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'c':
	        case 'q':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'l':
	          var pre = path[index - 1];
	          var cur = subPath;
	          var transposed = coord.isTransposed;
	          // 是否半径相同，转换成圆弧
	          var equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];
	          if (equals) {
	            tmp = tmp.concat(convertPolarPath(pre, cur, coord));
	          } else { // y 不相等，所以直接转换
	            tmp.push(convertArr(subPath, coord));
	          }
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    filterFullCirleLine(tmp); // 过滤多余的直线
	    return tmp;
	  }
	};
	
	module.exports = PathUtil;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	var gSpline = __webpack_require__(322);
	
	module.exports = gSpline;


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	var Matrix = __webpack_require__(185);
	var Vector2 = Matrix.Vector2;
	
	function smoothBezier(points, smooth, isLoop, constraint) {
	  var cps = [];
	
	  var prevPoint;
	  var nextPoint;
	  var hasConstraint = !!constraint;
	  var min, max;
	  if (hasConstraint) {
	    min = new Vector2(Infinity, Infinity);
	    max = new Vector2(-Infinity, -Infinity);
	
	    for (var i = 0, l = points.length; i < l; i ++) {
	      var point = getPoint(points[i]);
	      min.min(point);
	      max.max(point);
	    }
	    min.min(getPoint(constraint[0]));
	    max.max(getPoint(constraint[1]));
	  }
	
	  for (var i = 0, len = points.length; i < len; i ++) {
	    var point = getPoint(points[i]);
	    if (isLoop) {
	      prevPoint = getPoint(points[i ? i - 1 : len - 1]);
	      nextPoint = getPoint(points[(i + 1) % len]);
	    } else {
	      if (i === 0 || i === len - 1) {
	        cps.push([point.x, point.y]);
	        continue;
	      } else {
	        prevPoint = getPoint(points[i - 1]);
	        nextPoint = getPoint(points[i + 1]);
	      }
	    }
	
	    var v = Vector2.sub(nextPoint, prevPoint);
	    pointScale(v, smooth);
	
	    var d0 = point.distanceTo(prevPoint);
	    var d1 = point.distanceTo(nextPoint);
	
	    var sum = d0 + d1;
	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }
	
	    var v1 = pointScale(v.clone(), -d0);
	    var v2 = pointScale(v.clone(), d1);
	
	    var cp0 = Vector2.add(point, v1);
	    var cp1 = Vector2.add(point, v2);
	
	    if (hasConstraint) {
	      cp0.max(min);
	      cp0.min(max);
	      cp1.max(min);
	      cp1.min(max);
	    }
	
	    cps.push([cp0.x, cp0.y]);
	    cps.push([cp1.x, cp1.y]);
	  }
	
	  if(isLoop) {
	    cps.push(cps.shift());
	  }
	  return cps;
	
	}
	
	function catmullRom2bezier(crp, z, constraint) {
	  var isLoop = !!z;
	
	  var pointList = [];
	
	  for (var i = 0, l = crp.length; i < l; i += 2) {
	    pointList.push([crp[i], crp[i + 1]]);
	  }
	
	  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);
	  var len = pointList.length;
	  var d1 = [];
	
	  var cp1;
	  var cp2;
	  var p;
	
	  for (var i = 0; i < len - 1; i++) {
	    cp1 = controlPointList[i * 2];
	    cp2 = controlPointList[i * 2 + 1];
	    p = pointList[i + 1];
	
	    d1.push(['C',
	      cp1[0],
	      cp1[1],
	      cp2[0],
	      cp2[1],
	      p[0],
	      p[1]
	    ]);
	  }
	
	  if(isLoop) {
	    cp1 = controlPointList[len];
	    cp2 = controlPointList[len + 1];
	    p = pointList[0];
	
	    d1.push(['C',
	      cp1[0],
	      cp1[1],
	      cp2[0],
	      cp2[1],
	      p[0],
	      p[1]
	    ]);
	  }
	  return d1;
	}
	
	function getPoint(v) {
	  return new Vector2(v[0], v[1]);
	}
	
	function pointScale(p, s) {
	  p.x *= s;
	  p.y *= s;
	  return p;
	}
	
	module.exports = {
	  catmullRom2bezier: catmullRom2bezier
	};
	
	
	
	
	
	
	
	
	
	
	


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview interval shapes
	 * @author dxq613@gmail.com
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(318);
	var PathUtil = __webpack_require__(320);
	var Global = __webpack_require__(264);
	
	// 获取柱状图的几个点
	function getRectPoints(cfg, isPyramid) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var width = cfg.size;
	  // 有3种情况，
	  // 1. y，x都不是数组
	  // 2. y是数组，x不是
	  // 3. x是数组，y不是
	  var ymin = y0;
	  var ymax = y;
	  if (Util.isArray(y)) {
	    ymax = y[1];
	    ymin = y[0];
	  }
	
	  var xmin;
	  var xmax;
	  if (Util.isArray(x)) {
	    xmin = x[0];
	    xmax = x[1];
	  } else {
	    xmin = x - width / 2;
	    xmax = x + width / 2;
	  }
	
	  var points = [];
	  points.push({
	    x: xmin,
	    y: ymin
	  }, {
	    x: xmin,
	    y: ymax
	  });
	
	  if (isPyramid) {
	    points.push({
	      x: xmax,
	      y: (ymax + ymin) / 2
	    });
	  } else {
	    points.push({
	      x: xmax,
	      y: ymax
	    }, {
	      x: xmax,
	      y: ymin
	    });
	  }
	
	  return points;
	}
	
	function getRectPath(points) {
	  var path = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    if (point) {
	      var action = i === 0 ? 'M' : 'L';
	      path.push([action, point.x, point.y]);
	    }
	  }
	  var first = points[0];
	  path.push(['L', first.x, first.y]);
	  path.push(['z']);
	  return path;
	}
	
	function getLinePoints(cfg) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var points = [];
	
	  if (Util.isArray(y)) {
	    Util.each(y, function(yItem, idx) {
	      points.push({
	        x: Util.isArray(x) ? x[idx] : x,
	        y: yItem
	      });
	    });
	  } else {
	    points.push({
	      x: x,
	      y: y
	    }, {
	      x: x,
	      y: y0
	    });
	  }
	
	  return points;
	}
	
	function getTickPoints(cfg) {
	  var x = cfg.x;
	  var y = Util.isArray(cfg.y) ? cfg.y[1] : cfg.y;
	  var y0 = Util.isArray(cfg.y) ? cfg.y[0] : cfg.y0;
	
	  var barWidth = cfg.size;
	  var points = [];
	
	  points.push({
	    x: x - barWidth / 2,
	    y: y
	  }, {
	    x: x + barWidth / 2,
	    y: y
	  }, {
	    x: x,
	    y: y
	  }, {
	    x: x,
	    y: y0
	  }, {
	    x: x - barWidth / 2,
	    y: y0
	  }, {
	    x: x + barWidth / 2,
	    y: y0
	  });
	
	  return points;
	}
	
	function getTickPath(points) {
	  var path = [];
	  path.push(
	    ['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y]
	  );
	  return path;
	}
	
	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.interval;
	  var attrs = Util.mix(true, {}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}
	
	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowInterval;
	  var attrs = Util.mix(true, {}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}
	
	function getFunnelPath(cfg, isFunnel) {
	  var path = [];
	  var points = cfg.points;
	  var nextPoints = cfg.nextPoints;
	  if (!Util.isNull(nextPoints)) {
	    path.push(
	      ['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']
	    );
	  } else if (isFunnel) {
	    path.push(
	      ['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']
	    );
	  } else {
	    path.push(
	      ['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z']
	    );
	  }
	
	  return path;
	}
	
	// 鼠标悬浮触发active状态
	function getActiveCfg(type) {
	  if (!type || type === 'rect') {
	    return Global.activeShape.interval;
	  }
	  return Global.activeShape.hollowInterval;
	}
	
	function getThetaCfg(point, coord) {
	  var r = coord.getRadius();
	  var inner = coord.get('inner');
	  var startAngle;
	  var endAngle;
	  var ir = r * inner;
	  var startPoint;
	  var endPoint;
	
	  if (!Util.isArray(point.x) && Util.isArray(point.y)) {
	    point.x = [point.x, point.x]; // 如果x是一个值，y是数组，将x转成数组
	  }
	  if (Util.isArray(point.x)) {
	    startPoint = {
	      x: point.x[0],
	      y: point.y[0]
	    };
	    endPoint = {
	      x: point.x[1],
	      y: point.y[1]
	    };
	    startAngle = PathUtil.getPointAngle(coord, startPoint);
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	    if (endAngle <= startAngle) { // 考虑占比百分百的情形
	      endAngle = endAngle + Math.PI * 2;
	    }
	  } else {
	    endPoint = point;
	    startAngle = coord.get('startAngle');
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	  }
	  return {
	    r: r,
	    ir: ir,
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}
	
	// 获取选中时的样式，当前仅支持饼图
	function getSelectedCfg(type, cfg) {
	  var coord = cfg.coord;
	  var point = cfg.point;
	  var r = 7.5;
	  var selectedCfg;
	  if (coord && coord.type === 'theta') {
	    var thetaCfg = getThetaCfg(point, coord);
	    var middleAngle = (thetaCfg.endAngle - thetaCfg.startAngle) / 2 + thetaCfg.startAngle;
	    var x = r * Math.cos(middleAngle);
	    var y = r * Math.sin(middleAngle);
	    selectedCfg = {
	      transform: [
	        ['t', x, y]
	      ]
	    };
	  }
	  return Util.mix({}, selectedCfg);
	}
	
	var Interval = Shape.registGeom('interval', {
	  defaultShapeType: 'rect',
	  getActiveCfg: function(type) {
	    return getActiveCfg(type);
	  },
	  getSelectedCfg: function(type, cfg) {
	    return getSelectedCfg(type, cfg);
	  }
	});
	
	// 默认柱状图
	Shape.registShape('interval', 'rect', {
	  getShapePoints: function(pointInfo) {
	    return getRectPoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var rectCfg = getFillAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    var symbol = isInCircle ? 'circle' : 'square';
	    return Util.mix({
	      symbol: symbol
	    }, rectCfg);
	  }
	});
	
	// 空心柱状图
	Shape.registShape('interval', 'hollowRect', {
	  getShapePoints: function(pointInfo) {
	    return getRectPoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var rectCfg = getLineAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    var symbol = isInCircle ? 'circle' : 'square';
	    return Util.mix({
	      symbol: symbol
	    }, rectCfg);
	  }
	});
	
	// 线形柱状图
	Shape.registShape('interval', 'line', {
	  getShapePoints: function(pointInfo) {
	    return getLinePoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    attrs.lineWidth = cfg.size || 1; // size 就是线的宽度
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'line'
	    }, lineCfg);
	  }
	});
	
	// 钉子形的柱状图
	Shape.registShape('interval', 'tick', {
	  getShapePoints: function(pointInfo) {
	    return getTickPoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getTickPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'tick'
	    }, lineCfg);
	  }
	});
	
	// 漏斗图
	Shape.registShape('interval', 'funnel', {
	  getShapePoints: function(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, true);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square'
	    }, funnelCfg);
	  }
	});
	
	// 金字塔图
	Shape.registShape('interval', 'pyramid', {
	  getShapePoints: function(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo, true);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, false);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square'
	    }, funnelCfg);
	  }
	});
	module.exports = Interval;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var PathUtil = __webpack_require__(320);
	var ShapeUtil = __webpack_require__(325);
	var Shape = __webpack_require__(318);
	var Global = __webpack_require__(264);
	var DOT_ARR = [2, 1];
	var DASH_ARR = [10, 5];
	
	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix(true, {}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}
	
	// get line path
	function getPath(cfg, smooth) {
	  var path = '';
	  var points = cfg.points;
	  var isInCircle = cfg.isInCircle;
	  if (!smooth) {
	    path += PathUtil.getLinePath(points, false);
	  } else {
	    path += PathUtil.getSplinePath(points, false);
	  }
	  if (isInCircle) {
	    path += 'z';
	  }
	  return Util.path2Absolute(path);
	}
	
	function _interpPoints(points, fn) {
	  var tmpPoints = [];
	  Util.each(points, function(point, index) {
	    var nextPoint = points[index + 1];
	    tmpPoints.push(point);
	    if (nextPoint) {
	      tmpPoints = tmpPoints.concat(fn(point, nextPoint));
	    }
	  });
	  return tmpPoints;
	}
	// 插值的图形path，不考虑null
	function _getInterPath(points) {
	  var path = '';
	  Util.each(points, function(point, index) {
	    var str = index === 0 ? 'M {x} {y}' : 'L {x} {y}';
	    path += Util.substitute(str, point);
	  });
	  return path;
	}
	// 插值的图形
	function _getInterPointShapeCfg(cfg, fn) {
	  var points = _interpPoints(cfg.points, fn);
	  return _getInterPath(points);
	}
	
	function _markerFn(x, y, r) {
	  return [
	    ['M', x - r, y],
	    ['L', x + r, y]
	  ];
	}
	
	function _smoothMarkerFn(x, y, r) {
	  return Util.path2Absolute([
	    ['M', x - r, y],
	    ['R', x - r / 2, y - r / 2, x, y, x + r / 2, y + r / 2, x + r, y]
	  ]);
	}
	// get marker cfg
	function _getMarkerCfg(cfg, smooth) {
	  return Util.mix({
	    symbol: smooth ? _smoothMarkerFn : _markerFn
	  }, getAttrs(cfg));
	}
	
	function _getInterMarkerCfg(cfg, fn) {
	  return Util.mix({
	    symbol: fn
	  }, getAttrs(cfg));
	}
	
	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var coord = shapeObj._coord;
	  var point = coord.convertPoint(cfg.points[0]);
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}
	
	// regist line geom
	var Line = Shape.registGeom('line', {
	  // 默认的shape
	  defaultShapeType: 'line',
	  getMarkerCfg: function(type, cfg) {
	    var lineObj = Line[type] || Line.line;
	    return lineObj.getMarkerCfg(cfg);
	  },
	  getActiveCfg: function(/* type */) {
	    return Global.activeShape.line;
	  },
	  drawShape: function(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.drawShape(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      // 如果shape里有设置动画类型则用具体shape的动画，没有则用geom类的动画
	      gShape.animateType = gShape.animateType ? gShape.animateType : cfg.geomType;
	      gShape.id = cfg.id;
	      if (cfg.splitedIndex) gShape.id += 'splI' + cfg.splitedIndex;
	    }
	    return gShape;
	  }
	});
	
	// draw line shape
	Shape.registShape('line', 'line', {
	  // 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	  getShapePoints: function(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});
	
	// 点线
	Shape.registShape('line', 'dot', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        lineDash: DOT_ARR
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});
	
	// 填充线
	Shape.registShape('line', 'fill', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    path.push(['z']);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        fill: attrs.stroke
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.fill = tmp.stroke;
	    return tmp;
	  }
	});
	
	// 断线 - - - -
	Shape.registShape('line', 'dash', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        lineDash: DASH_ARR
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = DASH_ARR;
	    return tmp;
	  }
	});
	
	// draw smooth line shape
	Shape.registShape('line', 'smooth', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, true);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg, true);
	  }
	});
	
	// 点线曲线
	Shape.registShape('line', 'dotSmooth', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, true);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        lineDash: DOT_ARR
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, true);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});
	
	Shape.registShape('line', 'hv', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function(point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: nextPoint.x,
	        y: point.y
	      });
	      return tmp;
	    });
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getInterMarkerCfg(cfg, function(x, y, r) {
	      return [
	        ['M', x - r, y - r],
	        ['L', x, y - r],
	        ['L', x, y],
	        ['L', x + r, y]
	      ];
	    });
	  }
	});
	
	Shape.registShape('line', 'vh', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function(point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: point.x,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getInterMarkerCfg(cfg, function(x, y, r) {
	      return [
	        ['M', x - r, y],
	        ['L', x, y],
	        ['L', x, y - r],
	        ['L', x + r, y - r]
	      ];
	    });
	  }
	});
	
	Shape.registShape('line', 'hvh', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function(point, nextPoint) {
	      var tmp = [];
	      var middlex = (nextPoint.x - point.x) / 2 + point.x;
	      tmp.push({
	        x: middlex,
	        y: point.y
	      });
	      tmp.push({
	        x: middlex,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getInterMarkerCfg(cfg, function(x, y, r) {
	      return [
	        ['M', x - r * 3 / 2, y],
	        ['L', x - r / 2, y],
	        ['L', x - r / 2, y - r / 2],
	        ['L', x + r / 2, y - r / 2],
	        ['L', x + r / 2, y],
	        ['L', x + r * 3 / 2, y]
	      ];
	    });
	  }
	});
	
	Shape.registShape('line', 'vhv', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function(point, nextPoint) {
	      var tmp = [];
	      var middley = (nextPoint.y - point.y) / 2 + point.y;
	      tmp.push({
	        x: point.x,
	        y: middley
	      });
	      tmp.push({
	        x: nextPoint.x,
	        y: middley
	      });
	      return tmp;
	    });
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getInterMarkerCfg(cfg, function(x, y, r) {
	      return [
	        ['M', x - r, y],
	        ['L', x - r, y - r / 2],
	        ['L', x, y - r / 2],
	        ['L', x, y - r],
	        ['L', x, y + r / 2],
	        ['L', x + r, y + r / 2]
	      ];
	    });
	  }
	});
	
	Line.spline = Line.smooth;
	
	module.exports = Line;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape util
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	var ShapeUtil = {
	  splitPoints: function(obj) {
	    var points = [];
	    var x = obj.x;
	    var y = obj.y;
	    y = Util.isArray(y) ? y : [y];
	    Util.each(y, function(yItem, index) {
	      var point = {
	        x: Util.isArray(x) ? x[index] : x,
	        y: yItem
	      };
	      points.push(point);
	    });
	    return points;
	  }
	};
	
	module.exports = ShapeUtil;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview point shapes
	 * @author dxq613@gmail.com
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var ShapeUtil = __webpack_require__(325);
	var Canvas = __webpack_require__(173);
	var Global = __webpack_require__(264);
	var Shape = __webpack_require__(318);
	var shapes = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];
	var hollowShapes = ['cross', 'tick', 'plus', 'hyphen', 'line', 'pointerLine', 'pointerArrow'];
	var SQRT_3 = Math.sqrt(3);
	
	// 增加marker
	Util.mix(Canvas.Shape.Marker.Symbols, {
	  hexagon: function(x, y, r, ctx) {
	    var diffX = r / 2 * SQRT_3;
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x + diffX, y - r / 2);
	    ctx.lineTo(x + diffX, y + r / 2);
	    ctx.lineTo(x, y + r);
	    ctx.lineTo(x - diffX, y + r / 2);
	    ctx.lineTo(x - diffX, y - r / 2);
	    ctx.closePath();
	  },
	  bowtie: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.lineTo(x + r, y - r);
	    ctx.lineTo(x - r, y + r);
	    ctx.closePath();
	  },
	  cross: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.moveTo(x + r, y - r);
	    ctx.lineTo(x - r, y + r);
	  },
	  tick: function(x, y, r, ctx) {
	    ctx.moveTo(x - r / 2, y - r);
	    ctx.lineTo(x + r / 2, y - r);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	    ctx.moveTo(x - r / 2, y + r);
	    ctx.lineTo(x + r / 2, y + r);
	  },
	  plus: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  },
	  hyphen: function(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	  },
	  line: function(x, y, r, ctx) {
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  }
	});
	
	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.point;
	  var pointAttrs = Util.mix(true, {}, defaultAttrs, {
	    fill: cfg.color,
	    fillOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}
	
	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowPoint;
	  var pointAttrs = Util.mix(true, {}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}
	
	// 鼠标悬浮触发active状态
	function _getActiveCfg(type) {
	  if (type && (type.indexOf('hollow') === 0 || Util.indexOf(hollowShapes, type) !== -1)) {
	    return Global.activeShape.hollowPoint;
	  }
	  return Global.activeShape.point;
	}
	
	var Point = Shape.registGeom('point', {
	  defaultShapeType: 'hollowCircle',
	  getActiveCfg: function(type, cfg) {
	    var activeCfg = _getActiveCfg(type);
	    if (cfg && cfg.size) {
	      delete activeCfg.radius;
	    }
	    return activeCfg;
	  },
	  getShapePoints: function(type, pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  }
	});
	
	function getRectPath(cfg) {
	  var x = cfg.points[0].x;
	  var y = cfg.points[0].y;
	  var w = cfg.size[0];
	  var h = cfg.size[1];
	  var path = [['M', x - 0.5 * w, y - 0.5 * h],
	      ['L', x + 0.5 * w, y - 0.5 * h],
	      ['L', x + 0.5 * w, y + 0.5 * h],
	      ['L', x - 0.5 * w, y + 0.5 * h],
	      ['z']];
	  return path;
	}
	
	// 用于桑基图的节点
	Shape.registShape('point', 'rect', {
	  drawShape: function(cfg, container) {
	    var rectAttrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg);
	    path = this.parsePath(path);
	    var gShape = container.addShape('path', {
	      attrs: Util.mix(rectAttrs, {
	        path: path
	      })
	    });
	    return gShape;
	  },
	  getMarkerCfg: function(cfg) {
	    var attrs = getFillAttrs(cfg);
	    attrs.symbol = 'rect';
	    return attrs;
	  }
	});
	
	// 添加shapes
	Util.each(shapes, function(shape) {
	  Shape.registShape('point', shape, {
	    drawShape: function(cfg, container) {
	      cfg.points = this.parsePoints(cfg.points);
	      var attrs = getFillAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function(cfg) {
	      var attrs = getFillAttrs(cfg);
	      attrs.symbol = shape;
	      return attrs;
	    }
	  });
	  // 添加该 shape 对应的 hollowShape
	  Shape.registShape('point', 'hollow' + Util.ucfirst(shape), {
	    drawShape: function(cfg, container) {
	      cfg.points = this.parsePoints(cfg.points);
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      return attrs;
	    }
	  });
	});
	
	// 添加 hollowShapes
	Util.each(hollowShapes, function(shape) {
	  Shape.registShape('point', shape, {
	    drawShape: function(cfg, container) {
	      cfg.points = this.parsePoints(cfg.points);
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      return attrs;
	    }
	  });
	});
	
	module.exports = Point;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(318);
	var Global = __webpack_require__(264);
	
	// 鼠标悬浮触发active状态
	function _getActiveCfg(/* type */) {
	  return Global.activeShape.polygon;
	}
	
	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.polygon;
	  var shapeCfg = Util.mix(true, {}, defaultCfg, {
	    stroke: cfg.color,
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}
	
	function getPath(points) {
	  var path = '';
	  var flag = [points[0].x, points[0].y];
	  var flagIndex = 0;
	  var lastStartPoint = points[0];
	  Util.each(points, function(obj, index) {
	    var str = index === 0 ? 'M {x} {y} ' : 'L {x} {y} ';
	    path += Util.substitute(str, obj);
	
	    if (flagIndex !== index && index < (points.length - 1) && Util.equalsArray(flag, [obj.x, obj.y])) {
	      var nextPoint = points[index + 1];
	      path += 'z' + Util.substitute('M {x} {y}', nextPoint);
	      lastStartPoint = nextPoint;
	      flagIndex = index + 1;
	      flag = [nextPoint.x, nextPoint.y];
	    }
	  });
	  path += Util.substitute('L {x} {y}', lastStartPoint); // 封口
	  path += 'z';
	  return Util.path2Absolute(path);
	}
	
	// regist line geom
	var Polygon = Shape.registGeom('polygon', {
	  defaultShapeType: 'polygon',
	  /**
	   * 获取图形对应的marker
	   * @param  {String} type 类型
	   * @param  {Object} cfg  配置项
	   * @return {Object} 线的配置信息
	   */
	  getMarkerCfg: function(/* type,cfg */) {
	    return {
	      symbol: 'rect'
	    };
	  },
	  getActiveCfg: function(type) {
	    return _getActiveCfg(type);
	  },
	  getSelectedCfg: function(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return _getActiveCfg(type);
	  }
	});
	
	Shape.registShape('polygon', 'polygon', {
	  getShapePoints: function(pointInfo) {
	    var points = [];
	    Util.each(pointInfo.x, function(subX, index) {
	      var subY = pointInfo.y[index];
	      points.push({
	        x: subX,
	        y: subY
	      });
	    });
	    return points;
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  }
	});
	
	Shape.registShape('polygon', 'hollow', {
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg.points);
	    path = this.parsePath(path);
	
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  }
	});
	
	module.exports = Polygon;


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview area shape
	 * @author huangtonger@aliyun.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(318);
	var PathUtil = __webpack_require__(320);
	var Global = __webpack_require__(264);
	var DOT_ARR = [2, 1];
	
	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowArea;
	  var lineAttrs = Util.mix(true, {}, defaultAttrs, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return lineAttrs;
	}
	
	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.area;
	  var areaAttrs = Util.mix(true, {}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return areaAttrs;
	}
	
	function getPath(cfg, smooth) {
	  var path = '';
	  var points = [];
	  var topLinePoints = []; // area 区域上部分
	  var bottomLinePoints = []; // area 区域下部分
	  var isInCircle = cfg.isInCircle;
	  Util.each(cfg.points, function(point) {
	    topLinePoints.push(point[0]);
	    bottomLinePoints.push(point[1]);
	  });
	  bottomLinePoints = bottomLinePoints.reverse();
	  points.push(topLinePoints, bottomLinePoints);
	  Util.each(points, function(point, index) {
	    var subPath = '';
	    if (smooth) {
	      subPath = PathUtil.getSplinePath(point, false);
	    } else {
	      subPath = PathUtil.getLinePath(point, false);
	    }
	    if (isInCircle) {
	      var p1 = point[0];
	      subPath += Util.substitute('L {x} {y}', p1);
	    } else if (index > 0) {
	      subPath = subPath.replace('M', 'L');
	    }
	    path += subPath;
	  });
	  path += 'z';
	  return path;
	}
	
	function _markerFn(x, y, r) {
	  return [
	    ['M', x - r, y + r],
	    ['L', x - r, y - r],
	    ['L', x, y],
	    ['L', x + r, y - r],
	    ['L', x + r, y + r],
	    ['z']
	  ];
	}
	
	function _smoothMarkerFn(x, y, r) {
	  return Util.path2Absolute([
	    ['M', x - r, y + r],
	    ['L', x - r, y],
	    ['R', x - r / 2, y - r / 2, x, y, x + r / 2, y + r / 2, x + r, y],
	    ['L', x + r, y + r],
	    ['z']
	  ]);
	}
	
	// get marker cfg
	function _getMarkerCfg(cfg, smooth, hollow) {
	  var areaCfg = hollow ? getLineAttrs(cfg) : getFillAttrs(cfg);
	
	  return Util.mix({
	    symbol: smooth ? _smoothMarkerFn : _markerFn
	  }, areaCfg);
	}
	
	// 鼠标悬浮触发active状态
	function getActiveCfg(type) {
	  if (!type || type.indexOf('line') === -1) {
	    return Global.activeShape.area;
	  }
	  return Global.activeShape.hollowArea;
	}
	
	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var coord = shapeObj._coord;
	  var point = coord.convertPoint(cfg.points[0][1]);
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}
	
	var Area = Shape.registGeom('area', {
	  defaultShapeType: 'area',
	  // 获取激活的图形属性
	  getActiveCfg: function(type) {
	    return getActiveCfg(type);
	  },
	  drawShape: function(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.drawShape(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      // 如果shape里有设置动画类型则用具体shape的动画，没有则用geom类的动画
	      gShape.animateType = gShape.animateType ? gShape.animateType : cfg.geomType;
	      gShape.id = cfg.id;
	      if (cfg.splitedIndex) gShape.id += 'splI' + cfg.splitedIndex;
	    }
	    return gShape;
	  }
	});
	
	// 默认：填充区域图
	Shape.registShape('area', 'area', {
	  /**
	   * @override
	   * @protected
	   * 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	   * 单点则补上y0点
	   */
	  getShapePoints: function(pointInfo) {
	    var points = [];
	    var x = pointInfo.x;
	    var y = pointInfo.y;
	    var y0 = pointInfo.y0;
	    y = Util.isArray(y) ? y : [y0, y];
	
	    Util.each(y, function(yItem) {
	      points.push({
	        x: x,
	        y: yItem
	      });
	    });
	    return points;
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg, false, false);
	  }
	});
	
	// 填充平滑区域图
	Shape.registShape('area', 'smooth', {
	  drawShape: function(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getPath(cfg, true);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg, true, false);
	  }
	});
	
	// 封闭的折线
	Shape.registShape('area', 'line', {
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, false);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg, false, true);
	  }
	});
	
	// 封闭的点线
	Shape.registShape('area', 'dotLine', {
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, false);
	    attrs.lineDash = DOT_ARR;
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, false, true);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});
	
	// 封闭的平滑线
	Shape.registShape('area', 'smoothLine', {
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, true);
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return _getMarkerCfg(cfg, true, true);
	  }
	});
	
	// 封闭的点的平画线
	Shape.registShape('area', 'dotSmoothLine', {
	  drawShape: function(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, true);
	    attrs.lineDash = DOT_ARR;
	    path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = _getMarkerCfg(cfg, true, true);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});
	
	Area.spline = Area.smooth;
	
	module.exports = Area;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview schema shapes box plot, k chart
	 * @author dxq613@gmail.com
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(318);
	var Global = __webpack_require__(264);
	
	function _parseValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  var min = value[0]; // 最小值
	  var max = value[value.length - 1]; // 最大值
	  var min1 = value.length > 1 ? value[1] : min;
	  var max1 = value.length > 3 ? value[3] : max;
	  var median = value.length > 2 ? value[2] : min1;
	
	  return {
	    min: min, // 最小值
	    max: max, // 最大值
	    min1: min1,
	    max1: max1,
	    median: median
	  };
	}
	
	function addPoints(from, to) {
	  Util.each(from, function(subArr) {
	    to.push({
	      x: subArr[0],
	      y: subArr[1]
	    });
	  });
	}
	
	function getAttrs(cfg) {
	  var defaultAttrs = Global.shape.line;
	  var attrs = Util.mix(true, {}, defaultAttrs, {
	    stroke: cfg.color,
	    fill: '#fff',
	    fillOpacity: 0,
	    strokeOpacity: cfg.opacity
	  });
	  return attrs;
	}
	
	function getBoxPoints(x, y, width) {
	  var points = [];
	  var pointsArray;
	  var obj;
	  if (Util.isArray(y)) { // 2维
	    obj = _parseValue(y);
	    pointsArray = [
	      [x - width / 2, obj.max],
	      [x + width / 2, obj.max],
	      [x, obj.max],
	      [x, obj.max1],
	      [x - width / 2, obj.min1],
	      [x - width / 2, obj.max1],
	      [x + width / 2, obj.max1],
	      [x + width / 2, obj.min1],
	      [x, obj.min1],
	      [x, obj.min],
	      [x - width / 2, obj.min],
	      [x + width / 2, obj.min],
	      [x - width / 2, obj.median],
	      [x + width / 2, obj.median]
	    ];
	  } else { // 只有一个维度
	    y = y || 0.5;
	    obj = _parseValue(x);
	    pointsArray = [
	      [obj.min, y - width / 2],
	      [obj.min, y + width / 2],
	      [obj.min, y],
	      [obj.min1, y],
	      [obj.min1, y - width / 2],
	      [obj.min1, y + width / 2],
	      [obj.max1, y + width / 2],
	      [obj.max1, y - width / 2],
	      [obj.max1, y],
	      [obj.max, y],
	      [obj.max, y - width / 2],
	      [obj.max, y + width / 2],
	      [obj.median, y - width / 2],
	      [obj.median, y + width / 2]
	    ];
	  }
	  addPoints(pointsArray, points);
	  return points;
	}
	
	function _sortValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  // 从大到小排序
	  var sorted = value.sort(function(a, b) {
	    return a < b ? 1 : -1;
	  });
	
	  var length = sorted.length;
	  if (length < 4) {
	    var min = sorted[length - 1];
	    for (var i = 0; i < (4 - length); i++) {
	      sorted.push(min);
	    }
	  }
	
	  return sorted;
	}
	
	// 获取K线图的points
	function getCandlePoints(x, y, width) {
	  var yValues = _sortValue(y);
	  var points = [{
	    x: x,
	    y: yValues[0]
	  }, {
	    x: x,
	    y: yValues[1]
	  }, {
	    x: x - width / 2,
	    y: yValues[2]
	  }, {
	    x: x - width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[3]
	  }]; // 按照顺时针连接
	  return points;
	}
	
	function getBoxPath(points) {
	  var path = [
	    ['M', points[0].x, points[0].y],
	    ['L', points[1].x, points[1].y],
	    ['M', points[2].x, points[2].y],
	    ['L', points[3].x, points[3].y],
	    ['M', points[4].x, points[4].y],
	    ['L', points[5].x, points[5].y],
	    ['L', points[6].x, points[6].y],
	    ['L', points[7].x, points[7].y],
	    ['L', points[4].x, points[4].y], // 封闭 z
	    ['Z'],
	    ['M', points[8].x, points[8].y],
	    ['L', points[9].x, points[9].y],
	    ['M', points[10].x, points[10].y],
	    ['L', points[11].x, points[11].y],
	    ['M', points[12].x, points[12].y],
	    ['L', points[13].x, points[13].y]
	  ];
	  return path;
	}
	
	function getCandlePath(points) {
	  var path = [
	    ['M', points[0].x, points[0].y],
	    ['L', points[1].x, points[1].y],
	    ['M', points[2].x, points[2].y],
	    ['L', points[3].x, points[3].y],
	    ['L', points[4].x, points[4].y],
	    ['L', points[5].x, points[5].y],
	    ['Z'],
	    ['M', points[6].x, points[6].y],
	    ['L', points[7].x, points[7].y]
	  ];
	  return path;
	}
	
	// 获取图形的marker
	function getMarkerCfg(cfg, fn) {
	  return Util.mix({
	    symbol: fn
	  }, getAttrs(cfg));
	}
	
	var Schema = Shape.registGeom('schema', {
	  defaultShapeType: '',
	  getActiveCfg: function(/* type */) {
	    return Global.activeShape.line;
	  }
	});
	
	// 箱线图
	Shape.registShape('schema', 'box', {
	  getShapePoints: function(pointInfo) {
	    return getBoxPoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getBoxPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    return getMarkerCfg(cfg, function(x, y, r) {
	      var yValues = [y - r, y - r / 2, y, y + r / 2, y + r];
	      var points = getBoxPoints(x, yValues, 2 * r);
	      return getBoxPath(points);
	    });
	  }
	});
	
	// K线
	Shape.registShape('schema', 'candle', {
	  getShapePoints: function(pointInfo) {
	    return getCandlePoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  drawShape: function(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getCandlePath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        fill: cfg.color,
	        fillOpacity: cfg.opacity,
	        lineWidth: 1
	      })
	    });
	  },
	  getMarkerCfg: function(cfg) {
	    var tmp = getMarkerCfg(cfg, function(x, y, r) {
	      y = [y + 1.5 * r, y + r / 2, y - r / 2, y - 1.5 * r];
	      var points = getCandlePoints(x, y, r);
	      return getCandlePath(points);
	    });
	    tmp.fill = cfg.color;
	    tmp.fillOpacity = cfg.opacity;
	    return tmp;
	  }
	});
	
	module.exports = Schema;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 边的图形
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Shape = __webpack_require__(318);
	var ShapeUtil = __webpack_require__(325);
	var Global = __webpack_require__(264);
	var PathUtil = __webpack_require__(320);
	var CORNER_PERCENT = 1 / 3;
	
	
	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix(true, {}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}
	
	var Edge = Shape.registGeom('edge', {
	  defaultShapeType: 'line',
	  getShapePoints: function(type, pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  getActiveCfg: function(/* type */) {
	    return {
	      strokeOpacity: 0.7
	    };
	  }
	});
	
	function getCPath(from, to) {
	  var points = [];
	  points.push({
	    x: from.x,
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2
	  });
	
	  points.push({
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2,
	    x: to.x
	  });
	  points.push(to);
	  var sub = ['C'];
	
	  Util.each(points, function(point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}
	
	function getQPath(to, center) {
	  var points = [];
	  points.push({
	    x: center.x,
	    y: center.y
	  });
	  points.push(to);
	
	  var sub = ['Q'];
	  Util.each(points, function(point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}
	
	function createSmoothPath(from, to) {
	  var sub = getCPath(from, to);
	  var path = [
	    ['M', from.x, from.y]
	  ];
	
	  path.push(sub);
	  return path;
	}
	
	function createArcPath(from, to, center) {
	  var sub = getQPath(to, center);
	  var path = [
	    ['M', from.x, from.y]
	  ];
	  path.push(sub);
	  return path;
	}
	
	function createArcWeightPath(points, center) {
	  var arc1 = getQPath(points[1], center);
	  var arc2 = getQPath(points[3], center);
	  var path = [
	    ['M', points[0].x, points[0].y]
	  ];
	  path.push(arc2);
	  path.push(['L', points[3].x, points[3].y]);
	  path.push(['L', points[2].x, points[2].y]);
	  path.push(arc1);
	  path.push(['L', points[1].x, points[1].y]);
	  path.push(['L', points[0].x, points[0].y]);
	  path.push(['Z']);
	  return path;
	}
	
	
	function createRectPath(from, to) {
	  var points = [];
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: from.x
	  });
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: to.x
	  });
	  points.push(to);
	  var path = [
	    ['M', from.x, from.y]
	  ];
	  Util.each(points, function(point) {
	    path.push(['L', point.x, point.y]);
	  });
	  return path;
	}
	
	Shape.registShape('edge', 'line', {
	  drawShape: function(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var attrCfg = getAttrs(cfg);
	    var path = PathUtil.getLinePath(points);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  }
	});
	
	Shape.registShape('edge', 'vhv', {
	  drawShape: function(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createRectPath(points[0], points[1]);
	    path = this.parsePath(path);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  }
	});
	
	Shape.registShape('edge', 'smooth', {
	  drawShape: function(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createSmoothPath(points[0], points[1]);
	    path = this.parsePath(path);
	
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  }
	});
	
	//  弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线
	Shape.registShape('edge', 'arc', {
	  drawShape: function(cfg, container) {
	    var points = cfg.points;
	    var type = points.length > 2 ? 'weight' : 'normal';
	    var attrCfg = getAttrs(cfg);
	    var line;
	    var path;
	    if (cfg.isInCircle) {
	      var center = {
	        x: 0,
	        y: 1
	      };
	      if (type === 'normal') {
	        path = createArcPath(points[0], points[1], center);
	      } else {
	        attrCfg.fill = attrCfg.stroke;
	        path = createArcWeightPath(points, center);
	      }
	      path = this.parsePath(path);
	      line = container.addShape('path', {
	        attrs: Util.mix(attrCfg, {
	          path: path
	        })
	      });
	    } else {
	      if (type === 'normal') {
	        points = this.parsePoints(points);
	        line = container.addShape('arc', {
	          attrs: Util.mix(attrCfg, {
	            x: (points[1].x + points[0].x) / 2,
	            y: points[0].y,
	            r: Math.abs((points[1].x - points[0].x)) / 2,
	            startAngle: Math.PI,
	            endAngle: Math.PI * 2
	          })
	        });
	      } else {
	        path = [
	          ['M', points[0].x, points[0].y],
	          ['L', points[1].x, points[1].y]
	        ];
	        var c1 = getCPath(points[1], points[3]);
	        var c2 = getCPath(points[2], points[0]);
	        path.push(c1);
	        path.push(['L', points[3].x, points[3].y]);
	        path.push(['L', points[2].x, points[2].y]);
	        path.push(c2);
	        path.push(['Z']);
	        path = this.parsePath(path);
	        attrCfg.fill = attrCfg.stroke;
	        line = container.addShape('path', {
	          attrs: Util.mix(attrCfg, {
	            path: path
	          })
	        });
	      }
	    }
	    return line;
	  }
	});
	
	module.exports = Edge;


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide assist to g2
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(332);
	var Global = __webpack_require__(264);
	var FRONT_TYPES = ['text', 'tag', 'html']; // 放置在画布最顶层的类型
	
	var GuideAssist = function(cfg) {
	  this.guides = [];
	  this.options = [];
	  Util.mix(this, cfg);
	};
	
	Util.augment(GuideAssist, {
	  guides: null,
	  xScale: null,
	  yScale: null,
	  backPlot: null, // 图表最下面一层canvas绘图区域
	  frontPlot: null, // 图表最上面一层canvas绘图区域
	  options: [],
	
	  _addGuide: function(guide) {
	    this.guides.push(guide);
	  },
	  _getDefault: function() {
	    return {
	      xScale: this.xScale,
	      yScale: this.yScale
	    };
	  },
	  setScale: function(xScale, yScale) {
	    var guides = this.guides;
	    this.xScale = xScale;
	    this.yScale = yScale;
	    Util.each(guides, function(guide) {
	      guide.xScale = xScale;
	      guide.yScale = yScale;
	    });
	  },
	  _setOptions: function(tmpOptions) {
	    var options = this.options;
	    options.push(tmpOptions);
	  },
	  creatGuide: function() {
	    var self = this;
	    var types = ['line', 'text', 'rect', 'arc', 'tag', 'html'];
	    var options = this.options;
	    options.forEach(function(option) {
	      var type = option.type;
	      if (types.indexOf(option.type) !== -1) {
	        option.cfg = Util.mix({}, Global.guide[type], option.cfg);
	      }
	      type = Util.ucfirst(type);
	      var config = Util.mix({}, self._getDefault(), option);
	      var guide = new Guide[type](config);
	      self._addGuide(guide);
	    });
	  },
	  /**
	   * 添加辅助线
	   * @chainable
	   * @param  {Array} from 起始点
	   * @param  {Array} to   结束点
	   * @param  {Object} cfg  配置项
	   */
	  line: function(from, to, cfg) {
	    var config = {
	      type: 'line',
	      from: from,
	      to: to,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助文本
	   * @chainable
	   * @param  {Array} position 文本位置
	   * @param  {String} text   文本
	   * @param  {Object} cfg  配置项
	   */
	  text: function(position, text, cfg) {
	    var config = {
	      type: 'text',
	      position: position,
	      text: text,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助图片
	   * @chainable
	   * @param  {Array} start 图片位置
	   * @param  {Array} [end] 图片结束位置，可以为空
	   * @param  {Object} cfg  配置项
	   */
	  image: function(start, end, cfg) {
	    var config = {
	      type: 'image',
	      start: start
	    };
	    if (Util.isArray(end)) {
	      config.end = end;
	    }
	    if (Util.isObject(end)) {
	      cfg = end;
	    }
	    if (cfg) {
	      config.cfg = cfg;
	    }
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助方框
	   * @chainable
	   * @param  {Array} start 矩形开始点
	   * @param  {Array} end 矩形结束点
	   * @param  {Object} cfg  配置项
	   */
	  rect: function(start, end, cfg) {
	    var config = {
	      type: 'rect',
	      start: start,
	      end: end,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助弧线
	   * @chainable
	   * @param  {Array} start 弧线开始点
	   * @param  {Array} end 弧线结束点
	   * @param  {Object} cfg  配置项
	   */
	  arc: function(start, end, cfg) {
	    var config = {
	      type: 'arc',
	      start: start,
	      end: end,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助线
	   * @chainable
	   * @param  {Array} from 起始点
	   * @param  {Array} to   结束点
	   * @param {String} text 文本
	   * @param  {Object} cfg  配置项
	   */
	  tag: function(from, to, text, cfg) {
	    var config = {
	      type: 'tag',
	      from: from,
	      to: to,
	      text: text,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 添加辅助html
	   * @chainable
	   * @param  {Array} from 起始点
	   * @param  {Array} to   结束点
	   * @param {String} text 文本
	   * @param  {Object} cfg  配置项
	   */
	  html: function(point, html, cfg) {
	    var config = {
	      type: 'html',
	      point: point,
	      html: html,
	      cfg: cfg
	    };
	
	    this._setOptions(config);
	    return this;
	  },
	  /**
	   * 绘制辅助信息
	   * @param  {Coord} coord 坐标系
	   * @param  {Canvas.Group} group 分组
	   */
	  paint: function(coord, group, frontGroup) {
	    var guides = this.guides;
	    group = group || this.backPlot;
	    frontGroup = frontGroup || this.frontPlot;
	    Util.each(guides, function(guide) {
	      if (Util.inArray(FRONT_TYPES, guide.type)) {
	        guide.paint(coord, frontGroup);
	      } else {
	        guide.paint(coord, group);
	      }
	    });
	  },
	  // 清空所有的 guide 对象
	  clear: function() {
	    this.options = [];
	    this.reset();
	  },
	  // 重置渲染的内容，但是不清除对象
	  reset: function() {
	    this.guides = [];
	    var frontPlot = this.frontPlot;
	    if (frontPlot && !frontPlot.get('destroyed')) {
	      var parent = frontPlot.get('parent') ? frontPlot.get('parent').get('el').parentNode : frontPlot.get('el').parentNode;
	      var guideWrpper = parent.getElementsByClassName('guideWapper')[0];
	      guideWrpper && parent.removeChild(guideWrpper);
	    }
	  }
	});
	
	module.exports = GuideAssist;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var Guide = __webpack_require__(333);
	
	Guide.Image = __webpack_require__(334);
	Guide.Text = __webpack_require__(335);
	Guide.Line = __webpack_require__(336);
	Guide.Tag = __webpack_require__(337);
	Guide.Rect = __webpack_require__(338);
	Guide.Arc = __webpack_require__(339);
	Guide.Html = __webpack_require__(340);
	
	module.exports = Guide;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview G2 图表的辅助元素
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var KEYWORDS = ['min', 'max'];
	
	/**
	 * @class  Guilde
	 * 图表的辅助元素
	 */
	var Guide = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(Guide, {
	  xScale: null,
	  yScale: null,
	  /**
	   * 配置项
	   * @type {Object}
	   */
	  cfg: {},
	  /**
	   * @protected
	   * 转换成坐标系上的点
	   * @param  {Coord} coord  坐标系
	   * @param  {Array} position 点的数组 [x,y]
	   * @return {Object} 转换成坐标系上的点
	   */
	  parsePoint: function(coord, position) {
	    var self = this;
	    var xScale = self.xScale;
	    var yScale = self.yScale;
	    // 如果传入的是个回调函数，则根据 x，y scale 计算位置
	    if (Util.isFunction(position)) {
	      position = position(xScale, yScale);
	    }
	    var x = position[0];
	    var y = position[1];
	    if (xScale) {
	      x = Util.indexOf(KEYWORDS, x) !== -1 ? xScale.scale(xScale[x]) : xScale.scale(x);
	    }
	    if (yScale) {
	      y = Util.indexOf(KEYWORDS, y) !== -1 ? yScale.scale(yScale[y]) : yScale.scale(y);
	    }
	    return coord.convert({
	      x: x,
	      y: y
	    });
	  },
	  /**
	   * 绘制辅助元素
	   * @param  {Coord} coord  坐标系
	   * @param  {Canvas.Group} group 绘制到的容器
	   */
	  paint: function(/* coord,group */) {
	
	  }
	});
	
	module.exports = Guide;


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide image
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	
	/**
	 * @class Guide.Image
	 * 辅助图片
	 */
	var Img = function(cfg) {
	  Img.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Img, Guide);
	
	Util.augment(Img, {
	  /**
	   * 起始位置
	   * @type {Array}
	   */
	  start: [],
	  /**
	   * 结束位置
	   * @type {Array}
	   */
	  end: null,
	  /**
	   * 图片地址
	   * @type {String}
	   */
	  src: '',
	  // override
	  paint: function(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var cfg = self.cfg;
	
	    cfg.img = cfg.src;
	    cfg = Util.mix({
	      src: self.src
	    }, cfg, start);
	    if (self.end) {
	      var end = self.parsePoint(coord, self.end);
	      cfg.x = start.x;
	      cfg.y = end.y;
	      cfg.width = end.x - start.x;
	      cfg.height = start.y - end.y;
	    } else {
	      cfg.y = cfg.y - cfg.height;
	    }
	    group.addShape('Image', {
	      attrs: cfg
	    });
	  }
	});
	
	module.exports = Img;


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide text
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	
	/**
	 * @class Guide.Text
	 * 辅助文本
	 */
	var Text = function(cfg) {
	  Text.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Text, Guide);
	
	Util.augment(Text, {
	  /**
	   * 位置
	   * @type {Array}
	   */
	  position: [],
	  /**
	   * 文本
	   * @type {String}
	   */
	  text: '',
	  /**
	   * 配置信息
	   * @type {Object}
	   */
	  cfg: {
	    fill: '#000',
	    textAlign: 'center'
	  },
	  // override
	  paint: function(coord, group) {
	    var self = this;
	    var position = self.position;
	    var point = self.parsePoint(coord, position);
	    var cfg = self.cfg;
	    cfg = Util.mix({
	      text: self.text
	    }, cfg, point);
	    group.addShape('Text', {
	      attrs: cfg
	    });
	  }
	});
	
	module.exports = Text;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide line
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	
	/**
	 * @class  Guide.Line
	 * 辅助线
	 */
	var Line = function(cfg) {
	  Line.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Line, Guide);
	
	Util.augment(Line, {
	  /**
	   * 起始点
	   * @type {Array}
	   */
	  from: [],
	  /**
	   * 结束点
	   * @type {Array}
	   */
	  to: [],
	  cfg: {
	    stroke: '#000',
	    lineWidth: 1
	  },
	  // override paint
	  paint: function(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.from);
	    var end = self.parsePoint(coord, self.to);
	    var cfg = self.cfg;
	    var path = Util.substitute('M {x} {y}', start) + Util.substitute('L {x} {y}', end);
	    cfg = Util.mix({
	      path: path
	    }, cfg);
	    group.addShape('Path', {
	      attrs: cfg
	    });
	  }
	});
	
	module.exports = Line;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide tag
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	var MARGIN = 10;
	
	/**
	 * @class Guide.Tag
	 * 辅助标记
	 */
	var Tag = function(cfg) {
	  Tag.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Tag, Guide);
	
	Util.augment(Tag, {
	  /**
	   * 标记出发点
	   * @type {Array}
	   */
	  from: [],
	  /**
	   * 标记结束点
	   * @type {Array}
	   */
	  to: [],
	  /**
	   * 文本
	   * @type {String}
	   */
	  text: '',
	  /**
	   * 配置信息
	   * @type {Object}
	   */
	  cfg: {
	    line: {
	      stroke: '#000',
	      lineWidth: 1
	    },
	    text: {
	      fill: '#000'
	    },
	    rect: {
	      stroke: '#000',
	      lineWidth: 1,
	      fill: '#fff'
	    }
	  },
	  paint: function(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.from);
	    var end = self.parsePoint(coord, self.to);
	    var subGroup = group.addGroup();
	    self.drawLine(start, end, subGroup);
	    self.drawText(end, subGroup);
	  },
	  // 绘制线
	  drawLine: function(start, end, group) {
	    var self = this;
	    var path = Util.substitute('M {x} {y}', start) + Util.substitute('L {x} {y}', end);
	    var cfg = Util.mix({
	      path: path
	    }, self.cfg.line);
	    group.addShape('Path', {
	      attrs: cfg
	    });
	  },
	  // 绘制文本
	  drawText: function(point, group) {
	    var self = this;
	    var textCfg = Util.mix({
	      text: self.text
	    }, self.cfg.text, point);
	    var text = group.addShape('Text', {
	      zIndex: 1,
	      attrs: textCfg
	    });
	
	    var bbox = text.getBBox();
	    var rectCfg = Util.mix({
	      x: bbox.minX - MARGIN,
	      y: bbox.minY - MARGIN, //  * 2
	      width: bbox.width + MARGIN * 2,
	      height: bbox.height + MARGIN * 2
	    }, self.cfg.rect);
	
	    group.addShape('rect', {
	      attrs: rectCfg
	    });
	    group.sort();
	  }
	});
	
	module.exports = Tag;


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide rect
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	
	/**
	 * @class Guide.Rect
	 * 矩形辅助框
	 */
	var Rect = function(cfg) {
	  Rect.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Rect, Guide);
	
	Util.augment(Rect, {
	  /**
	   * 起点
	   * @type {Array}
	   */
	  start: [],
	  /**
	   * 终点
	   * @type {Array}
	   */
	  end: [],
	
	  cfg: {
	    stroke: '#000'
	  },
	  // 获取矩形的path
	  getPath: function(coord) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    path.push(['L', start.x, end.y]);
	    path.push(['z']);
	    return path;
	  },
	  // Override
	  paint: function(coord, group) {
	    var self = this;
	    var cfg = self.cfg;
	    var path = self.getPath(coord);
	    cfg = Util.mix({
	      path: path
	    }, cfg);
	    group.addShape('Path', {
	      attrs: cfg
	    });
	  }
	});
	
	module.exports = Rect;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide arc
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	var Matirx = __webpack_require__(185);
	var Vector2 = Matirx.Vector2;
	/**
	 * @class Guide.Arc
	 * 辅助弧线
	 */
	var Arc = function(cfg) {
	  Arc.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Arc, Guide);
	
	Util.augment(Arc, {
	  /**
	   * 起点
	   * @type {Array}
	   */
	  start: [],
	  /**
	   * 终点
	   * @type {Array}
	   */
	  end: [],
	  cfg: {
	    stroke: '#000'
	  },
	  // 获取弧线的path
	  getCfg: function(coord) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var starti = coord.invertPoint(start);
	    var endi = coord.invertPoint(end);
	    var middlei = {
	      x: (endi.x + starti.x) / 2,
	      y: starti.y
	    };
	    var middle = coord.convertPoint(middlei);
	    var center = coord.getCenter();
	    var xv = new Vector2(1, 0);
	    var l = new Vector2.sub(start, center).length();
	    var v = new Vector2.sub(end, start);
	    var sv;
	    var ev;
	    var rst;
	    v = v.vertical();
	    v.setLength(l);
	    v.add(middle);
	    sv = new Vector2.sub(start, v);
	    ev = new Vector2.sub(end, v);
	    rst = {
	      x: v.x,
	      y: v.y,
	      startAngle: sv.angleTo(xv, true),
	      endAngle: ev.angleTo(xv, true),
	      r: l
	    };
	    return rst;
	  },
	  paint: function(coord, group) {
	    var cfg = Util.mix({}, this.cfg, this.getCfg(coord));
	    group.addShape('Arc', {
	      attrs: cfg
	    });
	  }
	});
	
	module.exports = Arc;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview guide line
	 * @author 旻诺<audrey.tm@alibaba-inc.com>
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Guide = __webpack_require__(333);
	
	__webpack_require__(341);
	
	function getOffsetFromAlign (align, width, height) {
	  var result = [];
	  switch (align) {
	    case 'tl':
	      result[0] = 0;
	      result[1] = 0;
	      break;
	    case 'tr':
	      result[0] = -width;
	      result[1] = 0;
	      break;
	    case 'bl':
	      result[0] = 0;
	      result[1] = Math.floor(-height);
	      break;
	    case 'br':
	      result[0] = Math.floor(-width);
	      result[1] = Math.floor(-height);
	      break;
	    case 'rc':
	      result[0] = Math.floor(-width);
	      result[1] = Math.floor(-height / 2);
	      break;
	    case 'lc':
	      result[0] = 0;
	      result[1] = Math.floor(-height / 2);
	      break;
	    case 'tc':
	      result[0] = Math.floor(-width / 2);
	      result[1] = Math.floor(-height);
	      break;
	    case 'bc':
	      result[0] = Math.floor(-width / 2);
	      result[1] = 0;
	      break;
	    default:
	      result[0] = Math.floor(-width / 2);
	      result[1] = Math.floor(-height / 2);
	  }
	  return result;
	}
	/**
	 * @class  Guide.Html
	 * 辅助html
	 */
	var Html = function(cfg) {
	  Html.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Html, Guide);
	
	Util.augment(Html, {
	  type: 'html',
	  /**
	   * 坐标点
	   * @type {Array}
	   */
	  point: [],
	  /**
	   * 配置项
	   * @type {object}
	   */
	  cfg: {
	    offset: [0, 0],
	    align: 'cc'
	  },
	  /**
	  * html内容
	  *@type {String}
	  */
	  html: '',
	  // override paint
	  paint: function(coord, group) {
	    var self = this;
	    var position = self.parsePoint(coord, self.point);
	    var myNode = Util.createDom(self.html);
	    myNode = Util.modiCSS(myNode, {
	      position: 'absolute',
	      top: Math.floor(position.y) + 'px',
	      left: Math.floor(position.x) + 'px',
	      visibility: 'hidden'
	    });
	    var wrapperNode;
	    var parentNode = group.get('canvas').get('el').parentNode;
	    if (parentNode.getElementsByClassName('guideWapper').length > 0) {
	      wrapperNode = parentNode.getElementsByClassName('guideWapper')[0];
	    } else {
	      wrapperNode = Util.createDom('<div class="guideWapper"></div>');
	      wrapperNode = Util.modiCSS(wrapperNode, {
	        position: 'absolute',
	        top: 0,
	        left: 0
	      });
	      parentNode.appendChild(wrapperNode);
	    }
	    wrapperNode.appendChild(myNode);
	    var cfg = self.cfg;
	    // 对齐
	    if (cfg.align) {
	      var align = cfg.align;
	      var width = Util.getWidth(myNode);
	      var height = Util.getHeight(myNode);
	      var newOffset = getOffsetFromAlign(align, width, height);
	      position.x = position.x + newOffset[0];
	      position.y = position.y + newOffset[1];
	    }
	    // 偏移
	    if (cfg.offset) {
	      var offset = cfg.offset;
	      position.x = position.x + offset[0];
	      position.y = position.y + offset[1];
	    }
	    Util.modiCSS(myNode, {
	      top: Math.floor(position.y) + 'px',
	      left: Math.floor(position.x) + 'px',
	      visibility: 'visible'
	    });
	  }
	});
	
	module.exports = Html;


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var table = document.createElement('table');
	var tableRow = document.createElement('tr');
	var FRAGMENTRE = /^\s*<(\w+|!)[^>]*>/;
	var CONTAINERS = {
	  'tr': document.createElement('tbody'),
	  'tbody': table,
	  'thead': table,
	  'tfoot': table,
	  'td': tableRow,
	  'th': tableRow,
	  '*': document.createElement('div')
	};
	
	Util.mix(Util, {
	  /**
	   * 修改CSS
	   * @param  {Object} DOM
	   * @param  {Object} CSS键值对
	   * @return {Object} DOM
	   */
	  modiCSS: function(DOM, CSS) {
	    var key;
	
	    for (key in CSS) {
	      if (CSS.hasOwnProperty(key) === true) {
	        DOM.style[key] = CSS[key];
	      }
	    }
	    return DOM;
	  },
	
	  /**
	   * 创建DOM 节点
	   * @param  {String} str Dom 字符串
	   * @return {HTMLElement}  DOM 节点
	   */
	  createDom: function(str) {
	    var name = FRAGMENTRE.test(str) && RegExp.$1;
	    if (!(name in CONTAINERS)) {
	      name = '*';
	    }
	    var container = CONTAINERS[name];
	    str = str.replace(/(^\s*)|(\s*$)/g, '');
	    container.innerHTML = '' + str;
	    return container.childNodes[0];
	  },
	   /**
	   * 获取样式
	   * @param  {HTMLElement} el  dom节点
	   * @param  {String} name 样式名
	   * @return {String} 属性值
	   */
	  getStyle: function(el, name) {
	    if (window.getComputedStyle) {
	      return window.getComputedStyle(el, null)[name];
	    }
	    return el.currentStyle[name];
	  },
	  /**
	   * 获取宽度
	   * @param  {HTMLElement} el  dom节点
	   * @return {Number} 宽度
	   */
	  getWidth: function(el) {
	    var width = this.getStyle(el, 'width');
	    if (width === 'auto') {
	      width = el.offsetWidth;
	    }
	    return parseFloat(width);
	  },
	  /**
	   * 获取高度
	   * @param  {HTMLElement} el  dom节点
	   * @return {Number} 高度
	   */
	  getHeight: function(el) {
	    var height = this.getStyle(el, 'height');
	    if (height === 'auto') {
	      height = el.offsetHeight;
	    }
	    return parseFloat(height);
	  }
	});
	
	module.exports = Util;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview chart custom events
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Ratio = Util.getRatio();
	
	var EventAssist = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(EventAssist, {
	  chart: null,
	  rangePlot: null,
	  startPoint: null, // 记录鼠标按下的坐标
	  rangeSelected: false, // 用于判断是否处于框选状态
	  selectable: false, // 是否可选择
	  selectMode: '', // 选择的模式
	  _getCanvas: function() {
	    var chart = this.chart;
	    return chart.get('frontCanvas');
	  },
	  _getShape: function(x, y) {
	    var canvas = this.chart.get('canvas');
	    return canvas.getShape(x, y);
	  },
	  _getPointInfo: function(ev) {
	    var chart = this.chart;
	    var point = {
	      x: ev.x / Ratio,
	      y: ev.y / Ratio
	    };
	    var views = chart.getViewsByPoint(point);
	    point.views = views;
	    return point;
	  },
	  _getShapeEventObj: function(ev) {
	    return {
	      x: ev.x / Ratio,
	      y: ev.y / Ratio,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement
	    };
	  },
	  _getEventObj: function(ev, point, views) {
	    return {
	      x: point.x,
	      y: point.y,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement, // 目标元素
	      views: views
	    };
	  },
	  _getActiveShape: function(views) {
	    var rst = null;
	    Util.each(views, function(view) {
	      var shape = view.getActiveShape();
	      if (shape) {
	        rst = shape;
	        return false;
	      }
	    });
	    return rst;
	  },
	  _limitCoordScope: function(coord) {
	    var chart = this.chart;
	    var plotRange = chart.get('plotRange');
	    var tl = plotRange.tl;
	    var br = plotRange.br;
	    if (coord.x < tl.x) {
	      coord.x = tl.x;
	    }
	    if (coord.x > br.x) {
	      coord.x = br.x;
	    }
	    if (coord.y < tl.y) {
	      coord.y = tl.y;
	    }
	    if (coord.y > br.y) {
	      coord.y = br.y;
	    }
	    return coord;
	  },
	  _getSelectedValues: function(scale, range) {
	    var result = null;
	    if (scale) {
	      var values = [];
	      if (scale.isCategory) {
	        for (var i = range[0]; i <= range[1]; i += (1 / scale.values.length)) {
	          var value = scale.invert(i);
	          values.push(value);
	        }
	      } else {
	        var min = scale.invert(range[0]);
	        var max = scale.invert(range[1]);
	        values.push(min);
	        values.push(max);
	      }
	      result = {
	        dim: scale.dim,
	        values: values
	      };
	    }
	
	    return result;
	  },
	  _filterRangeValues: function(chart, scales, ranges) {
	    var self = this;
	    var selected = {};
	    Util.each(ranges, function(range, idx) {
	      var filters = self._getSelectedValues(scales[idx], range);
	      if (filters) {
	        selected[filters.dim] = filters.values;
	        chart.filter(filters.dim, filters.values);
	      }
	    });
	    chart.repaint();
	    return selected;
	  },
	  // 绑定事件
	  bindEvents: function() {
	    var self = this;
	    var canvas = self._getCanvas();
	    canvas.on('canvas-mousedown', Util.wrapBehavior(self, 'onDown'));
	    canvas.on('canvas-mousemove', Util.wrapBehavior(self, 'onMove'));
	    canvas.on('canvas-mouseleave', Util.wrapBehavior(self, 'onOut'));
	    canvas.on('canvas-mouseup', Util.wrapBehavior(self, 'onUp'));
	    canvas.on('canvas-click', Util.wrapBehavior(self, 'onClick'));
	    canvas.on('canvas-dblclick', Util.wrapBehavior(self, 'onClick'));
	  },
	  onUp: function(ev) {
	    var chart = this.chart;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    chart.fire('mouseup', eventObj);
	  },
	  // 鼠标按下事件
	  onDown: function(ev) {
	    var chart = this.chart;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    chart.fire('mousedown', eventObj);
	
	    var plotRange = chart.get('plotRange');
	    var tl = plotRange.tl;
	    var br = plotRange.br;
	    var pointX = ev.x / Ratio;
	    var pointY = ev.y / Ratio;
	
	    if (pointX < tl.x || pointX > br.x || pointY < tl.y || pointY > br.y) { // 鼠标不在 geom 绘图区域不触发
	      return;
	    }
	
	    this.startPoint = {
	      x: pointX,
	      y: pointY
	    };
	
	    if (this.selectable) { // 用户开启框选操作
	      this.rangeSelected = true; // 开始框选
	      var rangePlot = this.rangePlot;
	      if (!rangePlot) {
	        var canvas = this._getCanvas();
	        rangePlot = canvas.addGroup();
	        rangePlot.initTransform();
	        this.rangePlot = rangePlot;
	      }
	      var point = this._getPointInfo(ev);
	      chart.fire('rangeselectstart', this._getEventObj(ev, point, point.views));
	
	      var originEvent = ev.event;
	      originEvent.stopPropagation();
	      originEvent.preventDefault();
	      this._bindCanvasEvent();
	    }
	  },
	  _bindCanvasEvent: function() {
	    var canvas = this._getCanvas();
	    var dom = canvas.get('canvasDOM');
	    this.onMouseMoveListener = Util.addEventListener(dom, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
	    this.onMouseUpListener = Util.addEventListener(dom, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
	  },
	  _onCanvasMouseMove: function(ev) {
	    if (!this.rangeSelected) {
	      return;
	    }
	    var pointX = ev.offsetX;
	    var pointY = ev.offsetY;
	    var currentCoord = this._limitCoordScope({
	      x: pointX,
	      y: pointY
	    });
	    var startPoint = this.startPoint;
	    var plotRange = this.chart.get('plotRange');
	    var canvas = this._getCanvas();
	    var rangePlot = this.rangePlot;
	    var rectShape = this.rectShape;
	    var rectStartX;
	    var rectStartY;
	    var rectWidth;
	    var rectHeight;
	
	    if (this.selectMode === 'rangeY') {
	      rectStartX = plotRange.tl.x;
	      rectStartY = (currentCoord.y >= startPoint.y) ? startPoint.y : currentCoord.y;
	      rectWidth = Math.abs(plotRange.tl.x - plotRange.tr.x);
	      rectHeight = Math.abs(startPoint.y - currentCoord.y);
	    } else if (this.selectMode === 'rangeX') {
	      rectStartX = (currentCoord.x >= startPoint.x) ? startPoint.x : currentCoord.x;
	      rectStartY = plotRange.tl.y;
	      rectWidth = Math.abs(startPoint.x - currentCoord.x);
	      rectHeight = Math.abs(plotRange.tl.y - plotRange.bl.y);
	    } else if (this.selectMode === 'rangeXY') {
	      if (currentCoord.x >= startPoint.x) {
	        rectStartX = startPoint.x;
	        rectStartY = pointY >= startPoint.y ? startPoint.y : currentCoord.y;
	      } else {
	        rectStartX = currentCoord.x;
	        rectStartY = currentCoord.y >= startPoint.y ? startPoint.y : currentCoord.y;
	      }
	      rectWidth = Math.abs(startPoint.x - currentCoord.x);
	      rectHeight = Math.abs(startPoint.y - currentCoord.y);
	    }
	
	    if (!rectShape) {
	      rectShape = rangePlot.addShape('rect', {
	        attrs: {
	          x: rectStartX,
	          y: rectStartY,
	          width: rectWidth,
	          height: rectHeight,
	          fill: '#CCD7EB',
	          opacity: 0.4
	        }
	      });
	      this.rectShape = rectShape;
	    } else {
	      rectShape.attr(Util.mix({}, rectShape.__attrs, {
	        x: rectStartX,
	        y: rectStartY,
	        width: rectWidth,
	        height: rectHeight
	      }));
	    }
	    canvas.draw();
	    ev.cancelBubble = true;
	    ev.returnValue = false;
	  },
	  _onCanvasMouseUp: function(ev) {
	    var canvas = this._getCanvas();
	    var startPoint = this.startPoint;
	    var rangePlot = this.rangePlot;
	
	    this.onMouseMoveListener.remove();
	    this.onMouseUpListener.remove();
	    this.rangePlot.clear(); // 一期先默认清楚
	    this.rangeSelected = false;
	    this.rectShape = null;
	    canvas.draw();
	
	    var pointX = ev.offsetX;
	    var pointY = ev.offsetY;
	    if (Math.abs(startPoint.x - pointX) <= 1 && Math.abs(startPoint.y - pointY) <= 1) { // 防止点击事件
	      return;
	    }
	    var selected = {};
	    var chart = this.chart;
	    var currentCoord = this._limitCoordScope({
	      x: pointX,
	      y: pointY
	    });
	
	    // 取第一个 view
	    var point = this._getPointInfo(currentCoord);
	    var currentView;
	    Util.each(point.views, function(view) {
	      if (view.get('data')) {
	        currentView = view;
	        return false;
	      }
	    });
	
	    if (currentView) {
	      var xScale = currentView.getXScale();
	      var yScale = currentView.getYScales()[0];
	      var plotRange = chart.get('plotRange');
	      var height = Math.abs(plotRange.start.y - plotRange.end.y);
	      var width = Math.abs(plotRange.start.x - plotRange.end.x);
	      var rangeX = [(startPoint.x - plotRange.start.x) / width, (currentCoord.x - plotRange.start.x) / width].sort();
	      var rangeY = [(plotRange.bl.y - currentCoord.y) / height, (plotRange.bl.y - startPoint.y) / height].sort();
	      if (this.selectMode === 'rangeX') {
	        selected = this._filterRangeValues(currentView, [xScale], [rangeX]);
	      } else if (this.selectMode === 'rangeY') {
	        selected = this._filterRangeValues(currentView, [yScale], [rangeY]);
	      } else if (this.selectMode === 'rangeXY') {
	        selected = this._filterRangeValues(currentView, [xScale, yScale], [rangeX, rangeY]);
	      }
	    }
	
	    var eventObj = {
	      x: pointX,
	      y: pointY,
	      selected: selected,
	      view: currentView,
	      rangePlot: rangePlot
	    };
	    chart.fire('rangeselectend', eventObj);
	  },
	  onOut: function(ev) {
	    var self = this;
	    var chart = self.chart;
	    var point = self._getPointInfo(ev);
	    chart.fire('plotleave', self._getEventObj(ev, point, self.curViews));
	  },
	  onMove: function(ev) {
	    var self = this;
	    var chart = self.chart;
	    var currentShape = self.currentShape;
	    var shape = self._getShape(ev.x, ev.y);
	    var eventObj = self._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    chart.fire('mousemove', eventObj);
	
	    // 移动时判定是否还在原先的图形中
	    if (currentShape !== shape) {
	      if (currentShape) {
	        var leaveObj = self._getShapeEventObj(ev);
	        leaveObj.shape = currentShape;
	        leaveObj.toShape = shape;
	        chart.fire('mouseleave', leaveObj);
	      }
	      if (shape) {
	        var enterObj = self._getShapeEventObj(ev);
	        enterObj.shape = shape;
	        enterObj.fromShape = currentShape;
	        chart.fire('mouseenter', enterObj);
	      }
	      self.currentShape = shape;
	    }
	
	    var point = self._getPointInfo(ev);
	    var preViews = self.curViews || [];
	
	    if (preViews.length === 0 && point.views.length) {
	      chart.fire('plotenter', self._getEventObj(ev, point, point.views));
	    }
	    if (preViews.length && point.views.length === 0) {
	      chart.fire('plotleave', self._getEventObj(ev, point, preViews));
	    }
	
	    if (point.views.length) {
	      eventObj = self._getEventObj(ev, point, point.views);
	      shape = self._getActiveShape(point.views);
	      eventObj.shape = shape;
	      chart.fire('plotmove', eventObj);
	      var canvasDom = chart.get('frontCanvas').get('el');
	      if (shape && shape.attr('cursor')) {
	        canvasDom.style.cursor = shape.attr('cursor');
	      } else {
	        canvasDom.style.cursor = '';
	      }
	    }
	
	    self.curViews = point.views;
	  },
	  onClick: function(ev) {
	    var self = this;
	    var chart = self.chart;
	    var shapeEventObj = this._getShapeEventObj(ev);
	    shapeEventObj.shape = this.currentShape;
	    chart.fire('click', shapeEventObj);
	
	    var point = self._getPointInfo(ev);
	    var views = point.views;
	    if (views && views.length) {
	      var eventObj = self._getEventObj(ev, point, views);
	      var shape = null;
	
	      for (var i = views.length - 1; i >= 0; i--) {
	        var view = views[i];
	        var geoms = view.get('geoms');
	        var geom;
	        for (var j = geoms.length - 1; j >= 0; j--) {
	          geom = geoms[j];
	          shape = geom.getSingleShape(point);
	          if (shape) {
	            break;
	          }
	        }
	        if (shape) {
	          if (geom && shape && geom.allowSelected()) {
	            geom.setSelected(shape.get('origin'), view);
	          }
	          eventObj.geom = geom;
	          break;
	        }
	      }
	      if (shape) {
	        eventObj.shape = shape;
	        eventObj.data = shape.get('origin');
	      }
	      chart.fire('plotclick', eventObj);
	      if (ev.type === 'canvas-dblclick') {
	        chart.fire('plotdblclick', eventObj);
	        chart.fire('dblclick', shapeEventObj);
	      }
	    }
	  },
	  clearEvents: function() {
	    var self = this;
	    var canvas = self._getCanvas();
	    canvas.off('canvas-mousemove', Util.getWrapBehavior(self, 'onMove'));
	    canvas.off('canvas-mouseleave', Util.getWrapBehavior(self, 'onOut'));
	    canvas.off('canvas-mousedown', Util.getWrapBehavior(self, 'onDown'));
	    canvas.off('canvas-mouseup', Util.getWrapBehavior(self, 'onUp'));
	    canvas.off('canvas-click', Util.getWrapBehavior(self, 'onClick'));
	    canvas.off('canvas-dblclick', Util.getWrapBehavior(self, 'onClick'));
	  }
	});
	
	module.exports = EventAssist;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 几何图形绘制渲染模块
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	'use strict';
	
	var Geoms = __webpack_require__(344);
	Geoms.Interval = __webpack_require__(357);
	Geoms.Schema = __webpack_require__(359);
	Geoms.Heatmap = __webpack_require__(360);
	Geoms.Contour = __webpack_require__(365);
	Geoms.Edge = __webpack_require__(367);
	
	module.exports = Geoms;


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var Core = {};
	
	Core.Base = __webpack_require__(345);
	Core.Interval = __webpack_require__(348);
	Core.Point = __webpack_require__(349);
	Core.Line = __webpack_require__(350);
	Core.Polygon = __webpack_require__(354);
	Core.Schema = __webpack_require__(355);
	Core.Path = __webpack_require__(351);
	Core.Area = __webpack_require__(356);
	
	module.exports = Core;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview g2-core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(197);
	var Frame = __webpack_require__(346);
	var ShapeFactory = __webpack_require__(319);
	var SortMixin = __webpack_require__(347);
	var FIELD_ORIGIN = '_origin';
	
	var Core = function(cfg) {
	  Core.superclass.constructor.call(this, cfg);
	};
	
	Core.ATTRS = {
	  /**
	   * 类型
	   * @type {String}
	   */
	  id: '',
	  /**
	   * 类型
	   * @type {String}
	   */
	  type: null,
	  /**
	   * 绘图容器
	   * @type {Object}
	   */
	  container: null,
	  /**
	   * 属性映射集
	   * @type {Array}
	   */
	  attrs: null,
	  /**
	   * shape对象
	   * @type {Array}
	   */
	  shapeObj: null,
	  /**
	   * 创建时间
	   * @type {Number}
	   */
	  createTime: null,
	  /**
	   * 图形样式
	   * @type {Object}
	   */
	  styleCfg: {},
	  /**
	   * 存放所有 shape 的绘制数据
	   * @type {Array}
	   */
	  shapeDatas: []
	};
	
	Util.extend(Core, Base);
	Util.mixin(Core, [SortMixin]);
	
	Util.augment(Core, {
	  // 将数据映射到属性
	  _mapping: function(frame) {
	    var self = this;
	    var data = frame.toJSON();
	    var attrs = self.get('attrs');
	    var mappedData = [];
	
	    Util.each(data, function(record) {
	      var newRecord = {};
	      newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];
	      newRecord.points = record.points;
	      newRecord.nextPoints = record.nextPoints;
	      Util.each(attrs, function(attr) {
	        var names = attr.names;
	        var values = self._getAttrValues(attr, record);
	        Util.each(values, function(val, index) {
	          var name = names[index];
	          newRecord[name] = (Util.isArray(val) && val.length === 1) ? val[0] : val; // 只有一个值时返回第一个属性值
	        });
	      });
	
	      mappedData.push(newRecord);
	    });
	
	    return new Frame(mappedData);
	  },
	  // 处理构建各种图形需要的点
	  _processShapePoints: function(frames) {
	    var self = this;
	    var shapeType = self.get('shapeType') || self.get('type');
	    var shapeObj = ShapeFactory.getShape(shapeType);
	    var result = [];
	    var nextFrame;
	    var nextPoints; //
	    shapeObj._coord = self.getCoord();
	    Util.each(frames, function(frame) {
	      var tmp = [];
	      frame.each(function(obj) {
	        var subShapeType = self.getAttrValue('shape', obj);
	        var pointInfo = self.getShapePointInfo(obj);
	        var points = shapeObj.getShapePoints(subShapeType, pointInfo);
	        obj.points = points;
	        tmp.push(obj);
	      });
	      tmp = new Frame(tmp);
	      result.push(tmp);
	    });
	    Util.each(result, function(frame, index) {
	      nextFrame = result[index + 1];
	      /** nextPoints
	       * 只取下一个分组frame的第一个值points值
	       * 对于点图、柱图，指得是下一柱、点分组线的点
	       * 对于折线图、区域图来说，指得是下一条分组线的第一个点
	       */
	      nextPoints = nextFrame ? nextFrame.colArray('points')[0] : null;
	      frame.addCol('nextPoints', function() {
	        return nextPoints;
	      });
	    });
	    self.set('shapeObj', shapeObj);
	    return result;
	  },
	  // 内部方法，获取图形属性的值
	  _getAttrValues: function(attr, record) {
	    var scales = attr.scales;
	    var params = [];
	    Util.each(scales, function(scale) {
	      var dim = scale.dim;
	      if (scale.type === 'identity') {
	        params.push(scale.value);
	      } else {
	        params.push(record[dim]);
	      }
	    });
	    var values = attr.mappingValues.apply(attr, params);
	    return values;
	  },
	  /**
	   * 绘制图层
	   */
	  draw: function(frames) {
	    var self = this;
	    var rst = [];
	    frames = self.sortFrames(frames);
	    frames = self.processFrames(frames);
	    frames = self._processShapePoints(frames);
	    Util.each(frames, function(frame, index) {
	      frame = self.beforeMapping(frame);
	      frame = self._mapping(frame);
	      frame.rowCount() && self.drawFrame(frame, index);
	      rst.push(frame);
	    });
	    return rst;
	  },
	  /**
	   * 按照 xDim 为数据做排序
	   * @param  {[type]} frames [description]
	   * @return {[type]}        [description]
	   */
	  sortFrames: function(frames) {
	    var xScale = this.getXScale();
	    if (Util.indexOf(['time', 'timeCat'], xScale.type) > -1) {
	      return this.sort(frames);
	    }
	
	    return frames;
	  },
	  /**
	   * 进行数据映射前，可以进行一些数据的排序等操作
	   */
	  processFrames: function(frames) {
	    return frames;
	  },
	  /**
	   * @protected
	   * 发生映射前调用的方法
	   * @param  {Frame} frame 数据集合
	   * @return {Array} 处理过的数据集合
	   */
	  beforeMapping: function(frame) {
	    return frame;
	  },
	  /**
	   * 是否在极坐标系下
	   * @return {Boolean} 是否在极坐标系下
	   */
	  isInCircle: function() {
	    return this.getCoord().isPolar;
	  },
	  /**
	   * @protected
	   * 获取构建图形时点的信息
	   */
	  getShapePointInfo: function(obj) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var x;
	    var y;
	
	    if (xScale) {
	      x = this._normalizeValues(obj[xScale.dim], xScale);
	    } else {
	      x = obj.x ? obj.x : 0.1;
	    }
	
	    if (yScale) {
	      y = this._normalizeValues(obj[yScale.dim], yScale);
	    } else {
	      y = obj.y ? obj.y : 0.1;
	    }
	
	    return {
	      x: x,
	      y: y,
	      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,
	      size: this.getSize(obj)
	    };
	  },
	  /**
	   * @param  {String||Number} values 原始数据或归一化数据
	   * @param  {Object} scale 度量
	   */
	  _normalizeValues: function(values, scale) {
	    var rst = [];
	    if (Util.isArray(values)) {
	      Util.each(values, function(v) {
	        rst.push(scale.scale(v));
	      });
	    } else {
	      rst = scale.scale(values);
	    }
	    return rst;
	  },
	  // 获取默认的宽度
	  getDefalutSize: function() {
	    return 0.1;
	  },
	  // 用户传入的画布的像素宽度
	  _getSize: function(size) {
	    var coord = this.getCoord();
	    var width; // x轴的长度
	    if (this.isInCircle() && !coord.isTransposed) { // 极坐标下 width 为弧长
	      width = (coord.get('endAngle') - coord.get('startAngle')) * coord.get('radius');
	    } else {
	      width = this.getDimWidth('x'); // 不需要判断transpose
	    }
	    return size / width;
	  },
	  /**
	   * 获取纬度所在轴的总宽度
	   * @param  {String} dimName
	   * @return {Number} width
	   */
	  getDimWidth: function(dimName) {
	    var self = this;
	    var coord = self.getCoord();
	    var start = coord.convertPoint({
	      x: 0,
	      y: 0
	    });
	    var end = coord.convertPoint({
	      x: dimName === 'x' ? 1 : 0,
	      y: dimName === 'x' ? 0 : 1
	    });
	    var width = 0;
	    if (start && end) {
	      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
	    }
	    return width;
	  },
	  /**
	   * 获取柱状图、k线图的宽度
	   * @param  {Number} size
	   * @return {Number} size 占的Numberic宽度
	   */
	  getSize: function(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNull(size)) {
	      size = this.getDefalutSize();
	    } else {
	      size = this._getSize(size);
	    }
	    return size;
	  },
	  /**
	   * @protected
	   * 绘制数据
	   */
	  drawFrame: function(frame) {
	    var self = this;
	    var data = frame.toJSON();
	    var container = self.get('container');
	    var shapeObj = self.get('shapeObj');
	    var yDim = self.getYDim();
	    var shapeDatas = self.get('shapeDatas');
	    var cfg;
	    var shape;
	    var gShape;
	
	    Util.each(data, function(obj, index) {
	      shapeDatas.push(obj);
	      if (yDim && Util.isNull(obj._origin[yDim])) {
	        return;
	      }
	      obj.index = index;
	      cfg = self.getDrawCfg(obj);
	      shape = self.getDrawShape(obj.shape);
	      gShape = shapeObj.drawShape(shape, cfg, container);
	      self.afterDraw(gShape, obj);
	    });
	  },
	  /**
	   * @protected
	   * 绘制后执行
	   */
	  afterDraw: function(/* gShape, obj */) {},
	  /**
	   * @protected
	   * 获取最终绘制用的shape
	   */
	  getDrawShape: function(shape) {
	    return Util.isArray(shape) ? shape[0] : shape;
	  },
	  /**
	   * @protected
	   * 获取绘制时的属性配置
	   * @return {Object}
	   */
	  getDrawCfg: function(obj) {
	    var style = this.get('styleCfg');
	    var isInCircle = this.isInCircle();
	    var _origin = obj._origin;
	
	    var cfg = {
	      points: obj.points,
	      nextPoints: obj.nextPoints,
	      color: obj.color,
	      isInCircle: isInCircle,
	      style: style,
	      size: obj.size,
	      shape: obj.shape,
	      opacity: obj.opacity,
	      x: obj.x,
	      y: obj.y,
	      origin: obj,
	      id: this._getId(_origin),
	      geomType: this.get('type')
	    };
	    if (isInCircle) cfg.center = this.getCoord().get('center');
	    return cfg;
	  },
	  /**
	   * @protected
	   * 获取ID
	   * @param {obj} 原始数据
	   * @return {Number} Id
	   */
	  _getId: function(origin) {
	    var idDims = this.get('idDims');
	    var geomId = this.get('id');
	    var id = geomId;
	    if (idDims && idDims.length > 0) {
	      idDims.forEach(function(dim) {
	        id += ' ' + origin[dim];
	      });
	    } else {
	      // 分组字段参与id
	      var groupScales = this.get('groupScales');
	      if (groupScales && groupScales.length > 0) {
	        groupScales.forEach(function(scale) {
	          var dim = scale.dim;
	          if (scale.type !== 'identity' && dim.slice(0, 2) !== '..') {
	            id += ' ' + origin[dim];
	          }
	        });
	      }
	      var position = this.getAttr('position');
	      var positionDims = position.getDims();
	      var xDim = positionDims[0];
	      var yDim = positionDims[1];
	
	      var type = this.get('type');
	      if (type === 'interval' || type === 'intervalStack' || type === 'schemal') { // 仅x轴的数据参与id
	        id += ' ' + origin[xDim];
	      } else if (type === 'line' || type === 'area') { // 仅geom类型参与id
	        id += ' ' + type;
	      } else { // 全部参与id
	        id += ' ' + origin[xDim] + ' ' + origin[yDim] + ' ' + type;
	      }
	    }
	    return id;
	  },
	  /**
	   * @protected
	   * 如果y轴的最小值小于0则返回0，否则返回最小值
	   * @return {Number}
	   */
	  getYMinValue: function() {
	    var yScale = this.getYScale();
	    var min = yScale.min;
	    var value;
	
	    if (min >= 0) {
	      value = min;
	    } else {
	      value = 0;
	    }
	    return value;
	  },
	  /**
	   * @protected
	   * 获取图形属性的值
	   */
	  getAttrValue: function(name, record) {
	    var attr = this.getAttr(name);
	    var rst = null;
	    if (attr) rst = this._getAttrValues(attr, record)[0];
	    return rst;
	  },
	  /**
	   * 获取属性
	   * @param {String} 属性名
	   * @return {Scale} 度量
	   */
	  getAttr: function(name) {
	    var attrs = this.get('attrs');
	    var rst = null;
	    Util.each(attrs, function(attr) {
	      if (attr.type === name) {
	        rst = attr;
	      }
	    });
	    return rst;
	  },
	  /**
	   * 获取对应x轴方向的度量
	   * @return {Scale} 度量
	   */
	  getCoord: function() {
	    return this.getAttr('position').coord;
	  },
	  /**
	   * 获取图形代表x维度的字段名称
	   * @return {String} dim
	   */
	  getXDim: function() {
	    var xScale = this.getXScale();
	    return xScale.dim;
	  },
	  /**
	   * 获取图形代表y维度的字段名称
	   * @return {String} dim
	   */
	  getYDim: function() {
	    var yScale = this.getYScale();
	    return yScale ? yScale.dim : null;
	  },
	  /**
	   * 获取对应x轴方向的度量
	   * @return {Scale} 度量
	   */
	  getXScale: function() {
	    return this.getAttr('position').scales[0];
	  },
	  /**
	   * 获取对应y轴方向的度量
	   * @return {Scale} 度量
	   */
	  getYScale: function() {
	    return this.getAttr('position').scales[1];
	  }
	});
	
	module.exports = Core;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	var Frame = __webpack_require__(271);
	__webpack_require__(272);
	
	module.exports = Frame;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 按X轴排序方法
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(346);
	
	module.exports = {
	  sort: function(frames) {
	    var xDim = this.getXDim();
	    var newFrames = [];
	    Util.each(frames, function(frame) {
	      newFrames.push(Frame.sort(frame, xDim));
	    });
	    return newFrames;
	  }
	};


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	
	/**
	 * @class Core.Interval
	 * 柱状图、玫瑰图、玉缺图
	 */
	function Interval(cfg) {
	  Interval.superclass.constructor.call(this, cfg);
	}
	
	Interval.ATTRS = {
	  type: 'interval'
	};
	
	Util.extend(Interval, Core);
	
	Util.mixin(Interval);
	
	Util.augment(Interval, {
	  getDrawCfg: function(obj) {
	    var self = this;
	    var cfg = Interval.superclass.getDrawCfg.call(self, obj);
	    var coord = self.getCoord();
	    if (coord.isPolar) {
	      cfg.z = true;
	      cfg.center = coord.get('center');
	    }
	    return cfg;
	  }
	});
	
	module.exports = Interval;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	
	/**
	 * @class Core.Point
	 * 点图
	 */
	function Point(cfg) {
	  Point.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Point, Core);
	
	Point.ATTRS = {
	  type: 'point'
	};
	
	module.exports = Point;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Path = __webpack_require__(351);
	
	/**
	 * @class Core.Line
	 * 折线图
	 */
	function Line(cfg) {
	  Line.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Line, Path);
	
	Line.ATTRS = {
	  type: 'line'
	};
	
	Util.augment(Line, {
	  sortFrames: function(frames) {
	    return this.sort(frames);
	  }
	});
	
	module.exports = Line;


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	var SplitDataMixin = __webpack_require__(352);
	var GetShapeDataMixin = __webpack_require__(353);
	
	/**
	 * @class Core.Path
	 * 路径图
	 */
	function Path(cfg) {
	  Path.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Path, Core);
	
	Util.mixin(Path, [SplitDataMixin, GetShapeDataMixin]);
	
	Path.ATTRS = {
	  type: 'path',
	  shapeType: 'line'
	};
	
	Util.augment(Path, {
	  /**
	   * @override
	   * @protected
	   * 覆写绘制方法
	   */
	  drawFrame: function(frame, frameIndex) {
	    var self = this;
	    var data = frame.toJSON();
	    var splitedData = this.splitData(data);
	    var container = this.get('container');
	    var shapeObj = this.get('shapeObj');
	    var first = data[0]; // 第一个数据点
	    var cfg = this.getDrawCfg(first);
	    var lineCount = first.points.length; // frame group后每个frame里含有的线的条数
	    var points; // 传入shape的point
	    var shape; // 具体shape {Object}
	    var obj;
	    first.index = frameIndex;
	    cfg = this.getDrawCfg(first);
	    var adjusts = self.get('adjusts');
	    var isStacked = adjusts && (Util.indexOf(adjusts, 'Stack') !== -1);
	    var shapeData = self.getShapeData(frame);
	    self.get('shapeDatas').push(shapeData);
	
	    Util.each(splitedData, function(subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	      for (var i = 0; i < lineCount; i++) {
	        points = [];
	        if (isStacked && (i === 0)) {
	          continue; // 层叠下不绘制底边
	        }
	        for (var j = 0; j < subData.length; j++) {
	          obj = subData[j];
	          points.push(obj.points[i]);
	        }
	        if (points.length === 0) return;
	        cfg.points = points;
	        cfg.index = i; // 当 y 为数组即多条线时，标识每条线
	        shape = self.getDrawShape(cfg.shape);
	        shapeObj.drawShape(shape, cfg, container);
	      }
	    });
	  },
	  /**
	   * @protected
	   * 获取参与id计算的attr
	   * @return {Object} attrs
	   */
	  _getJoinIdAttr: function() {
	    var attrs = this.get('attrs');
	    var rst = [];
	    Util.each(attrs, function(v) {
	      if (v.type !== 'position') rst.push(v);
	    });
	    return rst;
	  }
	});
	
	module.exports = Path;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 根据null分割数据集
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	module.exports = {
	  splitData: function(datas) {
	    if (!datas.length) return [];
	    var arr = [];
	    var tmp = [];
	    var yDim = this.getYDim();
	    var yValue;
	    Util.each(datas, function(obj) {
	      yValue = obj._origin ? obj._origin[yDim] : obj[yDim];
	      if ((Util.isArray(yValue) && Util.isNull(yValue[0])) || Util.isNull(yValue)) {
	        arr.push(tmp);
	        tmp = [];
	      } else {
	        tmp.push(obj);
	      }
	    });
	    arr.push(tmp);
	
	    return arr;
	  }
	};


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 针对线图、区域图获取每个 shape 的数据
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var KEYS = ['color', 'shape', 'size', 'opacity'];
	var FIELD_ORIGIN = '_origin';
	
	module.exports = {
	  getShapeData: function(frame) {
	    var result = {};
	    var dataArr = frame.toJSON();
	    var aData = dataArr[0];
	    var originData = frame.colArray('_origin'); // 获取所有点的原始数据
	    Util.each(KEYS, function(key) {
	      if (aData.hasOwnProperty(key)) {
	        result[key] = aData[key];
	      }
	    });
	
	    result[FIELD_ORIGIN] = originData;
	    return result;
	  }
	};


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	
	/**
	 * @class Core.Polygon
	 * 多边形图
	 */
	function Polygon(cfg) {
	  Polygon.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Polygon, Core);
	
	Polygon.ATTRS = {
	  type: 'polygon'
	};
	
	Util.augment(Polygon, {
	  getShapePointInfo: function(point) {
	    var info = Core.prototype.getShapePointInfo.call(this, point);
	    var self = this;
	    var x = info.x;
	    var y = info.y;
	    var temp;
	    if (!(Util.isArray(x) && Util.isArray(y))) { // x y 都是数组时，不做处理
	      var xScale = self.getXScale();
	      var yScale = self.getYScale();
	      var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;
	      var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;
	      var xOffset = 0.5 * 1 / xCount;
	      var yOffset = 0.5 * 1 / yCount;
	      if (xScale.isCategory && yScale.isCategory) { // 如果x,y都是分类
	        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];
	        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];
	      } else if (Util.isArray(x)) { // x 是数组
	        temp = x;
	        x = [temp[0], temp[0], temp[1], temp[1]];
	        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];
	      } else if (Util.isArray(y)) { // y 是数组
	        temp = y;
	        y = [temp[0], temp[1], temp[1], temp[0]];
	        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];
	      }
	    }
	    var pointInfo = Util.mix({}, point, {
	      x: x,
	      y: y
	    });
	    return pointInfo;
	  }
	});
	
	module.exports = Polygon;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	
	/**
	 * @class Core.Schema
	 * 自定义图 如K线图、箱型图
	 */
	function Schema(cfg) {
	  Schema.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Schema, Core);
	
	Schema.ATTRS = {
	  type: 'schema'
	};
	
	module.exports = Schema;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview g2-core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(345);
	var SplitDataMixin = __webpack_require__(352);
	var GetShapeDataMixin = __webpack_require__(353);
	
	/**
	 * @class Core.Area
	 * 区域图
	 */
	function Area(cfg) {
	  Area.superclass.constructor.call(this, cfg);
	}
	
	Util.extend(Area, Core);
	
	Util.mixin(Area, [SplitDataMixin, GetShapeDataMixin]);
	
	Area.ATTRS = {
	  type: 'area'
	};
	
	Util.augment(Area, {
	  sortFrames: function(frames) {
	    return this.sort(frames);
	  },
	  /**
	   * @override
	   * @protected
	   * 覆写绘制方法
	   */
	  drawFrame: function(frame, frameIndex) {
	    var self = this;
	    var data = frame.toJSON();
	    var splitedData = this.splitData(data);
	    var container = this.get('container');
	    var shapeObj = this.get('shapeObj');
	    var first = data[0]; // 第一个数据点
	    var cfg;
	    var shape; // 具体shape {Object}
	    var points; // 传入shape的point
	    var obj;
	    first.index = frameIndex;
	    cfg = this.getDrawCfg(first);
	
	    var shapeData = self.getShapeData(frame);
	    self.get('shapeDatas').push(shapeData);
	
	    Util.each(splitedData, function(subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	      points = [];
	      for (var i = 0; i < subData.length; i++) {
	        obj = subData[i];
	        points.push(obj.points);
	      }
	      if (points.length === 0) return;
	      cfg.points = points;
	      shape = self.getDrawShape(cfg.shape);
	      shapeObj.drawShape(shape, cfg, container);
	    });
	  },
	  /**
	   * @protected
	   * 获取参与id计算的attr
	   * @return {Object} attrs
	   */
	  _getJoinIdAttr: function() {
	    var attrs = this.get('attrs');
	    var rst = [];
	    Util.each(attrs, function(v) {
	      if (v.type !== 'position') rst.push(v);
	    });
	    return rst;
	  }
	});
	
	module.exports = Area;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 扩展 interval
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(344);
	var SizeMixin = __webpack_require__(358);
	
	var FIELD_ORIGIN = '_origin';
	
	var Interval = function(cfg) {
	  Interval.superclass.constructor.call(this, cfg);
	};
	
	Interval.ATTRS = {
	  adjusts: null,
	  frames: null
	};
	
	Util.extend(Interval, Core.Interval);
	Util.mixin(Interval, [SizeMixin]);
	
	Util.augment(Interval, {
	  processFrames: function(frames) {
	    var coord = this.getCoord();
	    var coordType = coord.type;
	    var adjusts = this.get('adjusts');
	    // 饼图的处理，过滤掉 0 的数据
	    if ((coordType === 'theta' || (coordType === 'polar' && coord.isTransposed)) && adjusts.toString() === 'Stack') {
	      var newFrames = [];
	      var yDim = this.getYDim();
	      Util.each(frames, function(frame) {
	        var record = frame.colArray(FIELD_ORIGIN);
	        if (record[0][yDim] >= 0) {
	          newFrames.push(frame);
	        }
	      });
	      return newFrames;
	    }
	    return frames;
	  }
	});
	
	module.exports = Interval;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 需要计算所占x轴上的宽度的辅助类
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Global = __webpack_require__(264);
	
	var SizeMixin = {
	  getDefalutSize: function() {
	    var coord = this.getCoord();
	    var xScale = this.getXScale();
	    var xValues = xScale.values;
	    var count;
	    if (xScale.isLinear && xValues.length > 1) {
	      var interval = Math.abs(xValues[1] - xValues[0]); // 线性数据已排序，去前两位的偏移量作为间距值
	      count = (xScale.max - xScale.min) / interval;
	      if (xValues.length > count) {
	        count = xValues.length;
	      }
	    } else {
	      count = xValues.length;
	    }
	
	    var normalizeSize = 1 / count;
	    var widthRatio = 1;
	
	    if (this.isInCircle() && this.get('type') !== 'schema') {
	      if (coord.isTransposed && count > 1) { // 极坐标下多层环图
	        widthRatio = Global.widthRatio.multiplePie;
	      }
	    } else {
	      widthRatio = Global.widthRatio.column; // 柱状图要除以2
	    }
	    normalizeSize *= widthRatio;
	    var adjusts = this.get('adjusts');
	    if (adjusts && adjusts.indexOf('Dodge') !== -1) {
	      var frames = this.get('frames');
	      normalizeSize = normalizeSize / frames.length;
	    }
	    return normalizeSize;
	  }
	};
	
	module.exports = SizeMixin;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 扩展 schema
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(344);
	var SizeMixin = __webpack_require__(358);
	
	var Schema = function(cfg) {
	  Schema.superclass.constructor.call(this, cfg);
	};
	
	Schema.ATTRS = {
	  adjusts: null,
	  frames: null
	};
	
	Util.extend(Schema, Core.Schema);
	Util.mixin(Schema, [SizeMixin]);
	
	module.exports = Schema;


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview get imageData from g-heatmap module and then drow a heatmap canvas
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var GHeatmap = __webpack_require__(361);
	var Core = __webpack_require__(344);
	var Global = __webpack_require__(264);
	var FIELD_ORIGIN = '_origin';
	
	var Heatmap = function(cfg) {
	  Heatmap.superclass.constructor.call(this, cfg);
	};
	
	Heatmap.ATTRS = {
	  type: 'heatmap'
	};
	
	Util.extend(Heatmap, Core.Base);
	
	Util.augment(Heatmap, {
	  _getHeatmapData: function(frame) {
	    var self = this;
	    var data = [];
	    var colorAttr = self.getAttr('color');
	    var dims = colorAttr.getDims();
	    var dim = dims[0];
	    frame.each(function(obj) {
	      var tmp = [obj.x, obj.y, obj[FIELD_ORIGIN][dim]];
	      data.push(tmp);
	    });
	    return data;
	  },
	  _getImageRegion: function() {
	    var self = this;
	    var coord = self.getCoord();
	    var start = coord.get('start');
	    var end = coord.get('end');
	    var region = {
	      x: start.x,
	      y: end.y,
	      width: end.x - start.x,
	      height: start.y - end.y
	    };
	    return region;
	  },
	  _getColorScale: function() {
	    return this.getAttr('color').getScale('color');
	  },
	  _getRadius: function() {
	    var self = this;
	    var position = self.getAttr('position');
	    var coord = self.getCoord();
	    var stat = position.stat;
	    var radius = null;
	
	    if (stat) {
	      var bandWidth = stat.bandWidth;
	      radius = Math.min(coord.getWidth(), coord.getHeight()) * bandWidth;
	    }
	    return radius * 2;
	  },
	  /**
	   * drow heatmap canvas width input frame data
	   * @param  {frameData} frame 3D data
	   */
	  drawFrame: function(frame) {
	    var self = this;
	    var container = self.get('container');
	    var data = self._getHeatmapData(frame);
	    var region = self._getImageRegion();
	    var colorScale = self._getColorScale();
	    var size = frame.rowObject(0).size;
	    var colorAttr = self.getAttr('color');
	
	    var heatmapCfg = Util.mix({
	      min: colorScale.min,
	      max: colorScale.max,
	      formatter: function(value) {
	        return colorScale.scale(value);
	      }
	    }, Global.heatmap, region);
	
	    heatmapCfg.colors = [
	      colorAttr.mappingValues(colorScale.invert(0)).join(''),
	      colorAttr.mappingValues(colorScale.invert(0.25)).join(''),
	      colorAttr.mappingValues(colorScale.invert(0.5)).join(''),
	      colorAttr.mappingValues(colorScale.invert(0.75)).join(''),
	      colorAttr.mappingValues(colorScale.invert(1)).join('')
	    ];
	
	    var radius = size ? parseInt(size, 10) : self._getRadius();
	    if (radius) {
	      heatmapCfg.radius = radius;
	    }
	
	    var heatmap = new GHeatmap(heatmapCfg);
	    var imgData = heatmap.getData(data);
	    var heatmapCanvas = document.createElement('canvas');
	    var heatmapCtx = heatmapCanvas.getContext('2d');
	    heatmapCanvas.width = region.width;
	    heatmapCanvas.height = region.height;
	    heatmapCtx.putImageData(imgData, 0, 0);
	    var image = container.addShape('Image', {
	      attrs: region
	    });
	    image.attr('img', heatmapCanvas);
	    image.animateType = 'heatmap';
	    image.id = this.get('viewId') + 'heatmap';
	  }
	});
	
	module.exports = Heatmap;


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview A heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors.
	 * we get the heatmap imageData throw drow a gradient circle at every point
	 */
	"use strict";
	var Util = __webpack_require__(169);
	var ColorCal = __webpack_require__(362);
	
	var gHeatmap = function(cfg) {
		Util.mix(this, cfg);
	};
	
	Util.augment(gHeatmap, {
		get: function(name) {
			return this[name];
		},
		set: function(name, value) {
			this[name] = value;
		},
		width: 500,
		height: 500,
		x: 0,
		y: 0,
		min: null,
		max: null,
		/**
		 * 格式化数据，防止数据是非均匀的
		 * @param  {Number} value 原始数据
		 * @return {Number} 格式化后的数据
		 */
		formatter: function(value){
			return value;
		},
		/**
		 * thw radius of Gradient circle
		 * @type {Number}
		 */
		radius: 60,
		/**
		 * the Proportion of Gradient part in Gradient circle
		 * @type {Number}
		 */
		blur: 0,
		/**
		 * the stop point and color of Gradient object
		 * @type {Object}
		 */
		//colors:{0: 'white',0.25: "rgb(0,0,255)", 0.5: "rgb(0,255,0)", 0.75: "yellow", 1.0: "rgb(255,0,0)"},
	
		//colors:{0: 'white',0.25: "rgb(0,0,255)", 0.55: "rgb(0,255,0)", 0.85: "yellow", 1.0: "rgb(255,0,0)"},
		colors: ['rgb(0,0,255)', "rgb(0,0,255)", "rgb(0,255,0)", "yellow", "rgb(255,0,0)"],
		/**
		 * creat a Gradient circle at input point
		 * @param  {Number} cx    x coordinate
		 * @param  {Number} cy    y coordinate
		 * @param  {Number} alpha Transparency
		 * @param  {Object} ctx   the context of shadow canvas
		 */
		_mkcircle: function(cx, cy, alpha, ctx) {
			var blur = this.blur;
			var radius = this.radius;
			var grad = ctx.createRadialGradient(cx, cy, radius * blur, cx, cy, radius);
			grad.addColorStop(0, 'rgba(0, 0, 0, 1)');
			grad.addColorStop(1, 'rgba(0, 0, 0, 0)');
			ctx.globalAlpha = alpha;
			ctx.fillStyle = grad;
		},
		/**
		 * get color by Gradient value, and then get the imageData with color infomation
		 * @param  {Object} shadowCtx the context of shadow canvas
		 * @return {Object}           the imageData object of heatmap
		 */
		_colorise: function(shadowCtx) {
			var width = this.width;
			var height = this.height;
			var img = shadowCtx.getImageData(this.x, this.y, width, height);
			var imgData = img.data;
			var len = imgData.length;
			var gradientConfig = this.colors;
			var gradient = ColorCal.gradient(gradientConfig);
	
			for (var i = 3; i < len; i += 4) {
				var alpha = imgData[i];
	
				if (!alpha) {
					continue;
				}
				var palette = ColorCal.Util.rgb2arr(gradient(alpha / 256));
				imgData[i - 3] = palette[0];
				imgData[i - 2] = palette[1];
				imgData[i - 1] = palette[2];
				imgData[i] = alpha;
			}
			return img;
		},
		/**
		 * the interface of heatmap module
		 * @param  {Array} data the input point
		 * @return {Object}      the imageData object of heatmap
		 */
		getData: function(data) {
			var values = [];
			for (var i = data.length - 1; i >= 0; i--) {
				values.push(data[i][2]);
			}
			var max = Util.isNull(this.max) ? Math.max.apply(null, values) : this.max;
			var min = Util.isNull(this.min) ? Math.min.apply(null, values) : this.min;
	
			if (max === min) {
				return false;
			}
	
			var shadowCanvas = document.createElement('canvas');
			var shadowCtx = shadowCanvas.getContext('2d');
			shadowCanvas.width = this.width + this.x;
			shadowCanvas.height = this.height + this.y;
			var formatter = this.formatter;
	
			//document.body.appendChild(shadowCanvas);
			for (var i = data.length - 1; i >= 0; i--) {
				var alpha = (formatter(data[i][2]) - formatter(min)) / (formatter(max) - formatter(min)); // 防止数据是非线性的
				this._mkcircle(data[i][0], data[i][1], alpha, shadowCtx);
				shadowCtx.fillRect(0, 0, this.width + this.x, this.height + this.y);
			}
	
			return this._colorise(shadowCtx);
		}
	});
	
	
	module.exports = gHeatmap;

/***/ }),
/* 362 */
[530, 363, 364],
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview calculate the color
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	var cUtil = __webpack_require__(364);
	var Util = __webpack_require__(169);
	
	 // get percent value
	function getValue(start,end,left,index){
	  var value = start[index] + (end[index] - start[index]) * left;
	  return value;
	}
	
	module.exports = {
	  calColor: function(points,percent,space){
	    var steps = points.length - 1;
	    var step = Math.floor(steps * percent);
	    var left = steps * percent - step;
	    var start = points[step];
	    var end = step === steps ? start : points[step + 1];
	    var rgb;
	    if (space === 'hsl') {
	      rgb = cUtil.hsl2Rgb([getValue(start,end,left,0), getValue(start,end,left,1), getValue(start,end,left,2)]);
	    } else {
	      rgb = {
	        r: getValue(start,end,left,0),
	        g: getValue(start,end,left,1),
	        b: getValue(start,end,left,2)
	      };
	      rgb = '#' + cUtil.toHex(rgb.r) + cUtil.toHex(rgb.g) + cUtil.toHex(rgb.b);
	    }
	    return rgb;
	  },
	  lightness: function(percent,hue) {
	    hue = hue || 0;
	    var points = [[hue, 1, 0.9],[hue, 1, 0.5]];
	    return this.calColor(points, percent, 'hsl');
	  },
	  /**
	   * 渐变的红色
	   * @param  {Number} percent 百分比
	   * @return {String} 
	   */
	  red: function(percent){
	    return this.lightness(percent,0);
	  },
	  /**
	   * 渐变的蓝色
	   * @param  {Number} percent 百分比
	   * @return {String} 
	   */
	  blue: function(percent){
	    return this.lightness(percent,0.66);
	  },
	  /**
	   * 渐变的绿色
	   * @param  {Number} percent 百分比
	   * @return {String} 
	   */
	  green: function(percent){
	    return this.lightness(percent,0.33);
	  },
	  gradient: function(colors){
	    var self = this;
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors,function(color){
	      if (color.indexOf('#') === -1) {
	        color = cUtil.toRGB(color);
	      }
	      points.push(cUtil.rgb2arr(color));
	    });
	    return function(percent) {
	      return self.calColor(points,percent);
	    };
	  },
	  gradientHsl: function(colors){
	    var self = this;
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors,function(color){
	      if (color.indexOf('#') === -1) {
	        color = cUtil.toRGB(color);
	      }
	      points.push(cUtil.rgb2hsl(color));
	    });
	    return function(percent) {
	      return self.calColor(points,percent,'hsl');
	    };
	  },
	  saturation: function(percent,hue) {
	    hue = hue || 0;
	    var points = [[hue, 0, 0.5], [hue, 1, 0.5]];
	    return this.calColor(points, percent, 'hsl');
	  },
	  hue: function(percent) {
	    var points = [[0, 1, 0.5], [1, 1, 0.5]];
	    return this.calColor(points, percent, 'hsl');
	  },
	  /**
	   * get a gray color,use the percent
	   * @param  {Number} percent the percent of gray
	   * @return {String} color
	   */
	  brightness: function (percent) {
	    var points = [[255,255,255],[0,0,0]];
	    return this.calColor(points,percent);
	  },
	  /**
	   * get a heat color,use the percent
	   * @param  {Number} percent the percent of heat
	   * @return {String} color
	   */
	  heat: function(percent){
	    var points = [[255,255,255],[255,255 * 0.5,0],[0,0,0]];
	    return this.calColor(points,percent);
	  },
	  /**
	   * get a rainbow color,use the percent
	   * @param  {Number} percent the percent of rainbow
	   * @return {String} color
	   */
	  rainbow: function(percent){
	    var points = [[0,255,255],[0,0,255],[0,255,0],[255,0,0]]; //[[0,0,255],[0,255,255],[0,255,0],[255,0,0]];
	    return this.calColor(points,percent);
	  },
	  /**
	   * get a circular color,use the percent
	   * @param  {Number} percent the percent of circular
	   * @return {String} color
	   */
	  circular: function(percent){
	    var points = [[0,0,255],[0,255,0],[255,255,0],[255,0,0],[0,0,255]];
	    return this.calColor(points,percent);
	  },
	  /**
	   * get a bipolar color,use the percent
	   * @param  {Number} percent the percent of bipolar
	   * @return {String} color
	   */
	  bipolar: function(percent){
	    var points = [[0,255,0],[0,0,0],[255,0,0]];
	    return this.calColor(points,percent);
	  }
	};


/***/ }),
/* 364 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview calculate the color
	 * @author huangtong.ht@alipay.com
	 */
	
	"use strict";
	var RGB_REG = /rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
	
	function createTmp(){
	  var i = document.createElement("i");
	  i.title = "Web Colour Picker";
	  i.style.display = "none";
	  document.body.appendChild(i);
	  return i;
	}
	module.exports = {
	  toRGB : (function(){
	    var i;
	    if (document.body) { // 防止防止在页头报错，document.body
	      i = createTmp();
	    }
	    return function (color) {
	      if (!i) { // 防止防止在页头报错
	        i = createTmp();
	      }
	      i.style.color = color;
	      var rst = document.defaultView.getComputedStyle(i, "").getPropertyValue("color");
	      var cArray = RGB_REG.exec(rst);
	      cArray.shift();
	      return this.arr2rgb(cArray);
	    };
	  })(),
	  // value to hex
		toHex : function(value){
		  value = Math.round(value);
		  value = value.toString(16);
		  if (value.length === 1){
		    value = '0' + value;
		  }
		  return value;
		},
		hsl2Rgb: function(hsl){
		  // h,s,l ranges are in 0.0 - 1.0
	    var h = hsl[0];
	    var s = hsl[1];
	    var l = hsl[2];
	
		  var rgb = {};
		  if ( s === 0 ) {
		    rgb.r = rgb.g = rgb.b = l;
	
		  } else {
	
		    var hue2rgb = function ( p, q, t ) {
	
		      if ( t < 0 ) {t += 1;}
		      if ( t > 1 ) {t -= 1;}
		      if ( t < 1 / 6 ) {return p + ( q - p ) * 6 * t;}
		      if ( t < 1 / 2 ) {return q;}
		      if ( t < 2 / 3 ) {return p + ( q - p ) * 6 * ( 2 / 3 - t );}
		      return p;
	
		    };
	
		    var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
		    var q = ( 2 * l ) - p;
	
		    rgb.r = hue2rgb( q, p, h + 1 / 3 );
		    rgb.g = hue2rgb( q, p, h );
		    rgb.b = hue2rgb( q, p, h - 1 / 3 );
	
		  }
		  rgb.r = Math.min(Math.round(rgb.r * 255), 255);
		  rgb.g = Math.min(Math.round(rgb.g * 255), 255);
		  rgb.b = Math.min(Math.round(rgb.b * 255), 255);
	
		  return '#' + this.toHex(rgb.r) + this.toHex(rgb.g) + this.toHex(rgb.b);;
		},
	  rgb2hsl : function(str) {
	    var rgb = this.rgb2arr(str);
	    var r = rgb[0]/255,
	        g = rgb[1]/255,
	        b = rgb[2]/255,
	        min = Math.min(r, g, b),
	        max = Math.max(r, g, b),
	        delta = max - min,
	        h, s, l;
	
	    if (max == min)
	      h = 0;
	    else if (r == max)
	      h = (g - b) / delta;
	    else if (g == max)
	      h = 2 + (b - r) / delta;
	    else if (b == max)
	      h = 4 + (r - g)/ delta;
	
	    h = Math.min(h * 60, 360);
	
	    if (h < 0)
	      h += 360;
	
	    l = (min + max) / 2;
	
	    if (max == min)
	      s = 0;
	    else if (l <= 0.5)
	      s = delta / (max + min);
	    else
	      s = delta / (2 - max - min);
	
	    return [h/360, s, l];
	  },
	  arr2rgb: function(arr){
	    return '#'+ this.toHex(arr[0]) + this.toHex(arr[1]) +  this.toHex(arr[2]);
	  },
	  rgb2arr: function(str){
	    var arr = [];
	    arr.push(parseInt(str.substr(1,2),16));
	    arr.push(parseInt(str.substr(3,2),16));
	    arr.push(parseInt(str.substr(5,2),16));
	    return arr;
	  }
	};


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 等高线几何标记
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var GContour = __webpack_require__(366);
	var Frame = __webpack_require__(270);
	var Core = __webpack_require__(344);
	
	var Contour = function(cfg) {
	  Contour.superclass.constructor.call(this, cfg);
	};
	
	Contour.ATTRS = {
	  type: 'contour'
	};
	
	Util.extend(Contour, Core.Path);
	
	Util.augment(Contour, {
	  _beql: function(a, b) { // 计算两个值是否相等，相差小于1E-9认为相等
	    if (Math.abs(a - b) < 1E-6) {
	      return true;
	    }
	
	    return false;
	  },
	  _getZScale: function() {
	    return this.getAttr('position').getScale('z');
	  },
	  _getData: function(frame) {
	    var self = this;
	    var data = [];
	    var position = self.getAttr('position');
	    var dims = position.getDims();
	    var xDim = dims[0];
	    var yDim = dims[1];
	    var zDim = dims[2];
	
	    var xValues = Frame.values(frame, xDim);
	    var yValues = Frame.values(frame, yDim);
	    var xCount = 0;
	    var yCount = 0;
	    var prePoint = null;
	    Util.each(xValues, function(point) {
	      if (!prePoint || !self._beql(prePoint, point)) {
	        xCount++;
	      }
	      prePoint = point;
	    });
	    prePoint = null;
	    Util.each(yValues, function(point) {
	      if (!prePoint || !self._beql(prePoint, point)) {
	        yCount++;
	      }
	      prePoint = point;
	    });
	
	    frame.each(function(obj, index) {
	      var i = Math.floor(index / (yCount));
	      var j = Math.floor(index % (yCount));
	      var tmp = [obj[xDim], obj[yDim], obj[zDim]];
	      if (!Array.isArray(data[i])) {
	        data[i] = [];
	      }
	      data[i][j] = tmp;
	    });
	    return data;
	  },
	  processFrames: function(frames) {
	    var self = this;
	    var xDim = self.getXDim();
	    var yDim = self.getYDim();
	    var zScale = self._getZScale();
	    var zDim = zScale.dim;
	    var frame = Frame.merge.apply(null, frames);
	    var first = frame.rowObject(0);
	    var data = self._getData(frame);
	
	    var levels = zScale.ticks;
	    var contourData = GContour(data, levels);
	    var output = [];
	    Util.each(contourData, function(contourDataItem) {
	      var path = contourDataItem.path;
	      var value = contourDataItem.value;
	      var tmpData = [];
	      Util.each(path, function(point) {
	        var tmp = Util.mix({}, first);
	        tmp[xDim] = point[0];
	        tmp[yDim] = point[1];
	        tmp[zDim] = value;
	        tmpData.push(tmp);
	      });
	      output.push(new Frame(tmpData));
	    });
	    return output;
	  }
	});
	
	module.exports = Contour;


/***/ }),
/* 366 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview 等高线指的是地形图上高程相等的相邻各点所连成的闭合曲线，垂直投影到一个水平面上。通过本程序计算等高线要求数据源的坐标均匀分布，可以是平滑统计后的结果数据
	 */
	"use strict";
	
	var _GRIDROWS = 0, _GRIDCOLS = 0;//原始数据的行数和列数
	var _EXCURSION=0.001;//修正值
	var _XMIN, _DELTX, _YMIN, _DELTY;//原始数据X轴和Y轴的最小值和步长
	/**
	 * 通过分析原始数据获取等高线路径的方法
	 * @param  {Array} gridData     原始数据，要求坐标均匀分布，
	 * @param  {Array} contourLevel 等高线数组，由小到大存放等高线的值
	 * @return {Array}              等高线数组，数组元素是包含等高线的路径坐标数组path和等高线值value的对象
	 */
	var gContour = function(gridData,contourLevel){
		var edgeInfoX = [], edgeInfoY = [];
		var all_iso_line = [];
		var cur_follow_value;
	
		initdata(gridData);
	
		for (var i = 0; i < contourLevel.length; i++){
			cur_follow_value = contourLevel[i];//当前等高线的值
			var edge = interpolate_tracing_value(gridData,cur_follow_value); //扫描网格模型的水平边和垂直边，给被等值线穿过的边做标记
			edgeInfoX = edge[0];
			edgeInfoY = edge[1];
			tracing_non_closed_contour(edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line);  //追踪开等值线
			tracing_closed_contour(edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line);    //追踪封闭等值线
		}
		
		return all_iso_line;
	}
	//初始化数据，设定常量值，建立网格模型
	function initdata(gridData){
		_GRIDROWS = gridData.length;
		if(_GRIDROWS) _GRIDCOLS = gridData[0].length;
		
		if(_GRIDROWS>1 && _GRIDCOLS > 1){
			_XMIN = gridData[0][0][0];
			_YMIN = gridData[0][0][1];
			_DELTX = gridData[1][0][0] - gridData[0][0][0];
			_DELTY = gridData[0][1][1] - gridData[0][0][1];
		}
	}
	//扫描并计算水平边和垂直边上的等值点
	function interpolate_tracing_value(gridData,cur_follow_value){
		var edgeInfoX = interpolate_xy(true,gridData,cur_follow_value);//水平边
		var edgeInfoY = interpolate_xy(false,gridData,cur_follow_value);//垂直边
		return [edgeInfoX,edgeInfoY];
	}
	//获取水平边或垂直边上等值点
	function interpolate_xy(isHorizon, gridData,cur_follow_value){
		var nrow = _GRIDROWS, ncol = _GRIDCOLS;
		var edge = [];
	
		if(isHorizon) ncol--;
		else nrow--;
	
		//扫描每一条边
		for (var i = 0; i < nrow; i++){
			edge[i] = [];
			for (var j = 0; j < ncol; j++){
				edge[i][j] = {};
				
				var h0, h1;       //计录一条边上的两个值
				h0 = gridData[i][j][2];
				if(isHorizon){
					h1 = gridData[i][j + 1][2];
				}else{
					h1 = gridData[i + 1][j][2];
				}
	
				if (beql(h0, h1)){
					edge[i][j].rate = -2.0;
					edge[i][j].have_iso_point = false;
				}
				else{
					var eqh0 = beql(cur_follow_value, h0),eqh1 = beql(cur_follow_value, h1);
					var flag = (cur_follow_value - h0) * (cur_follow_value - h1);
	
					
					if( eqh0|| eqh1){ //与其中一个相等
						//修正
						if (eqh0)
							h0 += _EXCURSION;
						else
							h1 += _EXCURSION;
	
						var rate = edge[i][j].rate = (cur_follow_value - h0) / (h1 - h0);
	
						if( rate>0 && rate<1 ){
							edge[i][j].have_iso_point = true;
						}else{
							edge[i][j].have_iso_point = false;
						}
	
					}else if (flag > 0){ //同时大于或小于两端点
						edge[i][j].rate = -2.0;
						edge[i][j].have_iso_point = false;
					}
					else if (flag < 0){ //在两点之间
						edge[i][j].rate = (cur_follow_value - h0) / (h1 - h0);
						edge[i][j].have_iso_point = true;
					}
				}
			}
		}
		return edge;
	}
	//计算两个值是否相等，相差小于1E-9认为相等
	function beql(a,b){
		if(Math.abs(a-b) < 1E-9 )
			return true;
		else
			return false;
	}
	//追踪开等值线
	function tracing_non_closed_contour(edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line){
		var i=0, j=0;
		
		var pre_iso_point = isoPointPos(),//初始化上一条边
				cur_iso_point = isoPointPos();//初始化当前边
	
		//追踪左边框
		for ( i = 0; i < _GRIDROWS-1; i++)
		{
			if (edgeInfoY[i][0].have_iso_point)
			{
				pre_iso_point = isoPointPos(i,-1,false);
				cur_iso_point = isoPointPos(i, 0,false);
	
				tracing_one_non_closed_contour(pre_iso_point,cur_iso_point,cur_follow_value,all_iso_line,edgeInfoX,edgeInfoY);
			}
		}
		//追踪上边框
		for ( j = 0; j < _GRIDCOLS-1; j++)
		{
			if (edgeInfoX[_GRIDROWS-1][j].have_iso_point)
			{
				pre_iso_point = isoPointPos(_GRIDROWS,j,true);
				cur_iso_point = isoPointPos(_GRIDROWS-1,j,true);
	
				tracing_one_non_closed_contour(pre_iso_point,cur_iso_point,cur_follow_value,all_iso_line,edgeInfoX,edgeInfoY);
			}
		}
		//追踪右边框
		for ( i = 0; i < _GRIDROWS-1; i++)
		{
			if (edgeInfoY[i][_GRIDCOLS-1].have_iso_point)
			{
				pre_iso_point = isoPointPos(i,_GRIDCOLS,false);
				cur_iso_point = isoPointPos(i,_GRIDCOLS-1,false);
	
				tracing_one_non_closed_contour(pre_iso_point,cur_iso_point,cur_follow_value,all_iso_line,edgeInfoX,edgeInfoY);
			}
		}
		//追踪下边框
		for ( j = 0; j < _GRIDCOLS-1; j++)
		{
			if (edgeInfoX[0][j].have_iso_point)
			{
				pre_iso_point = isoPointPos(-1,j,true);
				cur_iso_point = isoPointPos(0, j,true);
	
				tracing_one_non_closed_contour(pre_iso_point,cur_iso_point,cur_follow_value,all_iso_line,edgeInfoX,edgeInfoY);
			}
		}
	}
	
	//根据当前边和上一条边获取下一条边，并将下一条边上的等值点存放到路径对象里
	function tracing_one_non_closed_contour(pre_iso_point,cur_iso_point,cur_follow_value,all_iso_line,edgeInfoX,edgeInfoY){	
		var over = false;//追踪结束标志位
		var now_iso_line = {
					value:cur_follow_value,
					path :[] 
				};
	
		dealIsoPoint(cur_iso_point,edgeInfoX,edgeInfoY);//将当前边标为已读，避免重复追踪
		now_iso_line.path.push( getXY(cur_iso_point,edgeInfoX,edgeInfoY) );//存放当前边上的等值点到路径
	
		while(!over)
		{
			//寻找下一条边，找不到结束循环
			if(!trace_next_point(cur_iso_point,pre_iso_point,edgeInfoX,edgeInfoY,now_iso_line) ) break;
			//能找到下一条边，但遇到边界，结束循环
			over = (!cur_iso_point.row && cur_iso_point.isHorizon)//网格底边
				|| (!cur_iso_point.col && !cur_iso_point.isHorizon)//网格左边
				|| (cur_iso_point.row == _GRIDROWS-1)//网格上边
				|| (cur_iso_point.col == _GRIDCOLS-1);//网格右边
		}
	
		all_iso_line.push(now_iso_line);
	}
	//根据网格模型的水平边或垂直边上等值点的信息，获取等值点实际坐标值
	function getXY(point,edgeInfoX,edgeInfoY){
		var row = point.row, col = point.col;
		var is_h = point.isHorizon;
		
		var x= _XMIN + row*_DELTX,
			  y= _YMIN + col*_DELTY;
			
		if(is_h)
		{
			y += edgeInfoX[row][col].rate * _DELTY;
		}
		else
		{
			x += edgeInfoY[row][col].rate * _DELTX;
		}
		
		return [x,y];
	}
	//返回网格模型边对象
	function isoPointPos(_row, _col, _isHorizon){
		return{
			row: _row || 0,
			col: _col || 0,
			isHorizon: _isHorizon || 0,
			clone: isoPointPosClone
		}
	}
	//复制网格模型边对象
	function isoPointPosClone(pointA){
		 this.row = pointA.row, 
		 this.col = pointA.col, 
		 this.isHorizon = pointA.isHorizon;
	}
	//将某条边标为已读
	function dealIsoPoint(point,edgeInfoX,edgeInfoY){
		var row = point.row, col = point.col;
		var is_h = point.isHorizon;
		
		if(is_h)
		{
			edgeInfoX[row][col].have_iso_point = false;
		}
		else
		{
			edgeInfoY[row][col].have_iso_point = false;
		}
		
		return point;
	}
	//根据上一条边和当前边，获取有等值点的下一条边，并将下一个等值点存放到路径数组中
	function trace_next_point(cur_iso_point,pre_iso_point,edgeInfoX,edgeInfoY,now_iso_line){
		var left = isoPointPos(),
				right = isoPointPos(),
				oppsite = isoPointPos();
		//根据路径方向，确定当前网格的左边、右边和上边
		determine_direction(left,right,oppsite,cur_iso_point,pre_iso_point);
	
		var points = [left, right, oppsite];
		var bHaveIso = [];
		var point = {};
		var success = false;
	
		for(var i=0; i<3; i++){
			bHaveIso[i] = isHaveIsoPoint(edgeInfoX,edgeInfoY,points[i]);//获取三条边是否有等值点的信息
		}
		
		if(bHaveIso[0] && bHaveIso[1] && bHaveIso[2] ){//一个网格内另外三条边上都有等值点，则只可能从左边或右边穿出，计算左边和右边等值点到当前等值点的距离，选择距离较近者
			if( getDistance(cur_iso_point, points[0],edgeInfoX,edgeInfoY ) < getDistance(cur_iso_point, points[1],edgeInfoX,edgeInfoY ) ){
				point = dealIsoPoint( points[0],edgeInfoX,edgeInfoY );
			}else{
				point = dealIsoPoint( points[1],edgeInfoX,edgeInfoY );
			}
	
			success = true;
		}else{//一个网格内有另外一条边含有等值点，或没有边含有等值点，不可能有另外两条边含有等值点的情况
			for(var i=0; i<3; i++){
				if(bHaveIso[i]){
					point = dealIsoPoint( points[i],edgeInfoX,edgeInfoY  );
					success = true;
					break;
				}		
			}
		}
	
		if(success){//找到下一条边，将边上等值点存入路径数组，更新当前边为下一条边
			now_iso_line.path.push( getXY(point,edgeInfoX,edgeInfoY) );
			pre_iso_point.clone(cur_iso_point);
			cur_iso_point.clone(point);
		}
	
		return success;
	}
	//判断从网格哪边进入，确定进入网格后的左边、右边和上边，作为下一个扫描对象
	function determine_direction(left,right,oppsite,cur_iso_point,pre_iso_point){
		
	  if (cur_iso_point.row > pre_iso_point.row) //从下至上
	  {
	  	left.clone(cur_iso_point); 
	  	left.isHorizon = false;
	
	  	right.clone(left); 
	  	right.col += 1;
	
	  	oppsite.clone(cur_iso_point); 
	  	oppsite.row += 1;
	
	  	return;
	  }
	  else if (cur_iso_point.col > pre_iso_point.col)  //从左至右
	  {
	  	right.clone(cur_iso_point); 
	  	right.isHorizon = true;
	
	  	left.clone(right);
	  	left.row += 1;
	
	  	oppsite.clone(cur_iso_point);
	  	oppsite.col += 1;
	
	  	return;
	  }
		else if (cur_iso_point.isHorizon)  //从上至下
		{
			right.clone(cur_iso_point); 
			right.row -= 1;
			right.isHorizon = false;
			
			left.clone(right);
			left.col += 1;
	
			oppsite.clone(cur_iso_point); 
			oppsite.row -= 1;
	
			return;
		}
	  else                               //从右至左
	  {
	  	left.clone(cur_iso_point);
	  	left.col -= 1;
	  	left.isHorizon = true;
	
	  	right.clone(left); 
	  	right.row += 1;
	
	  	oppsite.clone(cur_iso_point); 
	  	oppsite.col -= 1;
	
	  	return;
	  }
	}
	//判断当前边是否有等值点
	function isHaveIsoPoint(edgeInfoX,edgeInfoY,position){
		var r = position.row, c = position.col, h = position.isHorizon;
		if(h){
			return edgeInfoX[r][c].have_iso_point;
		}else{
			return edgeInfoY[r][c].have_iso_point;
		}
	}
	//获取两条边上等值点的距离
	function getDistance(pointA,pointB,edgeInfoX,edgeInfoY){
		var xyA = getXY(pointA,edgeInfoX,edgeInfoY), xyB = getXY(pointB,edgeInfoX,edgeInfoY);
		var xd = xyA.x - xyB.x, yd = xyA.y - xyB.y;
	
		return Math.sqrt(xd*xd + yd*yd);
	}
	//追踪封闭等值线
	function tracing_closed_contour(edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line){
		var i, j;
		var pre_iso_point = isoPointPos(),
				cur_iso_point = isoPointPos();
		//扫描所有垂直边
		for(j=0; j<_GRIDCOLS-1; j++){
			for(i=0; i<_GRIDROWS-1; i++){//每一列的各层
				if(edgeInfoY[i][j].have_iso_point){//垂直边上是否有等值点
					pre_iso_point = isoPointPos(i,0,false);//初始化上一条边
					cur_iso_point = isoPointPos(i,j,false);//初始化当前边
	
					tracing_one_closed_contour(pre_iso_point,cur_iso_point,edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line);
				}
			}
		}
	}
	//根据上一条边和当前边，获取下一条含有等值线的边，并将等值点存入路径
	function tracing_one_closed_contour(pre_iso_point,cur_iso_point,edgeInfoX,edgeInfoY,cur_follow_value,all_iso_line){
		var start_r = cur_iso_point.row, start_c = cur_iso_point.col;
		var over = false;
		var now_iso_line = {
			value:cur_follow_value,
			path :[] 
		};
		
		now_iso_line.path.push( getXY(cur_iso_point,edgeInfoX,edgeInfoY) );
	
		while(!over)
		{
			if(!trace_next_point(cur_iso_point,pre_iso_point,edgeInfoX,edgeInfoY,now_iso_line) ) break;
			//当下一条边是初始边，结束追踪
			over = (cur_iso_point.row==start_r) && (cur_iso_point.col == start_c)
				&& (!cur_iso_point.isHorizon);
		}
	
		all_iso_line.push(now_iso_line);
	}
	
	
	
	module.exports = gContour;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 边，用于树、图
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Core = __webpack_require__(344);
	
	var Edge = function(cfg) {
	  Edge.superclass.constructor.call(this, cfg);
	};
	
	Edge.ATTRS = {
	  type: 'edge'
	};
	
	Util.extend(Edge, Core.Base);
	
	module.exports = Edge;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 用于设定 geom 上的图形属性
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Global = __webpack_require__(264);
	
	var GeomWrapper = function(cfg) {
	  Util.mix(this, cfg);
	  this._init();
	};
	
	Util.augment(GeomWrapper, {
	  options: {},
	
	  _init: function() {
	    var adjusts = this.options.adjusts;
	    if (adjusts) {
	      Util.each(adjusts, function(adjustType, idx) {
	        adjusts[idx] = Util.ucfirst(adjustType);
	      });
	      this.options.adjusts = adjusts;
	    }
	  },
	  _setOptions: function(type, tmpOptions) {
	    var options = this.options;
	    options[type] = Util.mix({}, options[type], tmpOptions);
	  },
	  _getDefaultShapes: function(type) {
	    var reg = /[A-Z].*$/;
	    type = type.replace(reg);
	    return Global.shapes[type];
	  },
	  /**
	   * 位置视觉通道映射
	   * @chainable
	   * @param  {String|Stat} fields 位置对应的信息
	   */
	  position: function(field) {
	    this._setOptions('position', {
	      field: field
	    });
	    return this;
	  },
	  /**
	   * 颜色视觉通道映射
	   * @chainable
	   * @param  {[type]} dims     [description]
	   * @param  {[type]} colorCfg 如果需要进行颜色的计算，则指定计算类型：lightness,brightness,hue等
	   * @return {[type]}          [description]
	   */
	  color: function(field, cfg) {
	    var colorCfg = {};
	    colorCfg.field = field;
	    if (cfg) {
	      if (Util.isFunction(cfg)) {
	        colorCfg.callback = cfg;
	      } else {
	        colorCfg.colors = cfg;
	      }
	    } else {
	      colorCfg.colors = (this.options.type === 'heatmap') ? Global.heatmapColors : Global.colors['default'];
	    }
	    this._setOptions('color', colorCfg);
	
	    return this;
	  },
	  /**
	   * 形状视觉通道映射
	   * @chainable
	   * @param  {String|Stat} dims 图形形状对应的信息
	   */
	  shape: function(field, cfg) {
	    var shapeCfg = {};
	    shapeCfg.field = field;
	
	    if (cfg) {
	      if (Util.isFunction(cfg)) {
	        shapeCfg.callback = cfg;
	      } else {
	        shapeCfg.shapes = cfg;
	      }
	    } else {
	      shapeCfg.shapes = this._getDefaultShapes(this.options.type);
	    }
	    this._setOptions('shape', shapeCfg);
	
	    return this;
	  },
	  /**
	   * 透明度视觉通道映射
	   * @chainable
	   * @param  {String|Stat} dims 透明度对应的信息
	   */
	  opacity: function(field, cfg) {
	    var opacityCfg = {};
	    opacityCfg.field = field;
	    if (Util.isFunction(cfg)) {
	      opacityCfg.callback = cfg;
	    }
	
	    this._setOptions('opacity', opacityCfg);
	    return this;
	  },
	  /**
	   * 大小视觉通道映射
	   * @chainable
	   * @param  {String|Stat} dims 图形大小的信息
	   * @param {Number} [max] 图形的最大值，可以为空
	   */
	  size: function(field, max, min) {
	    var sizeCfg = {};
	    sizeCfg.field = field;
	    sizeCfg.min = Util.isNull(min) ? 1 : min;
	
	    if (Util.isFunction(max)) {
	      sizeCfg.callback = max;
	    } else {
	      sizeCfg.max = max || 10;
	    }
	    this._setOptions('size', sizeCfg);
	
	    return this;
	  },
	  /**
	   * 文本显示，不进行属性映射
	   * @chainable
	   * @param  {String|Stat} field 指定数据属性
	   * @param {Function} [callback] 回调函数
	   * @param {Object} [labelCfg] 文本的配置项信息
	   */
	  label: function(field, callback, cfg) {
	    var labelCfg = {};
	    labelCfg.field = field;
	
	    if (Util.isObject(callback)) {
	      cfg = callback;
	      callback = null;
	    }
	
	    labelCfg.callback = callback;
	    labelCfg.cfg = cfg;
	
	    this._setOptions('label', labelCfg);
	    return this;
	  },
	  /**
	   * tooltip 提示信息，不进行属性映射
	   * @chainable
	   * @param  {String} field 提示信息对应的数据属性
	   */
	  tooltip: function(field) {
	    this.options.tooltip = field;
	    return this;
	  },
	  /**
	   * 设置图形的样式，不进行属性映射
	   * @param  {Object} style 样式
	   */
	  style: function(cfg) {
	    var options = this.options;
	    options.style = cfg;
	    return this;
	  },
	  /**
	   * 设置几何标记的选择模式
	   * @chainable
	   * @return {[type]}
	   */
	  selected: function(enable, cfg) {
	    var selectedCfg = {};
	    if (enable === false) {
	      selectedCfg.mode = false;
	    } else {
	      selectedCfg = (enable === true) ? cfg : enable;
	    }
	    this._setOptions('selected', selectedCfg);
	    return this;
	  },
	  /**
	   * 动画配置
	   * @param {Object} cfg
	   * @return {[type]}
	   */
	  animate: function(cfg) {
	    this._setOptions('animate', cfg);
	    return this;
	  }
	});
	
	module.exports = GeomWrapper;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var Attr = __webpack_require__(370);
	var Global = __webpack_require__(264);
	
	var compatGeoms = [
	  'pointStack',
	  'pointJitter',
	  'pointDodge',
	  'intervalStack',
	  'intervalDodge',
	  'intervalSymmetric',
	  'areaStack',
	  'schemaDodge'
	];
	
	function parseCompatGeoms(type) {
	  var tmp = type.replace(/([a-z](?=[A-Z]))/g, '$1 '); // 例如，areaStack 变为 'area Stack'
	  return tmp.split(' ');
	}
	
	module.exports = {
	  _initAttrs: function() {
	    var self = this;
	    var geomsOptions = this.get('options').geoms;
	    Util.each(geomsOptions, function(geomOption) {
	      if (Util.inArray(compatGeoms, geomOption.type)) { // 处理 compatGeoms 中的 type 类型
	        var arr = parseCompatGeoms(geomOption.type);
	        geomOption.type = arr[0];
	        if (geomOption.adjusts) {
	          geomOption.adjusts = [arr[1]].concat(geomOption.adjusts);
	        } else {
	          geomOption.adjusts = [arr[1]];
	        }
	      }
	
	      var attrs = [];
	      var attrTypes = ['position', 'color', 'shape', 'opacity', 'size'];
	      Util.each(geomOption, function(attrOption, attrType) {
	        if (attrTypes.indexOf(attrType) !== -1) {
	          var attrCfg;
	          var cfg;
	          if (!Util.isObject(attrOption) || attrOption.isStat) {
	            cfg = {};
	            cfg.field = attrOption;
	          } else {
	            cfg = attrOption;
	          }
	          if (attrType === 'color') {
	            attrCfg = self._initColor(cfg, geomOption.type);
	          } else if (attrType === 'size') {
	            attrCfg = self._initSize(cfg);
	          } else if (attrType === 'shape') {
	            attrCfg = self._initShape(cfg, geomOption.type);
	          } else {
	            attrCfg = cfg;
	          }
	          var scalesAndStatCfg = self._getScalesAndStat(cfg.field, geomOption.type, geomOption.adjusts, attrType);
	          attrCfg = Util.mix({}, attrCfg, scalesAndStatCfg);
	          var attr = self._getAttr(attrType, attrCfg);
	          attrs.push(attr);
	        }
	      });
	      geomOption.attrs = attrs;
	    });
	  },
	  _initColor: function(colorOption, type) {
	    var cfg = {};
	
	    if (colorOption.callback) {
	      cfg.callback = colorOption.callback;
	    } else if (colorOption.colors) {
	      if (Util.isArray(colorOption.colors)) {
	        cfg.arr = colorOption.colors;
	      } else {
	        cfg.methodType = colorOption.colors;
	      }
	    } else {
	      if (type === 'heatmap') {
	        cfg.methodType = Global.heatmapColors;
	      } else {
	        cfg.arr = Global.colors['default'];
	      }
	    }
	
	    return cfg;
	  },
	  _initSize: function(sizeOption) {
	    var cfg = {};
	    if (sizeOption.callback) {
	      cfg.callback = sizeOption.callback;
	    }
	
	    cfg.min = sizeOption.min || 1;
	    cfg.max = sizeOption.max || 10;
	    return cfg;
	  },
	  _initShape: function(shapeOption, type) {
	    var cfg = {};
	    if (shapeOption.callback) {
	      cfg.callback = shapeOption.callback;
	    }
	    if (shapeOption.shapes) {
	      cfg.arr = shapeOption.shapes;
	    } else {
	      var reg = /[A-Z].*$/;
	      type = type.replace(reg);
	      cfg.arr = Global.shapes[type];
	    }
	
	    return cfg;
	  },
	  _getScalesAndStat: function(dims, type, adjusts, attrType) {
	    var result = this._parseDims(dims, type, adjusts, attrType);
	    return {
	      scales: result.scales,
	      stat: result.stat
	    };
	  },
	  // 转换输入的字段名 如：'x*y'
	  _parseDims: function(dims, type, adjusts, attrType) {
	    var self = this;
	    var stat;
	
	    if (dims.isStat) { // 判断是否有统计
	      stat = dims;
	      if (!dims.hasInited) {
	        stat.init();
	        stat.hasInited = true;
	      }
	      dims = stat.getDims();
	      self._addStat(stat);
	    }
	
	    if (Util.isString(dims) && dims.indexOf('+') !== -1) {
	      // 如果存在加法运算符，目前只支持 (a+b+c)*(d+e) 的形式
	      var result = [];
	      var scaleAssist = this.get('scaleAssist');
	      var items = dims.replace(/\s+/g, '').split('*');
	      Util.each(items, function(item) {
	        var arr = item.replace(/\(|\)|\s+/g, '').split('+');
	        var dimName = arr.join('+');
	        result.push(dimName);
	        if (arr.length > 1) {
	          scaleAssist.defs[dimName] = Util.mix({}, scaleAssist.defs[dimName], {
	            dims: arr
	          });
	        }
	      });
	      dims = result;
	    } else if (Util.isString(dims) && dims.indexOf('*') !== -1) {
	      dims = dims.split('*');
	      dims = Util.map(dims, function(subDim) {
	        return subDim.trim();
	      });
	    } else if (Util.isNumber(dims) || Util.isString(dims)) {
	      dims = [dims];
	    }
	
	    // 饼图的特殊处理逻辑
	    var coord = this.get('coord');
	    if (attrType === 'position' && coord.type === 'theta' && type === 'interval' && adjusts[0] === 'Stack' && dims[0] !== '..pieX') {
	      dims.unshift('..pieX');
	    }
	
	    // jitter 和 stack 的特殊处理
	    if (attrType === 'position' && dims.length === 1 && (Util.inArray(adjusts, 'Jitter') || Util.inArray(adjusts, 'Stack')) && dims[dims.length - 1] !== '..y') {
	      dims.push('..y');
	    }
	
	    var scales = [];
	    Util.each(dims, function(dim, idx) { // 创建度量
	      var isIntervalY = (idx === 1 && type === 'interval');
	      var scale = self.createScale(dim, isIntervalY);
	      scales.push(scale);
	    });
	
	    return {
	      dims: dims,
	      stat: stat,
	      scales: scales
	    };
	  },
	  _addStat: function(stat) {
	    var stats = this.get('stats');
	    stats.push(stat);
	  },
	  _getAttr: function(type, cfg) {
	    type = Util.ucfirst(type);
	    var C = Attr[type];
	    return new C(cfg);
	  }
	};


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	var Attr = __webpack_require__(371);
	
	Attr.Position = __webpack_require__(372);
	Attr.Color = __webpack_require__(373);
	Attr.Size = __webpack_require__(377);
	Attr.Shape = __webpack_require__(378);
	Attr.Opacity = __webpack_require__(379);
	
	module.exports = Attr;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the Attribute base class
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	var Attribute = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Attribute.prototype = {
	  /**
	   * 属性的类型
	   * @type {String}
	   */
	  type: 'base',
	  /**
	   * 属性的属性名称,如 x,y,color,shape等
	   * @type {Array}
	   */
	  names: null,
	  /**
	   * 属性内部的度量
	   * @type {Array}
	   */
	  scales: [],
	  /**
	   * 最小值
	   * @type {Number}
	   */
	  min: 0,
	  /**
	   * 最大值
	   * @type {Number}
	   */
	  max: 10,
	  /**
	   * 方法
	   * @type {Function}
	   */
	  method: function(normal) {
	    return normal * (this.max - this.min) + this.min;
	  },
	  /**
	   * 回调函数
	   * @type {Function}
	   */
	  callback: function() {
	    var self = this;
	    var arr = self.arr;
	    var scales = self.scales;
	    var params = Util.toArray(arguments);
	    var values = [];
	    var param;
	    var numeric;
	    var normal;
	
	    Util.each(scales, function(scale, index) {
	      param = params[index];
	      normal = scale.scale(param);
	      numeric = scale.translate(param);
	      if (scale.type === 'identity') {
	        values.push(scale.value);
	      } else {
	        if (Util.isArray(arr)) {
	          values.push(self._getArrValue(arr, scale, normal, numeric));
	        } else if (self.method) {
	          values.push(self.method(normal));
	        } else {
	          values.push(null);
	        }
	      }
	    });
	    return values;
	  },
	  /**
	   * 根据度量获取属性名
	   * @return {Array} dims of this Attribute
	   */
	  getNames: function() {
	    var scales = this.scales;
	    var names = this.names;
	    var rst = [];
	    Util.each(scales, function(v, k) {
	      rst.push(names[k]);
	    });
	    return rst;
	  },
	  /**
	   * 根据度量获取维度名
	   * @return {Array} dims of this Attribute
	   */
	  getDims: function() {
	    var scales = this.scales;
	    var rst = [];
	    Util.each(scales, function(scale) {
	      rst.push(scale.dim);
	    });
	    return rst;
	  },
	  /**
	   * 根据名称获取度量
	   * @param  {String} name the name of scale
	   * @return {Scale} scale
	   */
	  getScale: function(name) {
	    var scales = this.scales;
	    var names = this.names;
	    var index = names.indexOf(name);
	    return scales[index];
	  },
	  /**
	   * 映射数据
	   * @param {*} param1...paramn 多个数值
	   * @return {Array} 映射的值组成的数组
	   */
	  mappingValues: function() {
	    var scales = this.scales;
	    var params = Util.toArray(arguments);
	    var callback = this.callback;
	    var values = params;
	    if (callback) {
	      for (var i = 0; i < params.length; i++) {
	        params[i] = this.parseParam(params[i], scales[i]);
	      }
	      values = callback.apply(this, params);
	    }
	    if (this.names && this.names.length === 1) values = [values];
	    return values;
	  },
	  /**
	   * 映射数据前对数据进行转换
	   * @param  {*} param 数据值
	   * @return {Number}  转换后的值
	   */
	  parseParam: function(param, scale) { // 附加参数 index
	    var rst = param;
	    if (!scale.isLinear) {
	      rst = scale.scale(param);
	      rst = scale.invert(rst);
	    }
	    return rst;
	  },
	  /**
	   * 获取Arr映射值
	   * @param {*} param1...paramn 多个数值
	   * @return {Number} index
	   */
	  _getArrValue: function(arr, scale, normal, numeric) {
	    var index = 0;
	    if (scale.isCategory) {
	      index = numeric;
	    } else if (scale.isLinear) {
	      index = parseInt(normal * (arr.length - 1), 10);
	    }
	    return arr[index % arr.length];
	  }
	};
	
	module.exports = Attribute;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the position attribute of core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Attr = __webpack_require__(371);
	
	var Position = function(cfg) {
	  Position.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Position, Attr);
	
	Util.augment(Position, {
	  type: 'position',
	  names: ['x', 'y', 'z'],
	  coord: null,
	  /**
	   * 将数据映射到 0 - 1
	   * @param  {*} param 数据值
	   * @param  {Object} scale 度量
	   * @return {Number}  转换后的值
	   */
	  parseParam: function(param, scale) { // 附加参数 index
	    var rst;
	    if (Util.isArray(param)) {
	      rst = [];
	      Util.each(param, function(subVal) {
	        rst.push(scale.scale(subVal));
	      });
	    } else {
	      rst = scale.scale(param);
	    }
	    return rst;
	  },
	  callback: function(x, y) {
	    var coord = this.coord;
	    var rstX;
	    var rstY;
	    var obj;
	    if (!x && x !== 0) x = 0.1;
	    if (!y && y !== 0) y = 0.1;
	
	    if (Util.isArray(y) && Util.isArray(x)) {
	      rstX = [];
	      rstY = [];
	      for (var i = 0, j = 0; i < x.length && j < y.length; i++, j++) {
	        obj = coord.convertPoint({
	          x: x[i],
	          y: y[j]
	        });
	        rstX.push(obj.x);
	        rstY.push(obj.y);
	      }
	    } else if (Util.isArray(y)) {
	      rstY = [];
	      Util.each(y, function(yVal) {
	        obj = coord.convertPoint({
	          x: x,
	          y: yVal
	        });
	        if (rstX && rstX !== obj.x) {
	          if (!Util.isArray(rstX)) {
	            rstX = [rstX];
	          }
	          rstX.push(obj.x);
	        } else {
	          rstX = obj.x;
	        }
	        rstY.push(obj.y);
	      });
	    } else if (Util.isArray(x)) {
	      rstX = [];
	      Util.each(x, function(xVal) {
	        obj = coord.convertPoint({
	          x: xVal,
	          y: y
	        });
	        if (rstY && rstY !== obj.y) {
	          if (!Util.isArray(rstY)) {
	            rstY = [rstY];
	          }
	          rstY.push(obj.y);
	        } else {
	          rstY = obj.y;
	        }
	        rstX.push(obj.x);
	      });
	    } else {
	      var point = coord.convertPoint({
	        x: x,
	        y: y
	      });
	      rstX = point.x;
	      rstY = point.y;
	    }
	    return [rstX, rstY];
	  }
	});
	
	module.exports = Position;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the color attribute of core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var ColorCalculate = __webpack_require__(374);
	var Attr = __webpack_require__(371);
	
	var Color = function(cfg) {
	  Color.superclass.constructor.call(this, cfg);
	  this.initMethod();
	};
	
	Util.extend(Color, Attr);
	
	Util.augment(Color, {
	  type: 'color',
	  names: ['color'],
	  arr: null,
	  method: null,
	  methodType: null,
	  initMethod: function() {
	    var methodType = this.methodType;
	    var method;
	    if (methodType && methodType.indexOf('-') !== -1) {
	      method = ColorCalculate.gradient(methodType);
	    } else {
	      method = ColorCalculate[methodType];
	    }
	    this.method = method;
	  }
	});
	
	module.exports = Color;


/***/ }),
/* 374 */
[530, 375, 376],
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview calculate the color
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	var cUtil = __webpack_require__(376);
	var Util = __webpack_require__(169);
	
	// get percent value
	function getValue(start, end, left, index) {
	  var value = start[index] + (end[index] - start[index]) * left;
	  return value;
	}
	var CalColor = {
	  calColor: function(points, percent, space) {
	    var steps = points.length - 1;
	    var step = Math.floor(steps * percent);
	    var left = steps * percent - step;
	    var start = points[step];
	    var end = step === steps ? start : points[step + 1];
	    var rgb;
	    if (space === 'hsl') {
	      rgb = cUtil.hsl2Rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);
	    } else {
	      rgb = {
	        r: getValue(start, end, left, 0),
	        g: getValue(start, end, left, 1),
	        b: getValue(start, end, left, 2)
	      };
	      rgb = '#' + cUtil.toHex(rgb.r) + cUtil.toHex(rgb.g) + cUtil.toHex(rgb.b);
	    }
	    return rgb;
	  },
	  lightness: function(percent, hue) {
	    hue = hue || 0;
	    var points = [
	      [hue, 1, 0.9],
	      [hue, 1, 0.5]
	    ];
	    return CalColor.calColor(points, percent, 'hsl');
	  },
	  /**
	   * 渐变的红色
	   * @param  {Number} percent 百分比
	   * @return {String}
	   */
	  red: function(percent) {
	    return CalColor.lightness(percent, 0);
	  },
	  /**
	   * 渐变的蓝色
	   * @param  {Number} percent 百分比
	   * @return {String}
	   */
	  blue: function(percent) {
	    return CalColor.lightness(percent, 0.66);
	  },
	  /**
	   * 渐变的绿色
	   * @param  {Number} percent 百分比
	   * @return {String}
	   */
	  green: function(percent) {
	    return CalColor.lightness(percent, 0.33);
	  },
	  gradient: function(colors) {
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors, function(color) {
	      if (color.indexOf('#') === -1) {
	        color = cUtil.toRGB(color);
	      }
	      points.push(cUtil.rgb2arr(color));
	    });
	    return function(percent) {
	      return CalColor.calColor(points, percent);
	    };
	  },
	  gradientHsl: function(colors) {
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors, function(color) {
	      if (color.indexOf('#') === -1) {
	        color = cUtil.toRGB(color);
	      }
	      points.push(cUtil.rgb2hsl(color));
	    });
	    return function(percent) {
	      return CalColor.calColor(points, percent, 'hsl');
	    };
	  },
	  saturation: function(percent, hue) {
	    hue = hue || 0;
	    var points = [
	      [hue, 0, 0.5],
	      [hue, 1, 0.5]
	    ];
	    return CalColor.calColor(points, percent, 'hsl');
	  },
	  hue: function(percent) {
	    var points = [
	      [0, 1, 0.5],
	      [1, 1, 0.5]
	    ];
	    return CalColor.calColor(points, percent, 'hsl');
	  },
	  /**
	   * get a gray color,use the percent
	   * @param  {Number} percent the percent of gray
	   * @return {String} color
	   */
	  brightness: function(percent) {
	    var points = [
	      [255, 255, 255],
	      [0, 0, 0]
	    ];
	    return CalColor.calColor(points, percent);
	  },
	  /**
	   * get a heat color,use the percent
	   * @param  {Number} percent the percent of heat
	   * @return {String} color
	   */
	  heat: function(percent) {
	    var points = [
	      [255, 255, 255],
	      [255, 255 * 0.5, 0],
	      [0, 0, 0]
	    ];
	    return CalColor.calColor(points, percent);
	  },
	  /**
	   * get a rainbow color,use the percent
	   * @param  {Number} percent the percent of rainbow
	   * @return {String} color
	   */
	  rainbow: function(percent) {
	    var points = [
	      [0, 255, 255],
	      [0, 0, 255],
	      [0, 255, 0],
	      [255, 0, 0]
	    ];
	    return CalColor.calColor(points, percent);
	  },
	  /**
	   * get a circular color,use the percent
	   * @param  {Number} percent the percent of circular
	   * @return {String} color
	   */
	  circular: function(percent) {
	    var points = [
	      [0, 0, 255],
	      [0, 255, 0],
	      [255, 255, 0],
	      [255, 0, 0],
	      [0, 0, 255]
	    ];
	    return CalColor.calColor(points, percent);
	  },
	  /**
	   * get a bipolar color,use the percent
	   * @param  {Number} percent the percent of bipolar
	   * @return {String} color
	   */
	  bipolar: function(percent) {
	    var points = [
	      [0, 255, 0],
	      [0, 0, 0],
	      [255, 0, 0]
	    ];
	    return CalColor.calColor(points, percent);
	  }
	};
	module.exports = CalColor;


/***/ }),
/* 376 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview calculate the color
	 * @author huangtong.ht@alipay.com
	 */
	
	'use strict';
	var RGB_REG = /rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
	
	function createTmp() {
	  var i = document.createElement('i');
	  i.title = 'Web Colour Picker';
	  i.style.display = 'none';
	  document.body.appendChild(i);
	  return i;
	}
	var colorCache = {};
	var iEl = null;
	module.exports = {
	  toRGB: function(color) {
	    if (!iEl) { // 防止防止在页头报错
	      iEl = createTmp();
	    }
	    var rst;
	    if (colorCache[color]) {
	      rst = colorCache[color];
	    } else {
	      iEl.style.color = color;
	      rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');
	      var cArray = RGB_REG.exec(rst);
	      cArray.shift();
	      rst = this.arr2rgb(cArray);
	      colorCache[color] = rst;
	    }
	    return rst;
	  },
	  // value to hex
	  toHex: function(value) {
	    value = Math.round(value);
	    value = value.toString(16);
	    if (value.length === 1) {
	      value = '0' + value;
	    }
	    return value;
	  },
	  hsl2Rgb: function(hsl) {
	    // h,s,l ranges are in 0.0 - 1.0
	    var h = hsl[0];
	    var s = hsl[1];
	    var l = hsl[2];
	
	    var rgb = {};
	    if (s === 0) {
	      rgb.r = rgb.g = rgb.b = l;
	    } else {
	      var hue2rgb = function(p, q, t) {
	        if (t < 0) {
	          t += 1;
	        }
	        if (t > 1) {
	          t -= 1;
	        }
	        if (t < 1 / 6) {
	          return p + (q - p) * 6 * t;
	        }
	        if (t < 1 / 2) {
	          return q;
	        }
	        if (t < 2 / 3) {
	          return p + (q - p) * 6 * (2 / 3 - t);
	        }
	        return p;
	      };
	      var p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);
	      var q = (2 * l) - p;
	      rgb.r = hue2rgb(q, p, h + 1 / 3);
	      rgb.g = hue2rgb(q, p, h);
	      rgb.b = hue2rgb(q, p, h - 1 / 3);
	    }
	    rgb.r = Math.min(Math.round(rgb.r * 255), 255);
	    rgb.g = Math.min(Math.round(rgb.g * 255), 255);
	    rgb.b = Math.min(Math.round(rgb.b * 255), 255);
	
	    return '#' + this.toHex(rgb.r) + this.toHex(rgb.g) + this.toHex(rgb.b);
	  },
	  rgb2hsl: function(str) {
	    var rgb = this.rgb2arr(str);
	    var r = rgb[0] / 255;
	    var g = rgb[1] / 255;
	    var b = rgb[2] / 255;
	    var min = Math.min(r, g, b);
	    var max = Math.max(r, g, b);
	    var delta = max - min;
	    var h;
	    var s;
	    var l;
	
	    if (max === min) {
	      h = 0;
	    } else if (r === max) {
	      h = (g - b) / delta;
	    } else if (g === max) {
	      h = 2 + (b - r) / delta;
	    } else if (b === max) {
	      h = 4 + (r - g) / delta;
	    }
	    h = Math.min(h * 60, 360);
	    if (h < 0) {
	      h += 360;
	    }
	    l = (min + max) / 2;
	    if (max === min) {
	      s = 0;
	    } else if (l <= 0.5) {
	      s = delta / (max + min);
	    } else {
	      s = delta / (2 - max - min);
	    }
	    return [h / 360, s, l];
	  },
	  arr2rgb: function(arr) {
	    return '#' + this.toHex(arr[0]) + this.toHex(arr[1]) + this.toHex(arr[2]);
	  },
	  rgb2arr: function(str) {
	    var arr = [];
	    arr.push(parseInt(str.substr(1, 2), 16));
	    arr.push(parseInt(str.substr(3, 2), 16));
	    arr.push(parseInt(str.substr(5, 2), 16));
	    return arr;
	  }
	};


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the size attribute of core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Attr = __webpack_require__(371);
	
	var Size = function(cfg) {
	  Size.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Size, Attr);
	
	Util.augment(Size, {
	  type: 'size',
	  names: ['size'],
	  arr: null
	});
	
	
	module.exports = Size;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the shape attribute of core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Attr = __webpack_require__(371);
	
	var Shape = function(cfg) {
	  Shape.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Shape, Attr);
	
	Util.augment(Shape, {
	  type: 'shape',
	  names: ['shape'],
	  arr: null
	});
	
	module.exports = Shape;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the opacity attribute of core
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Attr = __webpack_require__(371);
	
	var Opacity = function(cfg) {
	  Opacity.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Opacity, Attr);
	
	Util.augment(Opacity, {
	  type: 'opacity',
	  names: ['opacity'],
	  min: 0.1,
	  max: 1,
	  arr: null
	});
	
	module.exports = Opacity;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Util = __webpack_require__(169);
	var DataFrame = __webpack_require__(270);
	var Geom = __webpack_require__(381);
	var Animate = __webpack_require__(400);
	var Global = __webpack_require__(264);
	var FacetAssist = __webpack_require__(413);
	
	function isInCircle(coord) {
	  var circleCoords = ['polar', 'plus', 'theta'];
	  return Util.inArray(circleCoords, coord.type);
	}
	
	// 极坐标下是否是整个圆
	function isFullCircle(coord) {
	  var startAngle = coord.get('startAngle');
	  var endAngle = coord.get('endAngle');
	  if (!Util.isNull(startAngle) && !Util.isNull(endAngle) && (endAngle - startAngle) < Math.PI * 2) {
	    return false;
	  }
	  return true;
	}
	
	function isInfilters(filters, dim) {
	  var rst = !!filters[dim];
	  if (!rst) {
	    Util.each(filters, function(v, k) {
	      var dims = k.split('*');
	      if (dims.indexOf(dim) !== -1) {
	        rst = true;
	        return false;
	      }
	    });
	  }
	  return rst;
	}
	
	function getMaxRange(scales) {
	  var min = scales[0].min;
	  var max = scales[0].max;
	
	  for (var i = 1; i < scales.length; i++) {
	    var scale = scales[i];
	    if (min > scale.min) {
	      min = scale.min;
	    }
	    if (max < scale.max) {
	      max = scale.max;
	    }
	  }
	
	  return [min, max];
	}
	
	module.exports = {
	  _renderFacets: function(options) {
	    var self = this;
	    self._setScaleOptions();
	    self._initPlot();
	    self._createCoord();
	    self._initAttrs();
	
	    var data = self._filterData();
	    var facetAssist = new FacetAssist({
	      chart: self
	    });
	    var facets = facetAssist.generateFacets(data, options);
	
	    var combined = [];
	    Util.each(facets, function(facet) {
	      facet._createCoord();
	      var filteredData = facet._filterData();
	      filteredData = facet._generateGeoms(filteredData);
	      combined = combined.concat(filteredData);
	    });
	
	    Util.each(facets, function(facet) {
	      facet._processCatScales(combined);
	    });
	
	    combined = [];
	    Util.each(facets, function(facet) {
	      var adjusted = facet._numericAndAdjust();
	      combined = combined.concat(adjusted);
	    });
	
	    Util.each(facets, function(facet) {
	      facet._processLinearScales(combined);
	    });
	
	    this.set('facets', facets);
	  },
	  _renderView: function() {
	    this._initPlot(); // 第一步生成绘制容器
	    this._createCoord(); // 第二步创建坐标系
	    this._initAttrs(); // (新增)初始化度量和统计函数
	    var data = this._filterData(); // 第三步过滤数据
	    data = this._generateGeoms(data); // 第四步生成 geoms
	    this._processCatScales(data); // 第五步训练分类度量，facet
	    var adjusted = this._numericAndAdjust(); // 第六步数值化以及调整布局
	    this._processLinearScales(adjusted); // 第七步训练度量，facet
	  },
	  _getIdDims: function(defs) {
	    var data = this.get('data');
	    var idDims = [];
	    data.names.forEach(function(dim) {
	      if (defs[dim] && defs[dim].key === true) {
	        idDims.push(dim);
	      }
	    });
	    return idDims;
	  },
	  _setScaleOptions: function() {
	    var options = this.get('options');
	    var coldefs = options.scales;
	
	    if (coldefs) {
	      var idDims = this._getIdDims(coldefs);
	      this.set('idDims', idDims);
	      var scaleAssist = this.get('scaleAssist');
	      scaleAssist.defs = Util.mix({}, true, scaleAssist.defs, coldefs);
	    }
	  },
	  _initData: function(data, appendFields) {
	    if (data) {
	      if (!(data instanceof DataFrame)) {
	        if (appendFields && data.length) {
	          var first = data[0];
	          Util.each(first, function(v, k) {
	            if (appendFields.indexOf(k) === -1) {
	              appendFields.push(k);
	            }
	          });
	        }
	        data = new DataFrame(data, {
	          names: appendFields
	        });
	      }
	      this.set('data', data);
	    }
	  },
	  // 第一步：初始化绘制容器
	  _initPlot: function() {
	    if (!this.get('plotContainer')) {
	      var canvas = this.get('canvas');
	      var plotContainer = canvas.addGroup(); // 图表内容的容器
	      this.set('plotContainer', plotContainer);
	    }
	    if (!this.get('backPlot')) {
	      var backCanvas = this.get('backCanvas');
	      var backPlot = backCanvas.addGroup(); // 用于坐标轴以及部分 guide 绘制
	      this.set('backPlot', backPlot);
	    }
	    if (!this.get('frontPlot')) {
	      var frontCanvas = this.get('frontCanvas');
	      var frontPlot = frontCanvas.addGroup(); // 用于坐标轴以及部分 guide 绘制
	      this.set('frontPlot', frontPlot);
	    }
	  },
	  // 第二步：创建坐标系
	  _createCoord: function() {
	    var coordAssist = this.get('coordAssist');
	    var region = this.get('region');
	    var coord = coordAssist.createCoord(region.start, region.end);
	
	    if (this.get('facet')) {
	      var facet = this.get('facet');
	      if (facet.type === 'mirror') { // 镜像分面，坐标系特殊处理
	        if (facet.rows === 1) {
	          coord.transpose();
	          if (facet.colIndex === 0) {
	            coord.scale(-1, 1);
	          }
	        } else if (facet.rowIndex === 1) {
	          coord.scale(1, -1);
	        }
	      }
	    }
	
	    this.set('coord', coord);
	
	    return coord;
	  },
	  // 第三步：过滤数据
	  _filterData: function() {
	    var options = this.get('options');
	    var scaleAssist = this.get('scaleAssist');
	    var data = this.get('data');
	    var scales = this.get('scales');
	    var filters = options.filters;
	
	    return scaleAssist.filterData(data, filters, scales); // 过滤数据
	  },
	  _createGeom: function(options, index) {
	    var type = options.type;
	    var adjusts = options.adjusts;
	    var viewId = this.get('viewId');
	    var coord = this.get('coord');
	
	    var labelCfg = options.label;
	    if (labelCfg) {
	      if (!Util.isObject(labelCfg) || labelCfg.isStat) {
	        labelCfg = {
	          field: labelCfg
	        };
	      }
	      Util.mix(labelCfg, this._getScalesAndStat(labelCfg.field, type, adjusts));
	    }
	
	    var tooltipDims = options.tooltip ? this._parseDims(options.tooltip, type, adjusts).dims : null;
	
	    var animateCfg = null;
	    if (options.animate) {
	      animateCfg = options.animate;
	    }
	
	    var geom = new Geom({
	      type: type,
	      chart: this,
	      attrs: options.attrs,
	      stats: this.get('stats'),
	      scales: this.get('scales'),
	      styleCfg: options.style,
	      labelCfg: labelCfg,
	      tooltipDims: tooltipDims,
	      adjusts: adjusts,
	      selectedCfg: options.selected,
	      animateCfg: animateCfg
	    });
	    geom.set('id', viewId + 'geom' + index);
	    geom.set('coord', coord);
	
	    return geom;
	  },
	  // 创建 geoms
	  _initGeoms: function() {
	    var self = this;
	    var options = this.get('options');
	    var geomsOptions = options.geoms;
	    var geoms = [];
	
	    Util.each(geomsOptions, function(geomOption, index) {
	      var geom = self._createGeom(geomOption, index);
	      geoms.push(geom);
	    });
	
	    this.set('geoms', geoms);
	    return geoms;
	  },
	  // 第四步：生成几何标记 geoms
	  _generateGeoms: function(data) {
	    var geoms = this._initGeoms(); // 创建所有 geoms
	    var processedData = []; // 存储处理后的数据
	    Util.each(geoms, function(geom) {
	      var frames = geom.processData(data); // 为每个图层创建 frames
	      geom.set('frames', frames);
	      processedData = processedData.concat(frames);
	    });
	    return processedData;
	  },
	  // 统计完成后，训练度量
	  _trainScales: function(frame, filter) {
	    var scales = this.get('scales');
	    var trainScales = [];
	
	    Util.each(scales, function(scale) {
	      if (filter(scale)) {
	        trainScales.push(scale);
	      }
	    });
	    var scaleAssist = this.get('scaleAssist');
	    scaleAssist.trainScales(frame, trainScales);
	  },
	  _trainCatScales: function(frame) {
	    var self = this;
	    var filters = self.get('options').filters || {};
	    self._trainScales(frame, function(scale) {
	      return scale.isCategory && !isInfilters(filters, scale.dim); // filter[scale.dim];
	    });
	  },
	  // 处理分类度量的 range, 用于不同的坐标轴
	  _setCatScalesRange: function() {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScales = self.getYScales();
	    var scales = [];
	
	    xScale && scales.push(xScale);
	    scales = scales.concat(yScales);
	    var inFullCircle = isInCircle(coord) && isFullCircle(coord);
	    var scaleAssist = self.get('scaleAssist');
	    var colDefs = scaleAssist.defs;
	    Util.each(scales, function(scale) {
	      if (scale.isCategory && scale.values && !(colDefs[scale.dim] && colDefs[scale.dim].range)) {
	        var count = scale.values.length;
	        var range;
	        if (count === 1) {
	          range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5]的状态
	        } else {
	          var widthRatio = 1;
	          var offset = 0;
	          if (inFullCircle) {
	            var coordAssist = self.get('coordAssist');
	            if (!coordAssist.hasAction('transpose')) {
	              range = [0, 1 - 1 / count];
	            } else {
	              widthRatio = Global.widthRatio.multiplePie;
	              offset = 1 / count * widthRatio;
	              range = [offset / 2, 1 - offset / 2];
	            }
	          } else {
	            widthRatio = Global.widthRatio.column;
	            offset = 1 / count * widthRatio;
	            range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时
	          }
	        }
	        scale.range = range;
	      }
	    });
	  },
	  // 第五步：训练分类度量
	  _processCatScales: function(data) {
	    var isTrain = false;
	    Util.each(this.get('geoms'), function(geom) {
	      var positionAttr = geom.getAttr('position');
	      if (positionAttr.stat && (positionAttr.stat.type === 'tree' || positionAttr.stat.type === 'treemap')) {
	        isTrain = true;
	      }
	    });
	
	    var merge;
	    if (isTrain) { // 其他情况不需要进行分类度量
	      merge = DataFrame.forceMerge.apply(null, data);
	      this._trainCatScales(merge);
	    }
	
	    var xScale = this.getXScale();
	    if (xScale && xScale.type === 'timeCat') {
	      merge = DataFrame.forceMerge.apply(null, data);
	      var scaleAssist = this.get('scaleAssist');
	      scaleAssist.trainScales(merge, [xScale]);
	    }
	
	    this._setCatScalesRange();
	  },
	  // 第六步：将数据数值化并根据布局调整数据
	  _numericAndAdjust: function() {
	    var result = [];
	    var geoms = this.get('geoms');
	    Util.each(geoms, function(geom) {
	      var frames = geom.get('frames');
	      frames = geom.numbericFrames(frames); // 将文本、时间转换成数字
	      frames = geom.processAdjust(frames); // 根据布局调整数据
	      geom.set('frames', frames);
	      result = result.concat(frames);
	    });
	
	    return result;
	  },
	  _trainLinearScales: function(frame) {
	    this._trainScales(frame, function(scale) {
	      return scale.isLinear;
	    });
	  },
	  // 第七步：训练连续度量
	  _processLinearScales: function(data) {
	    var merge = DataFrame.forceMerge.apply(null, data);
	    this._trainLinearScales(merge); // 训练度量
	  },
	  // 第八步：绘制图表部件
	  _paint: function() {
	    var geoms = this.get('geoms');
	    var coord = this.get('coord');
	
	    this.fire('beforepaint', {
	      chart: this
	    });
	
	    Util.each(geoms, function(geom) {
	      geom.paint(coord, geom.get('frames'), function(frames) {
	        geom.set('frames', frames);
	      });
	    });
	
	    this._renderGuide(); // 绘制辅助元素
	
	    if (this.getXScale()) {
	      this._renderAxis(); // 绘制坐标轴
	    }
	
	    this.fire('afterpaint');
	    this.get('plotContainer').sort();
	  },
	  // 渲染坐标轴
	  _renderAxis: function() {
	    var options = this.get('options');
	    if (options.axes && options.axes.visible === false) {
	      return;
	    }
	    var axisAssist = this.get('axisAssist');
	    axisAssist.container = this.get('backPlot');
	    var xScale = this.getXScale();
	    var yScales = this.getYScales();
	    axisAssist.createAxis(this, xScale, yScales, options.axes);
	  },
	  // 渲染辅助元素
	  _renderGuide: function() {
	    var guideAssist = this.get('guideAssist');
	    guideAssist.creatGuide();
	    if (guideAssist.guides.length) {
	      if (!this.get('frontPlot')) { // 用于辅助标记 tag 以及辅助文本 text 的绘制
	        var frontCanvas = this.get('frontCanvas');
	        var frontPlot = frontCanvas.addGroup();
	        this.set('frontPlot', frontPlot);
	      }
	      guideAssist.backPlot = this.get('backPlot');
	      guideAssist.frontPlot = this.get('frontPlot');
	      var coord = this.get('coord');
	      var xScale = this.getXScale();
	      var yScale = this.getYScales()[0];
	      guideAssist.setScale(xScale, yScale);
	      guideAssist.paint(coord);
	    }
	  },
	  _drawCanvas: function() {
	    var options = this.get('options');
	    var animate = options.animate || this.get('animate');
	    var groupAnimate = this.get('groupAnimate');
	    var isUpdate = this.get('isUpdate');
	    var canvas = this.get('canvas');
	    var backCanvas = this.get('backCanvas');
	    var frontCanvas = this.get('frontCanvas');
	    var coord = this.get('coord');
	    if (animate) {
	      // 只有更新数据时执行坐标轴上的动画
	      if (isUpdate) {
	        Animate.shapeAnimation(backCanvas, coord, true);
	      } else {
	        // 初始化时直接修改
	        backCanvas.draw();
	      }
	      Animate.shapeAnimation(canvas, coord, isUpdate, groupAnimate);
	    } else {
	      canvas.draw();
	      backCanvas.draw();
	    }
	    frontCanvas.draw();
	  },
	  /** 统一线性度量 **/
	  _syncXYScales: function() {
	    var xScales = this._getLinearScales('x');
	    var yScales = this._getLinearScales('y');
	    var maxXRange = getMaxRange(xScales);
	    var maxYRange = getMaxRange(yScales);
	    var geoms = this.getAllGeoms();
	
	    Util.each(geoms, function(geom) {
	      var view = geom.get('chart');
	      var viewColDefs = view.get('scaleAssist').defs;
	      var positionAttr = geom.getAttr('position'); // 关键是同步 position attr 的度量
	      var scales = positionAttr.scales;
	      var xDim = scales[0].dim;
	      var yDim = scales[1].dim;
	
	      if (!viewColDefs[xDim] || !(viewColDefs[xDim].min)) {
	        scales[0].min = maxXRange[0];
	      }
	
	      if (!viewColDefs[xDim] || !(viewColDefs[xDim].max)) {
	        scales[0].max = maxXRange[1];
	      }
	
	      if (!viewColDefs[yDim] || !(viewColDefs[yDim].min)) {
	        scales[1].min = maxYRange[0];
	      }
	
	      if (!viewColDefs[yDim] || !(viewColDefs[yDim].max)) {
	        scales[1].max = maxYRange[1];
	      }
	    });
	  },
	  _getLinearScales: function(dim) {
	    var scales = [];
	    var geoms = this.getAllGeoms();
	
	    Util.each(geoms, function(geom) {
	      var scale;
	      if (dim === 'x') {
	        scale = geom.getXScale();
	      } else if (dim === 'y') {
	        scale = geom.getYScale();
	      }
	
	      scale.isLinear && scales.push(scale);
	    });
	
	    return scales;
	  },
	  /**
	   * @override
	   * 渲染 legend
	   * @return {[type]} [description]
	   */
	  _renderLegends: function() {},
	  /**
	   * @override
	   * 渲染 tooltip
	   * @return {[type]} [description]
	   */
	  _renderTooltip: function() {}
	};


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview geom
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(197);
	var Labels = __webpack_require__(382);
	var ActiveMixin = __webpack_require__(386);
	var SelectMixin = __webpack_require__(387);
	var TooltipMixin = __webpack_require__(388);
	var DataMixin = __webpack_require__(389);
	var ActiveGroup = __webpack_require__(396);
	var Geoms = __webpack_require__(343);
	var GROUP_ATTRS = ['size', 'shape', 'color'];
	var Animate = __webpack_require__(400);
	var Global = __webpack_require__(264);
	
	var Geom = function(cfg) {
	  Geom.superclass.constructor.call(this, cfg);
	  this._init();
	};
	
	Geom.ATTRS = {
	  type: 'point',
	  chart: null,
	  attrs: null,
	  stats: null,
	  scales: null,
	  styleCfg: null,
	  labelCfg: null,
	  animate: Global.animate
	};
	
	Util.extend(Geom, Base);
	Util.mixin(Geom, [DataMixin, TooltipMixin, ActiveMixin, SelectMixin]);
	
	Util.augment(Geom, {
	  _init: function() {
	    var chart = this.get('chart');
	    var plotContainer = chart.get('plotContainer');
	    if (!plotContainer) {
	      plotContainer = chart.get('canvas').addGroup();
	    }
	    var container = plotContainer.addGroup({
	      zIndex: 10
	    });
	    this.set('container', container);
	  },
	  // 添加文本
	  _addLabels: function(frames) {
	    var self = this;
	    var type = self.get('type');
	    var coord = self.get('coord');
	    var C = Labels.getLabelsClass(coord.type, type);
	    var id = this.get('id');
	    var container = self.get('container');
	
	    var labelGroup = container.addGroup(C, {
	      id: id,
	      labelsCfg: self.get('labelCfg'),
	      coord: coord,
	      geom: self,
	      geomType: type
	    });
	
	    var points = [];
	    Util.each(frames, function(frame) {
	      points = points.concat(frame.toJSON());
	    });
	
	    labelGroup.showLabels(points);
	    self.set('labelGroup', labelGroup);
	  },
	  _draw: function(frames) {
	    var group = this.get('group');
	    var type = this.get('type');
	    var id = this.get('id');
	    var groupScales = this._getGroupScales();
	    var idDims = this.get('chart').get('idDims');
	    type = Util.ucfirst(type);
	
	    var geom = new Geoms[type]({
	      id: id,
	      container: group,
	      attrs: this.get('attrs'),
	      styleCfg: this.get('styleCfg'),
	      adjusts: this.get('adjusts'),
	      frames: frames,
	      groupScales: groupScales,
	      idDims: idDims
	    });
	    var results = geom.draw(frames);
	    this.set('geomShape', geom.get('shapeObj'));
	    this.set('shapeType', geom.get('shapeType'));
	    this.set('shapeDatas', geom.get('shapeDatas'));
	    return results;
	  },
	  /**
	   * 绘制图层
	   * @param  {Coord}   coord   坐标系
	   * @param  {Array}   frames  多个数据集合，每个数据集合一个图
	   * @param  {Function} callback 回调函数
	   */
	  paint: function(coord, frames, callback) {
	    var self = this;
	
	    if (coord.type === 'map') { // 如果是地理坐标系，为其设置原始的度量范围
	      var scales = self.get('scales');
	      var longScale = scales['..long'];
	      var lantScale = scales['..lant'];
	      coord.set('originMin', [longScale.min, lantScale.min]);
	      coord.set('originMax', [longScale.max, lantScale.max]);
	      self.set('coord', coord);
	    }
	    var positionAttr = self.getAttr('position');
	    positionAttr.coord = coord;
	
	    var container = self.get('container');
	    var group = container.addGroup(ActiveGroup, {
	      geom: self,
	      coord: coord,
	      multipleActive: self.isShareTooltip(),
	      capture: true
	    });
	    group.setMatrix(coord.get('matrix').clone());
	    self.set('group', group); // 当前group
	
	    function draw() {
	      var results = self._draw(frames);
	      if (callback) {
	        callback(results);
	      }
	      if (!!self.get('labelCfg')) { // 如果有文本配置项则添加文本绘制
	        self._addLabels(results);
	      }
	    }
	
	    self._groupAnimate(draw);
	
	    return self;
	  },
	  _groupAnimate: function(fn) {
	    var self = this;
	    var chart = self.get('chart');
	    var isUpdate = chart.get('isUpdate');
	    var animate = chart.get('animate') || self.get('animate');
	    var animateCfg = self.get('animateCfg');
	    var animation = animateCfg && animateCfg.appear && animateCfg.appear.animation;
	    // 设定animate，如果图表整体设置了是否执行动画，根据图表的设置，否则读取图形本身的默认属性
	    if (!isUpdate && animate && self._isGroupAnimation(animation)) {
	      chart.set('groupAnimate', true);
	      var groupAnimation = Animate.getGroupAnimation({
	        geom: self,
	        animateCfg: animateCfg.appear,
	        fn: function() {
	          fn();
	        }
	      });
	      groupAnimation ? groupAnimation.start() : fn();
	    } else {
	      fn();
	    }
	  },
	  // 获取属性的默认值，供各种 mixin 调用
	  getDefaultValue: function(attrName) {
	    var self = this;
	    var value = self.get(attrName);
	    var attr = self.getAttr(attrName);
	    if (attr) {
	      var scale = attr.getScale(attrName);
	      if (scale.type === 'identity') {
	        value = scale.value;
	      }
	    }
	    return value;
	  },
	  // 获取用于显示图例的属性
	  getLegendAttr: function() {
	    var self = this;
	    var attrs = self.get('attrs');
	    var rst = [];
	
	    Util.each(attrs, function(attr) {
	      if (Util.indexOf(GROUP_ATTRS, attr.type) !== -1) {
	        rst.push(attr);
	      }
	    });
	
	    return rst;
	  },
	  // 获取 geom 的 scales
	  getScales: function() {
	    return this.get('scales');
	  },
	  destroy: function() {
	    var group = this.get('group');
	    if (group && !group.get('destroyed')) {
	      group.clear();
	      group.remove();
	    }
	    this.clearShapeActived();
	    this._attrs = {};
	    this.events = {};
	  },
	  getXDistance: function() {
	    var self = this;
	    var xScale = self.getXScale();
	    var distance;
	    if (xScale.isCategory) {
	      distance = 1;
	    } else {
	      var values = xScale.values;
	      var length = values.length;
	      distance = Math.abs(values[length - 1] - values[0]) / length;
	    }
	    return distance;
	  },
	  getAttr: function(name) {
	    var attrs = this.get('attrs');
	    var rst = null;
	    Util.each(attrs, function(attr) {
	      if (attr.type === name) {
	        rst = attr;
	      }
	    });
	    return rst;
	  },
	  getXDim: function() {
	    var xScale = this.getXScale();
	    return xScale.dim;
	  },
	  getYDim: function() {
	    var yScale = this.getYScale();
	    return yScale ? yScale.dim : 'y';
	  },
	  getXScale: function() {
	    return this.getAttr('position').scales[0];
	  },
	  getYScale: function() {
	    return this.getAttr('position').scales[1];
	  },
	  isInCircle: function() {
	    return this.get('coord').isPolar;
	  },
	  // 返回 geom 所有 shape 的数据源，原来的 getData 方法
	  getData: function() {
	    return this.get('shapeDatas');
	  },
	  setVisible: function(isVisible) {
	    var container = this.get('container');
	    container.set('visible', isVisible);
	  },
	  _isGroupAnimation: function(animation) {
	    return animation && animation.slice(0, 5) === 'group';
	  }
	});
	
	module.exports = Geom;


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview labels的入口，决定如何选择对应的文本排布方式
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var GeomLabels = __webpack_require__(383);
	var CircleLabels = __webpack_require__(384);
	var PieLabels = __webpack_require__(385);
	
	var Labels = {
	  getLabelsClass: function(coordType) {
	    var rst = GeomLabels;
	    if (coordType === 'polar' || coordType === 'plus') {
	      rst = CircleLabels;
	    } else if (coordType === 'theta') {
	      rst = PieLabels;
	    }
	
	    return rst;
	  }
	};
	
	module.exports = Labels;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview show labels of geom
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	
	'use strict';
	
	var Canvas = __webpack_require__(173);
	var Components = __webpack_require__(244);
	var Labels = Components.Labels;
	var Group = Canvas.Group;
	var Util = __webpack_require__(169);
	var Global = __webpack_require__(264);
	var IGNORE_ARR = ['line', 'point', 'path'];
	var ORIGIN = '_origin';
	
	function avg(arr) {
	  var sum = 0;
	  Util.each(arr, function(value) {
	    sum += value;
	  });
	  return sum / arr.length;
	}
	
	var GeomLabels = function(cfg) {
	  GeomLabels.superclass.constructor.call(this, cfg);
	};
	
	GeomLabels.CFG = {
	  labels: Global.labels,
	  /**
	   * 用户传入的文本配置信息
	   * @type {Object}
	   */
	  labelsCfg: null,
	  /**
	   * 所在的坐标系
	   * @type {Object}
	   */
	  coord: null,
	  /**
	   * 图表的类型
	   * @type {String}
	   */
	  geomType: null,
	  zIndex: 6
	};
	
	Util.extend(GeomLabels, Group);
	Util.mixin(GeomLabels, [Labels.ShowLabels]);
	
	Util.augment(GeomLabels, {
	  _renderUI: function() {
	    GeomLabels.superclass._renderUI.call(this);
	    this.initLabelsCfg();
	    this.renderLabels(); // 调用入口文件
	  },
	  // 获取显示的 label 文本值
	  _getLabelValue: function(record) {
	    var self = this;
	    var originRecord = record[ORIGIN];
	    var labelsCfg = self.get('labelsCfg');
	    var scales = labelsCfg.scales;
	    var callback = labelsCfg.callback;
	    var value;
	    if (callback) {
	      var params = [];
	      Util.each(scales, function(scale) {
	        params.push(originRecord[scale.dim]);
	      });
	      value = callback.apply(null, params);
	    } else {
	      var scale = scales[0];
	      value = originRecord[scale.dim];
	      if (Util.isArray(value)) {
	        var tmp = [];
	        Util.each(value, function(subVal) {
	          tmp.push(scale.getText(subVal));
	        });
	        value = tmp;
	      } else {
	        value = scale.getText(value);
	      }
	    }
	    return value;
	  },
	  // 初始化labels的配置项
	  initLabelsCfg: function() {
	    var self = this;
	    var labels = self.getDefaultLabelCfg();
	    var labelsCfg = self.get('labelsCfg');
	    Util.mix(true, labels, labelsCfg.cfg);
	    self.set('labels', labels);
	  },
	  /**
	   * @protected
	   * 默认的文本样式
	   */
	  getDefaultLabelCfg: function() {
	    var self = this;
	    var labelsCfg = self.get('labelsCfg').cfg;
	    var geomType = self.get('geomType');
	    if (geomType === 'polygon' || (labelsCfg && labelsCfg.offset < 0 && Util.indexOf(IGNORE_ARR, geomType) === -1)) {
	      return Util.mix(true, {}, Global.innerLabels);
	    }
	    return this.get('labels');
	  },
	  /**
	   * @protected
	   * 获取labels
	   */
	  getLabelsItems: function(points) {
	    var self = this;
	    var items = [];
	    var labels = self.get('labels');
	    var geom = self.get('geom');
	    var xDim = geom ? geom.getXDim() : 'x';
	    var yDim = geom ? geom.getYDim() : 'y';
	    var origin;
	
	    // 获取label相关的x，y的值，获取具体的x,y,防止存在数组
	    Util.each(points, function(point) {
	      origin = point._origin;
	      var label = self._getLabelValue(point);
	      if (!Util.isArray(label)) {
	        label = [label];
	      }
	      var total = label.length;
	
	      Util.each(label, function(sub, index) {
	        var obj = self.getLabelPoint(label, point, index);
	        if (obj) {
	          obj = Util.mix({}, origin, obj); // 为了格式化输出
	          var align;
	          if (labels && labels.label && labels.label.textAlign) {
	            align = labels.label.textAlign;
	          } else {
	            align = self.getLabelAlign(obj, index, total);
	          }
	          obj.textAlign = align;
	          obj.id = self.get('id') + 'LabelText' + origin[xDim] + ' ' + origin[yDim] + obj.text;
	          items.push(obj);
	        }
	      });
	    });
	    return items;
	  },
	  /**
	   * @protected
	   * 如果发生冲突则会调整文本的位置
	   * @param {Array} items 文本的集合
	   */
	  adjustItems: function(items) {
	    return items;
	  },
	  /**
	   * 绘制连接到
	   * @param  {Array} items 文本项
	   * @param  {Object} labelLine 连接文本的线的配置项
	   */
	  drawLines: function() { /* items,labelLine */
	
	  },
	  /**
	   * @protected
	   * 获取文本的位置信息
	   */
	  getLabelPoint: function(labels, point, index) {
	    var self = this;
	
	    function getDimValue(value, idx) {
	      if (Util.isArray(value)) {
	        if (labels.length === 1) { // 如果仅一个label,多个y,取最后一个y
	          if (value.length <= 2) {
	            value = value[value.length - 1];
	          } else {
	            value = avg(value);
	          }
	        } else {
	          value = value[idx];
	        }
	      }
	      return value;
	    }
	    var labelPoint = {
	      x: getDimValue(point.x, index),
	      y: getDimValue(point.y, index),
	      text: labels[index]
	    };
	    var offsetPoint = self.getLabelOffset(labelPoint, index, labels.length);
	    self.transLabelPoint(labelPoint);
	    labelPoint.x += offsetPoint.x;
	    labelPoint.y += offsetPoint.y;
	    return labelPoint;
	  },
	  transLabelPoint: function(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var tmpPoint = coord.trans(point.x, point.y, 1);
	    point.x = tmpPoint.x;
	    point.y = tmpPoint.y;
	  },
	  getOffsetVector: function() {
	    var self = this;
	    var labelCfg = self.get('labels');
	    var offset = labelCfg.offset || 0;
	    var coord = self.get('coord');
	    var vector;
	    if (coord.isTransposed) { // 如果x,y翻转，则偏移x
	      vector = coord.trans(offset, 0);
	    } else { // 否则，偏转y
	      vector = coord.trans(0, offset);
	    }
	    return vector;
	  },
	  // 获取默认的偏移量
	  getDefaultOffset: function() {
	    var self = this;
	    var offset = 0; // Global.labels.offset;
	
	    var coord = self.get('coord');
	    var vector = self.getOffsetVector();
	    if (coord.isTransposed) { // 如果x,y翻转，则偏移x
	      offset = vector.x;
	    } else { // 否则，偏转y
	      offset = vector.y;
	    }
	    return offset;
	  },
	  // 获取文本的偏移位置，x,y
	  getLabelOffset: function(point, index, total) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    var coord = self.get('coord');
	    var transposed = coord.isTransposed;
	    var yDim = transposed ? 'x' : 'y';
	    var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成
	    var offsetPoint = {
	      x: 0,
	      y: 0
	    };
	    if (index > 0 || total === 1) { // 判断是否小于0
	      offsetPoint[yDim] = offset * factor;
	    } else {
	      offsetPoint[yDim] = offset * factor * -1;
	    }
	    return offsetPoint;
	  },
	  getLabelAlign: function(point, index, total) {
	    var self = this;
	    var align = 'center';
	    var coord = self.get('coord');
	    if (coord.isTransposed) {
	      var offset = self.getDefaultOffset();
	      // var vector = coord.trans(offset,0);
	      if (offset < 0) {
	        align = 'right';
	      } else if (offset === 0) {
	        align = 'center';
	      } else {
	        align = 'left';
	      }
	      if (total > 1 && index === 0) {
	        if (align === 'right') {
	          align = 'left';
	        } else if (align === 'left') {
	          align = 'right';
	        }
	      }
	    }
	
	    return align;
	  },
	  showLabels: function(points) {
	    var self = this;
	    var items = self.getLabelsItems(points);
	    var labels = self.get('labels');
	    items = self.adjustItems(items);
	    self.resetLabels(items);
	    if (labels.labelLine) {
	      self.drawLines(items, labels.labelLine);
	    }
	  },
	  destroy: function() {
	    this.removeLabels(); // 清理文本
	    GeomLabels.superclass.destroy.call(this);
	  }
	});
	
	module.exports = GeomLabels;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 极坐标系内处理文本
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Labels = __webpack_require__(383);
	var PathUtil = __webpack_require__(320);
	
	var CircleLabels = function(cfg) {
	  CircleLabels.superclass.constructor.call(this, cfg);
	};
	
	
	Util.extend(CircleLabels, Labels);
	
	Util.augment(CircleLabels, {
	  getPointRauis: function(coord, point) {
	    return PathUtil.getPointRadius(coord, point);
	  },
	  getCirclePoint: function(angle, offset, point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var labelEmit = self._isEmitLabels();
	    var r = self.getPointRauis(coord, point);
	    if (coord.isTransposed && r > offset && !labelEmit) {
	      var appendAngle = Math.asin(offset / (2 * r));
	      angle = angle + appendAngle * 2;
	    } else {
	      r = r + offset;
	    }
	
	    return {
	      x: center.x + r * Math.cos(angle),
	      y: center.y + r * Math.sin(angle),
	      angle: angle,
	      r: r
	    };
	  },
	  getArcPoint: function(point, index) {
	    var self = this;
	
	    var outerPoint; // 圆弧上的中点
	    // var coord = self.get('coord');
	    index = index || 0;
	    if (Util.isArray(point.x) || Util.isArray(point.y)) {
	      outerPoint = {
	        x: Util.isArray(point.x) ? point.x[index] : point.x,
	        y: Util.isArray(point.y) ? point.y[index] : point.y
	      };
	    } else {
	      outerPoint = point;
	    }
	    self.transLabelPoint(outerPoint);
	    return outerPoint;
	  },
	  // 获取点所在的角度
	  getPointAngle: function(point) {
	    var self = this;
	    var coord = self.get('coord');
	    return PathUtil.getPointAngle(coord, point);
	  },
	  // 获取中心的位置
	  getMiddlePoint: function(points) {
	    var self = this;
	    var coord = self.get('coord');
	    var count = points.length;
	    var middlePoint = {
	      x: 0,
	      y: 0
	    };
	    Util.each(points, function(point) {
	      middlePoint.x += point.x;
	      middlePoint.y += point.y;
	    });
	    middlePoint.x /= count;
	    middlePoint.y /= count;
	
	    middlePoint = coord.convert(middlePoint);
	    return middlePoint;
	  },
	  // 是否居中
	  _isToMiddle: function(point) {
	    return point.x.length > 2;
	  },
	  /**
	   * @protected
	   * 获取文本的位置信息
	   */
	  getLabelPoint: function(labels, point, index) {
	    var self = this;
	    var text = labels[index];
	    var factor = 1;
	    var arcPoint;
	    if (self._isToMiddle(point)) {
	      arcPoint = self.getMiddlePoint(point.points);
	    } else {
	      if (labels.length === 1 && index === 0) {
	        index = 1;
	      } else if (index === 0) {
	        factor = -1;
	      }
	      arcPoint = self.getArcPoint(point, index);
	    }
	
	    var offset = self.getDefaultOffset();
	    offset = offset * factor;
	    var middleAngle = self.getPointAngle(arcPoint);
	    var labelPoint = self.getCirclePoint(middleAngle, offset, arcPoint);
	    labelPoint.text = text;
	    labelPoint.angle = middleAngle;
	    labelPoint.color = point.color;
	
	    labelPoint.rotate = self.getLabelRotate(middleAngle, offset, point);
	    return labelPoint;
	  },
	  _isEmitLabels: function() {
	    var labels = this.get('labels');
	    return labels.labelEmit;
	  },
	  /**
	   * @protected
	   * 获取文本旋转的方向
	   */
	  getLabelRotate: function(angle) {
	    var self = this;
	    var rotate;
	    rotate = angle * 180 / Math.PI;
	    rotate += 90;
	
	    if (self._isEmitLabels()) {
	      rotate -= 90;
	    }
	    if (rotate) {
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      } else if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  },
	  // override
	  getLabelAlign: function(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var align;
	    if (self._isEmitLabels()) {
	      if (point.angle <= Math.PI / 2 && point.angle > -Math.PI / 2) {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    } else if (!coord.isTransposed) {
	      align = 'center';
	    } else {
	      var center = coord.getCenter();
	      var offset = self.getDefaultOffset();
	      if (Math.abs(point.x - center.x) < 1) {
	        align = 'center';
	      } else if (point.angle > Math.PI || point.angle <= 0) {
	        if (offset > 0) {
	          align = 'left';
	        } else {
	          align = 'right';
	        }
	      } else {
	        if (offset > 0) {
	          align = 'right';
	        } else {
	          align = 'left';
	        }
	      }
	    }
	    return align;
	  }
	});
	
	module.exports = CircleLabels;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview pie labeling
	 * @author dxq613@gmail.com
	 * @author leungwensen@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var CircleLabels = __webpack_require__(384);
	var PathUtil = __webpack_require__(320);
	var Global = __webpack_require__(264);
	var MARGIN = 5;
	
	/**
	 * @class PieLabels
	 * constructor for pie labeling
	 */
	var PieLabels = function (cfg) {
	  PieLabels.superclass.constructor.call(this, cfg);
	};
	
	PieLabels.CFG = {
	  labels: Global.thetaLabels
	};
	
	function getEndPoint(center, angle, r) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}
	
	function antiCollision(labels, lineHeight, plotRange, center, isRight) {
	  // adjust y position of labels to avoid overlapping
	  var overlapping = true;
	  var start = plotRange.start;
	  var end = plotRange.end;
	  var startY = Math.min(start.y, end.y);
	  var totalHeight = Math.abs(start.y - end.y);
	  var i;
	
	  var maxY = 0;
	  var minY = Number.MIN_VALUE;
	  var boxes = labels.map(function (label) {
	    if (label.y > maxY) {
	      maxY = label.y;
	    }
	    if (label.y < minY) {
	      minY = label.y;
	    }
	    return {
	      size: lineHeight,
	      targets: [label.y - startY]
	    };
	  });
	  minY -= startY;
	  if ((maxY - startY) > totalHeight) {
	    totalHeight = maxY - startY;
	  }
	
	  while (overlapping) {
	    /* eslint no-loop-func: 0 */
	    boxes.forEach(function (box) {
	      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;
	      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);
	      // box.pos = Math.max(0, target - box.size / 2);
	    });
	
	    // detect overlapping and join boxes
	    overlapping = false;
	    i = boxes.length;
	    while (i--) {
	      if (i > 0) {
	        var previousBox = boxes[i - 1];
	        var box = boxes[i];
	        if (previousBox.pos + previousBox.size > box.pos) { // overlapping
	          previousBox.size += box.size;
	          previousBox.targets = previousBox.targets.concat(box.targets);
	
	          // overflow, shift up
	          if (previousBox.pos + previousBox.size > totalHeight) {
	            previousBox.pos = totalHeight - previousBox.size;
	          }
	          boxes.splice(i, 1); // removing box
	          overlapping = true;
	        }
	      }
	    }
	  }
	
	  i = 0;
	  // step 4: normalize y and adjust x
	  boxes.forEach(function (b) {
	    var posInCompositeBox = startY + lineHeight / 2; // middle of the label
	    b.targets.forEach(function () {
	      labels[i].y = b.pos + posInCompositeBox;
	      posInCompositeBox += lineHeight;
	      i++;
	    });
	  });
	
	  // (x - cx)^2 + (y - cy)^2 = totalR^2
	  labels.forEach(function (label) {
	    var rPow2 = label.r * label.r;
	    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);
	    if (rPow2 < dyPow2) {
	      label.x = center.x;
	    } else {
	      var dx = Math.sqrt(rPow2 - dyPow2);
	      if (!isRight) { // left
	        label.x = center.x - dx;
	      } else { // right
	        label.x = center.x + dx;
	      }
	    }
	  });
	}
	
	Util.extend(PieLabels, CircleLabels);
	
	Util.augment(PieLabels, {
	  /**
	   * @protected
	   * to avoid overlapping
	   * @param {Array} items labels to be placed
	   */
	  adjustItems: function (items) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      items = self._distribute(items, offset);
	    }
	    return items;
	  },
	  /**
	   * @param labels
	   * @returns labels
	   * @private
	   * distribute labels
	   */
	  _distribute: function (labels, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var radius = coord.getRadius();
	    var lineHeight = self.get('labels').labelHeight;
	    var center = coord.getCenter();
	    var totalR = radius + offset;
	    var totalHeight = totalR * 2 + lineHeight * 2;
	    var plotRange = {
	      start: coord.get('start'),
	      end: coord.get('end')
	    };
	    var geom = self.get('geom');
	    if (geom) {
	      var chart = geom.get('chart');
	      plotRange = chart.get('plotRange');
	      if (!plotRange) {
	        plotRange = chart.get('region');
	      }
	    }
	
	    // step 1: separate labels
	    var halves = [
	      [], // left
	      [] // right
	    ];
	    labels.forEach(function (label) {
	      if (label.textAlign === 'right') { // left
	        halves[0].push(label);
	      } else { // right or center will be put on the right side
	        halves[1].push(label);
	      }
	    });
	
	    halves.forEach(function (half, index) {
	      // step 2: reduce labels
	      var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);
	      if (half.length > maxLabelsCountForOneSide) {
	        half.sort(function (a, b) { // sort by percentage DESC
	          return b['..percent'] - a['..percent'];
	        });
	        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);
	      }
	
	      // step 3: distribute position (x and y)
	      half.sort(function (a, b) { // sort by y ASC
	        return a.y - b.y;
	      });
	      antiCollision(half, lineHeight, plotRange, center, index);
	    });
	
	    return halves[0].concat(halves[1]);
	  },
	  /**
	   * drawing lines to labels
	   * @param  {Array} items labels
	   * @param  {Object} labelLine configuration for label lines
	   */
	  drawLines: function (items, labelLine) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      Util.each(items, function (point) {
	        self.lineToLabel(point, labelLine);
	      });
	    }
	  },
	  // 连接线
	  lineToLabel: function (label, labelLine) {
	    var self = this;
	    var coord = self.get('coord');
	    var r = coord.getRadius();
	    var distance = self.getDefaultOffset();
	    var angle = label.orignAngle || label.angle;
	    var center = coord.getCenter();
	    var start = getEndPoint(center, angle, r + MARGIN / 2);
	    var inner = getEndPoint(center, angle, r + distance / 2);
	    var lineGroup = self.get('lineGroup');
	    // var lineShape;
	    if (!lineGroup) {
	      lineGroup = self.addGroup({
	        elCls: 'x-line-group',
	        animate: false
	      });
	      self.set('lineGroup', lineGroup);
	    }
	    // lineShape =
	    lineGroup.addShape('path', {
	      attrs: Util.mix({
	        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
	        fill: null,
	        stroke: label.color
	      }, labelLine)
	    });
	    // label 对应线的动画关闭
	    // lineShape.animateType = 'labelLine';
	    // lineShape.id = label.id.replace('LabelText', 'LabelLine'); // generate labelLine id according to label id
	  },
	  /**
	   * @protected
	   * get rotation for label
	   */
	  getLabelRotate: function (angle, offset) {
	    var rotate;
	    if (offset < 0) {
	      rotate = angle * 180 / Math.PI;
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      }
	      if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  },
	  /**
	   * @protected
	   * get text align for label
	   */
	  getLabelAlign: function (point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var align;
	    if (point.angle <= Math.PI / 2 && point.x > center.x) {
	      align = 'left';
	    } else {
	      align = 'right';
	    }
	
	    var offset = self.getDefaultOffset();
	    if (offset <= 0) {
	      if (align === 'right') {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    }
	    return align;
	  },
	  getArcPoint: function (point) {
	    return point;
	  },
	  getPointAngle: function (point) {
	    var self = this;
	    var coord = self.get('coord');
	    var startPoint = {
	      x: Util.isArray(point.x) ? point.x[0] : point.x,
	      y: point.y[0]
	    };
	    var endPoint = {
	      x: Util.isArray(point.x) ? point.x[1] : point.x,
	      y: point.y[1]
	    };
	    var angle;
	    var startAngle = PathUtil.getPointAngle(coord, startPoint);
	    if (point.points && point.points[0].y === point.points[1].y) {
	      angle = startAngle;
	    } else {
	      var endAngle = PathUtil.getPointAngle(coord, endPoint);
	      if (startAngle >= endAngle) { // 100% pie slice
	        endAngle = endAngle + Math.PI * 2;
	      }
	      angle = startAngle + (endAngle - startAngle) / 2;
	    }
	    return angle;
	  },
	  getCirclePoint: function (angle, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var r = coord.getRadius() + offset;
	    var point = getEndPoint(center, angle, r);
	    point.angle = angle;
	    point.r = r;
	    return point;
	  }
	});
	
	module.exports = PieLabels;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 可以一次active多个图形的扩展
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var DataFrame = __webpack_require__(270);
	var abs = Math.abs;
	var FIELD_ORIGIN = '_origin';
	
	function isChange(preShapes, shapes) {
	  if (!preShapes) {
	    return true;
	  }
	
	  if (preShapes.length !== shapes.length) {
	    return true;
	  }
	
	  var rst = false;
	  Util.each(shapes, function(shape, index) {
	    if (shape !== preShapes[index]) {
	      rst = true;
	      return false;
	    }
	  });
	  return rst;
	}
	
	function isInBox(pathPoint, point) {
	  var x = pathPoint.x;
	  var y = pathPoint.y;
	  var minX = x[0];
	  var minY = y[0];
	  var maxX = x[0];
	  var maxY = y[0];
	
	  for (var i = 0; i < x.length; i++) {
	    var curX = x[i];
	    var curY = y[i];
	
	    if (curX <= minX) {
	      minX = curX;
	    }
	
	    if (curX >= maxX) {
	      maxX = curX;
	    }
	
	    if (curY <= minY) {
	      minY = curY;
	    }
	
	    if (curY >= maxY) {
	      maxY = curY;
	    }
	  }
	  var result = point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY;
	  return result;
	}
	
	var ActiveMixin = function() {
	  // body...
	};
	
	ActiveMixin.ATTRS = {
	  /**
	   * 考虑canvas全部绘制的性能，可以设置局部刷新
	   * @protected
	   * @type {Boolean}
	   */
	  localRefresh: false,
	  /**
	   * 鼠标在画布上移动时，是否需要激活图层上的图形
	   * @type {Boolean}
	   */
	  allowActiveShape: true,
	  /**
	   * 鼠标在画布上移动时，获取对应的图形时，是否,x,y都做逼近
	   * @type {Boolean}
	   */
	  snapAll: true,
	  snapDistance: 10
	};
	
	Util.augment(ActiveMixin, {
	  isAllowActiveShape: function() {
	    var type = this.get('type');
	
	    if (Util.inArray(['contour', 'path', 'line', 'area'], type)) {
	      return false;
	    }
	
	    return this.get('allowActiveShape');
	  },
	  isSnapAll: function() {
	    var type = this.get('type');
	
	    if (type === 'interval' || type === 'schema') {
	      return false;
	    }
	
	    return this.get('snapAll');
	  },
	  /**
	   * @protected 设置图形激活
	   */
	  setActiveByPoint: function(point) {
	    var self = this;
	
	    var coord = self.get('coord');
	    var rst = null;
	    if (!self.isAllowActiveShape()) {
	      return [];
	    }
	    if (self.isShareTooltip()) {
	      rst = self._getSharedShapes(point, coord);
	    } else {
	      rst = [];
	      var shape = self.getSingleShape(point);
	      if (shape && shape.get('visible')) {
	        rst.push(shape);
	      }
	    }
	
	    var preShapes = self.get('preShapes');
	    if (isChange(preShapes, rst)) {
	      self.setShapesActive(rst);
	    }
	    self.set('preShapes', rst);
	    return rst;
	  },
	  _getSharedShapes: function(point) {
	    var self = this;
	    var group = self.get('group');
	    var rst = [];
	    if (group) {
	      var xDim = self.getXDim();
	      var shapes = group.get('children');
	      Util.each(shapes, function(shape) {
	        var origin = shape.get('origin');
	        // 有可能不是图形，而是label文本，所以判断一下
	        if (shape.get('visible') && origin) {
	          var shapeXValue = origin[FIELD_ORIGIN][xDim];
	          var pointXValue = point[FIELD_ORIGIN][xDim];
	          if ((Util.isArray(shapeXValue) && Util.isArray(pointXValue) && Util.equalsArray(shapeXValue, pointXValue))
	            || (shapeXValue === pointXValue)) {
	            rst.push(shape);
	          }
	        }
	      });
	    }
	    return rst;
	  },
	  // 获取需要激活的图形
	  getSingleShape: function(point) {
	    var self = this;
	    var rst = null;
	    var frame = DataFrame.forceMerge.apply(null, self.get('frames'));
	    var obj;
	    if (self.get('type') === 'contour') {
	      // 临时解决方案
	      obj = self.findPoint(point, frame);
	      rst = {
	        origin: obj,
	        get: function(name) {
	          return this[name];
	        }
	      };
	      return rst;
	    }
	
	    var group = self.get('group');
	    var coord = self.get('coord');
	    var canvas = group.get('canvas');
	    var pixelRatio = canvas.get('pixelRatio');
	    if (group) {
	      var shapes = group.get('children');
	      var snapPoints = []; // 首先获取临近的点
	      if (shapes.length > 30) {
	        // 如果指定了图形的最大宽度，则逼近半径，以最大半径为准
	        var maxSize = DataFrame.max(frame, 'size');
	        Util.each(shapes, function(aShape) {
	          if (self.isSnapPoint(point, aShape, coord, maxSize)) {
	            snapPoints.push(aShape);
	          }
	        });
	      } else {
	        snapPoints = shapes;
	      }
	      for (var i = snapPoints.length - 1; i >= 0; i--) {
	        var shape = snapPoints[i];
	        if (shape.get('origin') && shape.isHit(point.x * pixelRatio, point.y * pixelRatio)) { // 此时的point已不是画布坐标所以击中需要乘以精度
	          rst = shape;
	          break;
	        }
	      }
	    }
	    return rst;
	  },
	  _isSnapPointOfPolygon: function(point, shapePoint, coord) {
	    var self = this;
	    var distance = self.get('snapDistance');
	    var xScale = self.getXScale();
	    var yScale = self.getYScale();
	    var originData = shapePoint[FIELD_ORIGIN];
	    var invertPoint = coord.invert(point);
	    var isSnapPoint;
	
	    if (Util.isArray(shapePoint.x) && Util.isArray(shapePoint.y)) {
	      isSnapPoint = isInBox(shapePoint, point); // 临时解决方案
	    } else {
	      var transPoint = coord.trans(shapePoint.x, shapePoint.y, 1);
	      var xSnap = false;
	      var ySnap = false;
	      if (!xScale.isCategory) {
	        xSnap = abs(transPoint.x - point.x) < distance;
	      } else {
	        xSnap = xScale.translate(xScale.invert(invertPoint.x)) === xScale.translate(originData[xScale.dim]);
	      }
	
	      if (yScale && yScale.isCategory) {
	        ySnap = yScale.translate(yScale.invert(invertPoint.y)) === yScale.translate(originData[yScale.dim]);
	      } else {
	        ySnap = abs(transPoint.y - point.y) < distance;
	      }
	
	      isSnapPoint = xSnap && ySnap;
	    }
	    return isSnapPoint;
	  },
	  /**
	   * 判断图形是否临近画布上的点
	   * @param  {Object}  point 画布上的点
	   * @param  {Object}  shapePoint 图形的数据
	   * @param  {Object} inverPoint 根据
	   * @return {Boolean} 是否在附近
	   */
	  isSnapPoint: function(point, shape, coord, maxSize) {
	    var self = this;
	    var shapePoint = shape.get('origin');
	    if (!shapePoint) {
	      return false;
	    }
	    var distance = maxSize || this.get('snapDistance');
	    var geomType = self.get('type');
	    var isSnap = false;
	    var box;
	    if (geomType === 'polygon') { // 多边形或者带权重的边线获取坐标点落在的shape
	      isSnap = self._isSnapPointOfPolygon(point, shapePoint, coord);
	    } else if (geomType === 'edge') {
	      point = coord.reverse(point.x, point.y, 1); // 如果进行scale等变换，需要将坐标点进行转换
	      box = shape.getBBox();
	      var minX = box.minX;
	      var maxX = box.maxX;
	      var minY = box.minY;
	      var maxY = box.maxY;
	      isSnap = point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY;
	    } else if (this.isSnapAll()) {// 获取x、y同时最邻近的shape
	      var shapePointY = shapePoint.y;
	      if (Util.isArray(shapePoint.y)) {
	        shapePointY = (shapePointY[0] + shapePointY[shapePointY.length - 1]) / 2;
	      }
	
	      var transPoint = coord.trans(shapePoint.x, shapePointY, 1);
	      isSnap = abs(transPoint.x - point.x) < distance && abs(transPoint.y - point.y) < distance;
	    } else { // 根据x坐标获取截面上的所有shape
	      var invertPoint = coord.invert(point);
	      var xScale = self.getXScale();
	      var xDim = xScale.dim;
	      var value = xScale.translate(xScale.invert(invertPoint.x));
	      distance = self.getXDistance();
	      isSnap = abs(value - xScale.translate(shapePoint[FIELD_ORIGIN][xDim])) < distance;
	    }
	    return isSnap;
	  },
	  setShapesActive: function(shapes) {
	    var self = this;
	    if (!self.isAllowActiveShape()) {
	      return;
	    }
	
	    var coord = self.get('coord');
	    var activeGroup = self.get('activeGroup');
	    var chart = self.get('chart');
	    var canvas = chart.get('frontCanvas'); // 避免全局刷新,在刷新层叠放一个复制的图形
	    if (!activeGroup) {
	      activeGroup = canvas.addGroup();
	      self.set('activeGroup', activeGroup);
	    } else {
	      activeGroup.clear();
	    }
	    activeGroup.setMatrix(coord.get('matrix').clone());
	    Util.each(shapes, function(shape) {
	      if (shape.get('visible')) {
	        self._setActiveShape(shape, activeGroup);
	      }
	    });
	    self.set('activeShapes', shapes);
	    canvas.sort();
	  },
	  _setLabelsVisible: function(shape, visible) {
	    var self = this;
	    if (shape.get('gLabel')) {
	      shape.get('gLabel').set('visible', visible);
	    } else {
	      var labelCfg = self.get('labelCfg');
	      if (labelCfg && labelCfg.scales && labelCfg.scales.length > 0) {
	        var xDim = self.getXDim();
	        var yDim = self.getYDim();
	        var shapeData = shape.get('origin')._origin;
	        var labelGroup = self.get('labelGroup');
	        var labels = labelGroup.get('labelsGroup').get('children');
	        Util.each(labels, function(label) {
	          var labelData = label.get('attrs').point;
	          if ((labelData[xDim] === shapeData[xDim]) && (labelData[yDim] === shapeData[yDim])) {
	            label.set('visible', visible);
	            shape.set('gLabel', label);
	          }
	        });
	      }
	    }
	  },
	  setShapesFiltered: function(shapes) {
	    var self = this;
	    var chart = self.get('chart');
	    var canvas = chart.get('canvas');
	    Util.each(shapes, function(shape) {
	      if (shape.get('visible')) {
	        self._setLabelsVisible(shape, true);
	      } else {
	        self._setLabelsVisible(shape, false);
	      }
	    });
	    canvas.draw();
	  },
	  _setActiveShape: function(shape, group) {
	    var self = this;
	    var type = shape.get('type');
	    var origin = shape.get('origin');
	    var cfg;
	
	    var shapeName = origin.shape || self.getDefaultValue('shape');
	    var shapeObject = self.get('geomShape');
	    var activeCfg = shapeObject.getActiveCfg(shapeName, origin);
	    cfg = Util.mix({}, activeCfg, {
	      fill: 'white',
	      fillOpacity: 0.15,
	      clip: null
	    });
	
	    var attrs = Util.mix({}, shape.__attrs, cfg);
	    var newShape = group.addShape(type, {
	      attrs: attrs
	    });
	    newShape.setMatrix(shape.getMatrix());
	    newShape.set('origin', origin);
	  },
	  // 清除处于 active的图形状态
	  clearShapeActived: function() {
	    var self = this;
	    var activeGroup = self.get('activeGroup');
	    activeGroup && activeGroup.clear();
	    self.set('activeShapes', null);
	  }
	});
	
	module.exports = ActiveMixin;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 选中的效果
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var MatrixUtil = Util.MatrixUtil;
	
	var SelectMixin = function() {
	
	};
	
	SelectMixin.ATTRS = {
	  allowSelected: false
	};
	
	Util.augment(SelectMixin, {
	  allowSelected: function() {
	    var type = this.get('type');
	    var coord = this.get('coord');
	    var coordType = coord && coord.type;
	    var allowSelected = this.get('allowSelected');
	    if (this.get('selectedCfg') && this.get('selectedCfg').mode !== false) {
	      allowSelected = true;
	    }
	
	    if (type === 'interval' && coordType === 'theta') {
	      allowSelected = true;
	      if (this.get('selectedCfg') && this.get('selectedCfg').mode === false) {
	        allowSelected = false;
	      }
	    }
	
	    return allowSelected;
	  },
	  // 获取可以被选择的图形
	  getShapes: function() {
	    var self = this;
	    var container = self.get('container');
	    var rst = [];
	    var groups = container.get('children');
	
	    Util.each(groups, function(groupItem) {
	      var shapes = groupItem.get('children');
	      Util.each(shapes, function(shape) {
	        if (shape.get('origin')) {
	          rst.push(shape);
	        }
	      });
	    });
	    return rst;
	  },
	  // 获取被选中的图形
	  getSelectedShapes: function(shapes) {
	    var self = this;
	    shapes = shapes || self.getShapes();
	    var selectedShapes = [];
	
	    Util.each(shapes, function(item) {
	      if (item.get('selected')) {
	        selectedShapes.push(item);
	      }
	    });
	
	    return selectedShapes;
	  },
	  // 通过数据对象获取对应的图形
	  getShapeByData: function(obj, shapes) {
	    var shape = null;
	    if (obj) {
	      Util.each(shapes, function(item) {
	        if (item.get('origin') === obj) {
	          shape = item;
	          return false;
	        }
	      });
	    }
	    return shape;
	  },
	  setShapeSelected: function(shape, selected) {
	    var self = this;
	    shape.set('selected', selected);
	    self.setSelectedStatus(shape, selected);
	  },
	  /**
	   * @protected
	   * 设置图形的选中、取消选中的状态
	   * @param {Shape} shape 图形
	   * @param {Boolean} selected 选中效果
	   */
	  setSelectedStatus: function(shape, selected) {
	    var self = this;
	    var activeGroup = self.get('activeGroup');
	    var selectedCfg = self.get('selectedCfg') || {};
	    var animate = selectedCfg.animate !== false;
	    var originStyle = {};
	    if (selected) {
	      var origin = shape.get('origin');
	      var shapeObj = self.get('geomShape');
	      var shapeName = origin.shape || self.getDefaultValue('shape');
	      var cfg = Util.mix({
	        geom: self,
	        coord: shape.get('parent').get('coord'),
	        point: origin
	      }, selectedCfg);
	      var selectedStyle = shapeObj.getSelectedCfg(shapeName, cfg);
	      Util.mix(selectedStyle, cfg.style); // 用户设置的优先级更高
	
	      if (!shape.get('originSelectStyle')) { // 只缓存一次原始矩阵
	        // 缓存当前的配置
	        Util.each(selectedStyle, function(v, k) {
	          if (k === 'transform' || k === 'matrix') {
	            originStyle.matrix = shape.getMatrix().clone();
	          } else {
	            var value = shape.attr(k);
	            if (value !== v) {
	              originStyle[k] = value;
	            }
	          }
	        });
	        shape.set('originSelectStyle', originStyle);
	      } else { // 若初始选中配置存在，直接取出初始选中配置
	        originStyle = shape.get('originSelectStyle');
	      }
	      selectedStyle = this.parseCfg(originStyle.matrix, selectedStyle); // 将配置格式化为矩阵＋属性
	      if (animate) {
	        shape.animate(selectedStyle, 300);
	      } else {
	        shape.attr(selectedStyle);
	        shape.get('canvas').draw();
	      }
	    } else {
	      originStyle = shape.get('originSelectStyle');
	      if (animate) {
	        shape.animate(originStyle, 300);
	      } else {
	        shape.attr(originStyle);
	        shape.get('canvas').draw();
	      }
	    }
	    self.clearShapeActived(); // 清除hover效果
	    activeGroup && activeGroup.get('canvas').draw();
	  },
	  /**
	   * 将矩阵变换描述转为矩阵
	   * 由于现在的Shape只能算Path，拿不到图形信息，所以只能在这里进行举证变换描述的格式化。Shape改造后应放入shape
	   * @param {Object} obj 设置选中的数据
	   */
	  parseCfg: function(m, cfg) {
	    if (cfg.transform) {
	      cfg.matrix = MatrixUtil.transform(m, cfg.transform);
	      delete cfg.transform;
	    }
	    return cfg;
	  },
	  /**
	   * 设置 shape 的选中状态
	   * @param {Object} obj 设置选中的数据
	   */
	  setSelected: function(shapeData) {
	    var self = this;
	    var chart = self.get('chart');
	    var shapes = self.getShapes();
	    var selectedShapes = self.getSelectedShapes(shapes);
	    var shape = self.getShapeByData(shapeData, shapes);
	    var selectedCfg = self.get('selectedCfg') || {};
	    if (selectedCfg.mode === 'multiple' && shape) { // 可多选
	      if (Util.indexOf(selectedShapes, shape) === -1) {
	        selectedShapes.push(shape);
	        self.setShapeSelected(shape, true);
	        chart.fire('itemselected', {
	          shape: shape,
	          data: shapeData,
	          view: self,
	          geom: self
	        });
	      } else {
	        Util.remove(selectedShapes, shape);
	        self.setShapeSelected(shape, false);
	        chart.fire('itemunselected', {
	          shape: shape,
	          data: shape.get('origin'),
	          view: self,
	          geom: self
	        });
	      }
	    } else {
	      var cancelable = selectedCfg.cancelable !== false;
	      var selectedShape = selectedShapes[0];
	      if (cancelable) { // 如果允许取消，则选中null
	        shape = selectedShape === shape ? null : shape;
	      }
	      if (selectedShape !== shape) {
	        if (selectedShape) {
	          self.setShapeSelected(selectedShape, false);
	          chart.fire('itemunselected', {
	            shape: selectedShape,
	            data: selectedShape.get('origin'),
	            view: self,
	            geom: self
	          });
	        }
	        if (shape) {
	          self.setShapeSelected(shape, true);
	          chart.fire('itemselected', {
	            shape: shape,
	            data: shapeData,
	            view: self,
	            geom: self
	          });
	        }
	        chart.fire('itemselectedchange', {
	          shape: shape,
	          data: shapeData,
	          view: self,
	          geom: self,
	          preShape: selectedShape,
	          preData: selectedShape ? selectedShape.get('origin') : null
	        });
	      }
	    }
	  },
	  /**
	   * 获取被选中的数据
	   * @return {Object} 选中的数据
	   */
	  getSelected: function() {
	    var self = this;
	    var selectedShapes = self.getSelectedShapes();
	    var rst = null;
	    if (selectedShapes.length > 0) {
	      if (self.get('selectedCfg') && self.get('selectedCfg').mode === 'multiple') {
	        rst = [];
	        Util.each(selectedShapes, function(selectedShape) {
	          rst.push(selectedShape.get('origin'));
	        });
	      } else {
	        rst = selectedShapes[0].get('origin');
	      }
	    }
	    return rst;
	  },
	  /**
	   * 清空选中
	   * @return {Object} 数据
	   */
	  clearSelected: function() {
	    var self = this;
	    var selectedShapes = self.getSelectedShapes();
	    Util.each(selectedShapes, function(shape) {
	      self.setShapeSelected(shape, false);
	    });
	  }
	});
	
	module.exports = SelectMixin;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 处理 geom 的tooltip 相关的行为
	 * @author
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var Global = __webpack_require__(264);
	var FIELD_ORIGIN = '_origin';
	
	function getScaleName(scale) {
	  return scale.alias || scale.dim;
	}
	
	var TooltipMixin = function() {
	
	};
	
	TooltipMixin.ATTRS = {
	  tooltipMap: {},
	  tooltipDims: null,
	  shareTooltip: true
	};
	
	Util.augment(TooltipMixin, {
	  _snapEqual: function(v1, v2, scale) {
	    var equals;
	    v1 = scale.translate(v1);
	    v2 = scale.translate(v2);
	
	    if (scale.isCategory) {
	      equals = v1 === v2;
	    } else {
	      equals = Math.abs(v1 - v2) <= 0.001;
	    }
	    return equals;
	  },
	  // 根据点的坐标获取相应度量的 value 值
	  _getScaleValueByPoint: function(point) {
	    var result = 0;
	    var coord = this.get('coord');
	    var xScale = this.getXScale();
	    var invertPoint = coord.invert(point);
	    var xValue = invertPoint.x;
	
	    if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {
	      xValue = xScale.rangeMin(); // 极坐标下，scale 的 range 被做过特殊处理 see view.js#L88
	    }
	    result = xScale.invert(xValue);
	
	    if (xScale.isCategory) {
	      result = xScale.translate(result); // 防止分类类型
	    }
	
	    return result;
	  },
	  // 获取用户定义的tooltip的字段名
	  _getTipMapScale: function(type) {
	    var tooltipMap = this.get('tooltipMap');
	    var dimName = tooltipMap && tooltipMap[type];
	    return this._getScale(dimName);
	  },
	  // 获取值对应的度量
	  _getTipValueScale: function() {
	    var scale = this._getTipMapScale('value');
	    if (!scale) { // 用户没有指定值字段
	      var attrs = this.getLegendAttr();
	      Util.each(attrs, function(attr) {
	        var tmpScale = attr.getScale(attr.type);
	        if (tmpScale.isLinear) { // 如果指定字段是非position的，同时是连续的
	          scale = tmpScale;
	          return false;
	        }
	      });
	    }
	
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	
	    if (!scale && yScale && yScale.dim === '..y') {
	      return xScale;
	    }
	
	    return scale || yScale || xScale;
	  },
	  _getTipTitleScale: function() {
	    var self = this;
	    var scale = self._getTipMapScale('title');
	    if (!scale) {
	      var position = self.getAttr('position');
	      var dims = position.getDims();
	      var tmpDim;
	      Util.each(dims, function(dim) {
	        if (dim.indexOf('..') === -1) {
	          tmpDim = dim;
	          return false;
	        }
	      });
	      scale = self._getScale(tmpDim);
	    }
	    return scale;
	  },
	  _filterValue: function(arr, point) {
	    var coord = this.get('coord');
	    var yScale = this.getYScale();
	    var yDim = yScale.dim;
	    var invertPoint = coord.invert(point);
	    var yValue = invertPoint.y;
	    yValue = yScale.invert(yValue);
	    var rst = arr[arr.length - 1];
	
	    Util.each(arr, function(obj) {
	      var origin = obj[FIELD_ORIGIN];
	      if ((origin[yDim][0] <= yValue) && (origin[yDim][1] >= yValue)) {
	        rst = obj;
	        return false;
	      }
	    });
	    return rst;
	  },
	  /**
	   * 根据坐标点查找对应的数据
	   * @param  {Object} point 画布上的点
	   * @param  {Coord} coord 坐标系
	   * @param  {Frame} frame 数据集合
	   * @return {Object}  逼近的点
	   */
	  findPoint: function(point, frame) {
	    var self = this;
	    var xScale = self.getXScale();
	    var yScale = self.getYScale();
	    var xDim = xScale.dim;
	    var yDim = yScale.dim;
	    var type = self.get('type');
	    var frameArr = frame.toJSON();
	    var rst = null;
	
	    if (Util.indexOf(['heatmap', 'contour', 'point'], type) > -1) { // 点的计算使用逼近算法
	      var coord = self.get('coord');
	      var invertPoint = coord.invert(point);
	      var xValue = xScale.invert(invertPoint.x);
	      var yValue = yScale.invert(invertPoint.y);
	      var min;
	      var minObj = {};
	
	      Util.each(frameArr, function(obj) {
	        var distance = (obj._origin[xDim] - xValue) * (obj._origin[xDim] - xValue) + (obj._origin[yDim] - yValue) * (obj._origin[yDim] - yValue);
	        if (Util.isNull(min) || distance < min) {
	          min = distance;
	          minObj = obj;
	        }
	      });
	      rst = minObj;
	    } else {
	      var first = frameArr[0];
	      var last = frameArr[frameArr.length - 1];
	
	      if (!first) {
	        return rst;
	      }
	
	      var value = self._getScaleValueByPoint(point); // 根据该点获得对应度量后数据的值
	      var firstXValue = first[FIELD_ORIGIN][xDim];
	      var firstYValue = first[FIELD_ORIGIN][yDim];
	      var lastXValue = last[FIELD_ORIGIN][xDim];
	      var isYRange = yScale.isLinear && Util.isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况
	
	      // 如果x的值是数组
	      if (Util.isArray(firstXValue)) {
	        Util.each(frameArr, function(record) {
	          var origin = record[FIELD_ORIGIN];
	          if (xScale.translate(origin[xDim][0]) <= value && xScale.translate(origin[xDim][1]) >= value) {
	            if (isYRange) {
	              if (!Util.isArray(rst)) {
	                rst = [];
	              }
	              rst.push(record);
	            } else {
	              rst = record;
	              return false;
	            }
	          }
	        });
	        if (Util.isArray(rst)) {
	          rst = this._filterValue(rst, point);
	        }
	      } else {
	        var next;
	        if (!xScale.isLinear && xScale.type !== 'timeCat') {
	          Util.each(frameArr, function(record, index) {
	            var origin = record[FIELD_ORIGIN];
	            if (self._snapEqual(origin[xDim], value, xScale)) {
	              if (isYRange) {
	                if (!Util.isArray(rst)) {
	                  rst = [];
	                }
	                rst.push(record);
	              } else {
	                rst = record;
	                return false;
	              }
	            } else if (xScale.translate(origin[xDim]) <= value) {
	              last = record;
	              next = frameArr[index + 1];
	            }
	          });
	
	          if (Util.isArray(rst)) {
	            rst = this._filterValue(rst, point);
	          }
	        } else {
	          if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {
	            return null;
	          }
	
	          var firstIdx = 0;
	          var lastIdx = frameArr.length - 1;
	          var middleIdx;
	          while (firstIdx <= lastIdx) {
	            middleIdx = Math.floor((firstIdx + lastIdx) / 2);
	            var item = frameArr[middleIdx][FIELD_ORIGIN][xDim];
	            if (self._snapEqual(item, value, xScale)) {
	              return frameArr[middleIdx];
	            }
	
	            if (xScale.translate(item) <= xScale.translate(value)) {
	              firstIdx = middleIdx + 1;
	              last = frameArr[middleIdx];
	              next = frameArr[middleIdx + 1];
	            } else {
	              if (lastIdx === 0) {
	                last = frameArr[0];
	              }
	              lastIdx = middleIdx - 1;
	            }
	          }
	        }
	
	        if (last && next) { // 计算最逼近的
	          if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xDim]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xDim]) - value)) {
	            last = next;
	          }
	        }
	      }
	
	      var distance = self.getXDistance(); // 每个分类间的平均间距
	      if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xDim]) - value) < distance / 2) {
	        rst = last;
	      }
	    }
	
	    return rst;
	  },
	  /**
	   * @protected
	   * 获取tooltip的标题
	   * @param  {Object} origin 点的原始信息
	   * @return {String} 提示信息的标题
	   */
	  getTipTitle: function(origin) {
	    var tipTitle = '';
	    var titleScale;
	    var tooltipMap = this.get('tooltipMap');
	    var title = tooltipMap.title;
	    if (title) {
	      titleScale = this._getScale(title);
	      if (!titleScale) {
	        return title;
	      }
	    } else {
	      titleScale = this._getTipTitleScale();
	    }
	
	    if (titleScale) {
	      var value = origin[titleScale.dim];
	      tipTitle = titleScale.getText(value);
	    } else if (this.get('type') === 'heatmap') { // 热力图在不存在 title 的时候特殊处理
	      var xScale = this.getXScale();
	      var yScale = this.getYScale();
	      var xValue = xScale.getText(origin[xScale.dim]);
	      var yValue = yScale.getText(origin[yScale.dim]);
	
	      tipTitle = '( ' + xValue + ', ' + yValue + ' )';
	    }
	    return tipTitle;
	  },
	  /**
	   * @protected
	   * 获取tooltip的值
	   * @param  {Object} origin 点的原始信息
	   * @return {String} 提示信息的值
	   */
	  getTipValue: function(origin, valueScale) {
	    var value;
	    var dim = valueScale.dim;
	    value = origin[dim];
	
	    if (Util.isArray(value)) {
	      var tmp = [];
	      Util.each(value, function(sub) {
	        tmp.push(valueScale.getText(sub));
	      });
	      value = tmp.join('-');
	    } else {
	      value = valueScale.getText(value);
	    }
	    return value;
	  },
	  /**
	   * @protected
	   * 获取tooltip的名称
	   * @param  {Object} origin 点的原始信息
	   * @return {String} 提示信息的名称
	   */
	  getTipName: function(origin) {
	    var name;
	    var nameScale;
	    var tooltipMap = this.get('tooltipMap');
	    var dimName = tooltipMap.name;
	    if (dimName) {
	      nameScale = this._getScale(dimName);
	      if (!nameScale) {
	        return dimName;
	      }
	    }
	    var groupScales = this._getGroupScales();
	    if (!nameScale && groupScales.length) { // 如果存在分组类型，取第一个分组类型
	      Util.each(groupScales, function(scale) {
	        nameScale = scale;
	        return false;
	      });
	    }
	    if (nameScale) {
	      var dim = nameScale.dim;
	      name = nameScale.getText(origin[dim]);
	    } else {
	      var valueScale = this._getTipValueScale();
	      name = getScaleName(valueScale);
	    }
	    return name;
	  },
	  /**
	   * 获取点对应tooltip的信息
	   * @protected
	   * @param  {Object} point 原始的数据记录
	   * @param  {Object} cfg tooltipTitle 配置信息
	   * @return {Array}  一条或者多条记录
	   */
	  getTipItems: function(point, tooltipMap) {
	    var self = this;
	    var origin = point[FIELD_ORIGIN];
	    if (tooltipMap) {
	      self.set('tooltipMap', tooltipMap);
	    }
	    var tipTitle = self.getTipTitle(origin);
	    var tooltipDims = self.get('tooltipDims');
	
	    // var tipTitle = self.getTipTitle(origin, title);
	    var items = [];
	    var name;
	    var value;
	
	    function addItem(itemName, itemValue) {
	      if (!Util.isNull(itemValue) && itemValue !== '') { // 值为null的时候，忽视
	        items.push({
	          title: tipTitle,
	          point: point,
	          name: itemName || tipTitle,
	          value: itemValue,
	          color: point.color || Global.defaultColor,
	          marker: true
	        });
	      }
	    }
	
	    if (tooltipDims) {
	      Util.each(tooltipDims, function(dim) {
	        if (!Util.isNull(origin[dim])) { // 字段数据为null ,undefined时不显示
	          var scale = self._getScale(dim);
	          name = getScaleName(scale);
	          value = scale.getText(origin[dim]);
	          addItem(name, value);
	        }
	      });
	    } else {
	      var valueScale = self._getTipValueScale();
	      if (!Util.isNull(origin[valueScale.dim])) { // 字段数据为null ,undefined时不显示
	        value = self.getTipValue(origin, valueScale);
	        name = self.getTipName(origin);
	        addItem(name, value);
	      }
	    }
	    return items;
	  },
	  isShareTooltip: function() {
	    var shareTooltip = this.get('shareTooltip');
	    var type = this.get('type');
	
	    if (type === 'interval') {
	      var coord = this.get('coord');
	      var coordType = coord.type;
	      if (coordType === 'theta' || (coordType === 'polar' && coord.isTransposed)) {
	        shareTooltip = false;
	      }
	    } else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {
	      shareTooltip = false;
	    }
	    return shareTooltip;
	  }
	});
	
	module.exports = TooltipMixin;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview geom 数据处理相关的行为
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var DataFrame = __webpack_require__(270);
	var Adjust = __webpack_require__(390);
	var Global = __webpack_require__(264);
	var GROUP_ATTRS = ['size', 'shape', 'color'];
	var FIELD_ORIGIN = '_origin';
	var ADJUST_TYPES = ['Dodge', 'Jitter', 'Stack', 'Symmetric'];
	
	function isBin(stat) {
	  return stat.binWidth || stat.bandWidth;
	}
	
	var DataMixin = function () {
	
	};
	
	DataMixin.ATTRS = {
	  adjusts: null // 指定调整类型
	};
	
	Util.augment(DataMixin, {
	  _getScale: function (dim) {
	    var self = this;
	    var scales = self.get('scales');
	    var rst = null;
	
	    Util.each(scales, function (scale) {
	      if (scale.dim === dim) {
	        rst = scale;
	        return false;
	      }
	    });
	    return rst;
	  },
	  _getGroupScales: function () {
	    var self = this;
	    var scales = [];
	    var attrs = self.get('attrs');
	    Util.each(attrs, function (attr) {
	      if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
	        var attrScales = attr.scales;
	        Util.each(attrScales, function (scale) {
	          if (scale.isCategory && Util.indexOf(scales, scale) === -1) {
	            scales.push(scale);
	          }
	        });
	      }
	    });
	    return scales;
	  },
	  _saveOriginData: function (frames) {
	    Util.each(frames, function (frame) {
	      var json = frame.toJSON();
	      frame.addCol(FIELD_ORIGIN, json);
	    });
	    return frames;
	  },
	  _setStatRange: function (stat) {
	    var self = this;
	    var dims = stat.getDims();
	    var binDims = [];
	    Util.each(dims, function (dim) {
	      var scale = self._getScale(dim);
	
	      if (!scale.isCategory && scale.type !== 'identity') {
	        if (!isNaN(scale.min) && !isNaN(scale.max)) {
	          stat.setRange(dim, {
	            min: scale.min,
	            max: scale.max
	          });
	        }
	        if (stat.type === 'bin') {
	          binDims.push(dim);
	        }
	      }
	    });
	    if (binDims.length) {
	      stat.binDims = binDims;
	    }
	  },
	  _getBinStat: function(stat) {
	    var rst = null;
	    if (isBin(stat)) {
	      rst = stat;
	    } else if (stat.stat) {
	      var cur = stat.stat;
	      while (cur && !isBin(cur)) {
	        cur = cur.stat;
	      }
	      if (cur && isBin(cur)) {
	        rst = cur;
	      }
	    }
	    return rst;
	  },
	  _execStat: function (stat, frames) {
	    var self = this;
	    var binStat = self._getBinStat(stat);
	    if (binStat) { // 设置binStat的范围
	      self._setStatRange(binStat);
	    }
	
	    if (stat.isRegression || stat.setRange) {
	      self._setStatRange(stat);
	    }
	
	    return stat.exec(frames);
	  },
	  _execStats: function (frames) {
	    var self = this;
	    var rst = frames;
	    if (Util.isNull(frames) || (frames && frames.length === 0)) {
	      return rst; // 如果 frames 为空，不执行统计
	    }
	
	    var attrs = self.get('attrs');
	    var position = self.getAttr('position');
	    var positionStat = position.stat;
	    var otherStats = [];
	
	    Util.each(attrs, function (attr) {
	      if (attr.type !== 'position' && attr.stat) {
	        otherStats.push(attr.stat);
	      }
	    });
	
	    // 执行定位相关的统计
	    if (positionStat) {
	      rst = self._execStat(positionStat, rst);
	    }
	
	    var labelCfg = self.get('labelCfg');
	    if (labelCfg && labelCfg.stat) { // 如果 label 上存在统计
	      rst = self._execStat(labelCfg.stat, rst);
	    }
	
	    // 如果其他属性存在统计，则先按照位置相关的字段分组
	    if (otherStats.length) {
	      var tmp = [];
	      var dims = position.getDims();
	      Util.each(rst, function (frame) {
	        tmp = tmp.concat(DataFrame.group(frame, dims));
	      });
	      rst = tmp;
	      Util.each(otherStats, function (stat) {
	        rst = self._execStat(stat, rst);
	      });
	      rst = [DataFrame.merge.apply(this, rst)];
	    }
	    return rst;
	  },
	  _getGroupDims: function() {
	    var dims = [];
	    var groupScales = this._getGroupScales();
	
	    Util.each(groupScales, function (scale) {
	      dims.push(scale.dim);
	    });
	    return dims;
	  },
	  _groupFrames: function (frame) {
	    var groupDims = this._getGroupDims();
	    return DataFrame.group(frame, groupDims);
	  },
	  _filterNullValue: function (frame) {
	    var xDim = this.getXDim();
	    return DataFrame.filter(frame, function (obj) {
	      return Util.isArray(obj[xDim]) || !Util.isNull(obj[xDim]);
	    });
	  },
	  // 根据当前的scale构建自己的frame
	  _createFrame: function (frame) {
	    var self = this;
	    var scales = self.get('scales');
	    var newFrame = frame.clone(); // 复制成新的数据集
	    Util.each(scales, function (scale) {
	      var dim = scale.dim;
	      if (!frame.contains(dim)) {
	        var sub;
	        var value = (!scale.value && Global.scales[dim]) ? 0 : scale.value;
	        sub = DataFrame.Array.repeat(value, frame.rowCount()); // 生成和 frame 具有相同行数的数组
	        newFrame.addCol(dim, sub);
	      }
	    });
	
	    return newFrame;
	  },
	  // 数据处理流程 STEP 1
	  processData: function (frames) {
	    var frame = this._createFrame(frames); // 创建当前图层自己的数据源
	    frame = this._filterNullValue(frame); // 过滤掉x为undefine 的记录
	    frames = this._groupFrames(frame); // 分组
	    frames = this._execStats(frames); // 执行统计
	    frames = this._saveOriginData(frames); // 保存统计后的数据，用于显示tooltip
	
	    return frames;
	  },
	  // 数据处理流程 STEP 2： 将文本、时间转换成数字
	  numbericFrames: function (frames) {
	    var self = this;
	    var scales = self.get('scales');
	    Util.each(frames, function (frame) {
	      Util.each(scales, function (scale) {
	        var dim = scale.dim;
	        if (scale.isCategory || scale.type === 'time') { // 分类类型，将字符串转换成数字
	          var arr = frame.colArray(dim);
	          Util.each(arr, function (value, index) {
	            arr[index] = scale.translate(value);
	          });
	          frame.colReplace(dim, arr);
	        }
	      });
	    });
	    return frames;
	  },
	  _paddingNullValue: function(frames) {
	    var self = this;
	    var xDim = self.getXDim();
	    var yDim = self.getYDim();
	    var mergeFrame = DataFrame.merge.apply(null, frames);
	    var xValues = DataFrame.values(mergeFrame, xDim);
	    Util.each(frames, function(frame) {
	      if (frame.rowCount() < xValues.length) { // 某些x的值缺少记录
	        var map = {};
	        var rowObj = frame.rowObject(0);
	        var cusXValues = frame.colArray(xDim);
	        Util.each(cusXValues, function(xValue) {
	          map[xValue] = true;
	        });
	        var mapped = true;
	        Util.each(xValues, function(val) {
	          if (map[val]) {
	            mapped = true;
	          } else {
	            if (mapped === true) {
	              var newObj = Util.mix({}, rowObj);
	              newObj[xDim] = val;
	              newObj[yDim] = null;
	              var origin = {};
	              origin[xDim] = val;
	              newObj[yDim] = null;
	              newObj._origin = origin;
	              frame.addRow(newObj);
	              mapped = false;
	            }
	          }
	        });
	      }
	    });
	  },
	  // 数据处理流程 STEP 3： 调整偏移量
	  processAdjust: function (frames) {
	    var self = this;
	    var adjusts = self.get('adjusts');
	
	    if (!Util.isNull(adjusts)) {
	      var type = self.get('type');
	      var yScale = self.getYScale();
	      var xScale = self.getXScale();
	      if (type === 'point' && adjusts[0] === 'Dodge' && !yScale) {
	        adjusts.push('Stack');
	      }
	      Util.each(adjusts, function (adjustType) {
	        if (!Util.inArray(ADJUST_TYPES, adjustType)) {
	          throw new Error(Util.ucfirst(adjustType) + ' is not supported, please use ' + ADJUST_TYPES.toString());
	        }
	        var adjustCfg = {};
	        if (adjustType === 'Dodge') {
	          var adjustNames = [];
	          if (xScale.isCategory) {
	            adjustNames.push('x');
	          } else if (!yScale) {
	            adjustNames.push('y');
	          } else {
	            throw new Error('dodge is not support linear attribute, please use category attribute!');
	          }
	          var groupDims = self._getGroupDims();
	
	          adjustCfg = {
	            xDim: self.getXDim(),
	            yDim: yScale ? yScale.dim : null,
	            adjustNames: adjustNames,
	            groupDims: groupDims
	          };
	
	          if (self.isInCircle()) {
	            adjustCfg.dodgeRatio = 1;
	            adjustCfg.marginRatio = 0;
	          }
	        } else if (adjustType === 'Stack') {
	          // 获取高度和默认size
	          var size = self.getDefaultValue('size') || 3;
	          adjustCfg = {
	            xDim: self.getXDim(),
	            size: size
	          };
	          if (self.get('type') === 'area') {
	            self._paddingNullValue(frames);
	          }
	          var coord = self.get('coord');
	          if (!yScale || yScale.dim === '..y') {
	            adjustCfg.height = coord.getHeight();
	          } else {
	            adjustCfg.yDim = self.getYDim();
	          }
	          if (!coord.isTransposed) {
	            adjustCfg.reverseOrder = true;
	          }
	        } else {
	          adjustCfg = {
	            xDim: self.getXDim(),
	            yDim: self.getYDim()
	          };
	        }
	        var adjust = new Adjust[adjustType](adjustCfg);
	
	        if (adjustType === 'Stack' && yScale && yScale.dim === '..y') {
	          adjust.yDim = '..y';
	          frames = adjust.processOneDimStack(frames);
	        } else {
	          frames = adjust.processAdjust(frames);
	        }
	      });
	    }
	    return frames;
	  }
	});
	
	module.exports = DataMixin;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	var Adjust = __webpack_require__(391);
	
	Adjust.Dodge = __webpack_require__(392);
	Adjust.Jitter = __webpack_require__(393);
	Adjust.Stack = __webpack_require__(394);
	Adjust.Symmetric = __webpack_require__(395);
	
	module.exports = Adjust;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview adjust the points position
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var DataFrame = __webpack_require__(270);
	var DEFAULT_Y = 0; // 默认的y的值
	
	/**
	 * @class Adjust
	 * 数据调整的基类
	 */
	var Adjust = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(Adjust, {
	  /**
	   * 调整对应的x方向对应的字段名称
	   * @type {Scale}
	   */
	  xDim: null,
	  /**
	   * 调整对应的y方向对应的字段名称
	   * @type {Scale}
	   */
	  yDim: null,
	
	  /**
	   * 调整的维度，默认,x,y都做调整
	   * @type {Array}
	   */
	  adjustNames: ['x', 'y'], // 指x,y
	
	  /**
	   * 参与分组的数据维度
	   * @type {Array}
	   */
	  groupDims: null,
	
	  /**
	   * 对应的维度是否可以调整
	   * @protected
	   * @param  {String}  dim 可以调整的维度 x,y
	   * @return {Boolean} 是否可以调整
	   */
	  isAdjust: function(dimName) {
	    return Util.inArray(this.adjustNames, dimName);
	  },
	  /**
	   * @protected
	   * adjust data of frames
	   * @param  {Array} frames data frames
	   * @return {Array} the data frame
	   */
	  processAdjust: function(frames) {
	    var self = this;
	    var mergeFrame = DataFrame.merge.apply(null, frames);
	
	    self.adjFrames = frames;
	    self.mergeFrame = mergeFrame;
	    frames = self.adjustFrames(frames, mergeFrame);
	    self.adjFrames = null;
	    self.mergeFrame = null;
	    return frames;
	  },
	  /**
	   * @protected
	   * 获取可调整度量对应的值
	   * @param  {Frame} mergeFrame 度量名称
	   * @return {Object} 值的映射
	   */
	  _getDimValues: function(mergeFrame) {
	    var self = this;
	    var valuesMap = {};
	    var dims = [];
	    if (self.xDim && self.isAdjust('x')) {
	      dims.push(self.xDim);
	    }
	    if (self.yDim && self.isAdjust('y')) {
	      dims.push(self.yDim);
	    }
	    Util.each(dims, function(dim) {
	      var values = DataFrame.values(mergeFrame, dim);
	      values.sort(function(v1, v2) {
	        return v1 - v2;
	      });
	      valuesMap[dim] = values;
	    });
	    if (!self.yDim && self.isAdjust('y')) { // 只有一维的情况下,同时调整y
	      var dim = 'y';
	      var values = [DEFAULT_Y, 1]; // 默认分布在y轴的 0.1 与 0.2 之间
	      valuesMap[dim] = values;
	    }
	    return valuesMap;
	  },
	  adjustFrames: function(frames, mergeFrame) {
	    var self = this;
	    var newFrames = [];
	    var valuesMap = self._getDimValues(mergeFrame);
	    Util.each(frames, function(frame, index) { // 遍历所有数据集合
	      var data = frame.toJSON();
	      Util.each(valuesMap, function(values, dim) { // 根据不同的度量分别调整位置
	        self.adjustDim(dim, values, data, frames.length, index);
	      });
	      newFrames.push(new DataFrame(data));
	    });
	    return newFrames;
	  },
	  adjustDim: function(dim, values, data) {
	    return new DataFrame(data);
	  },
	  getAdjustRange: function(dim, key, values) {
	    var self = this;
	    var index = Util.indexOf(values, key);
	    var length = values.length;
	    var pre;
	    var next;
	    if (!self.yDim && self.isAdjust('y')) {
	      pre = 0;
	      next = 1;
	    } else if (length > 1) {
	      pre = index === 0 ? values[0] : values[index - 1];
	      next = index === length - 1 ? values[length - 1] : values[index + 1];
	
	      if (index !== 0) {
	        pre += (key - pre) / 2;
	      } else {
	        pre -= (next - key) / 2;
	      }
	      if (index !== length - 1) {
	        next -= (next - key) / 2;
	      } else {
	        next += (key - values[length - 2]) / 2;
	      }
	    } else {
	      pre = key === 0 ? 0 : key - 0.5;
	      next = key === 0 ? 1 : key + 0.5;
	    }
	
	    return {
	      pre: pre,
	      next: next
	    };
	  },
	  /**
	   * 对数据进行分组
	   * @param  {Array} data 数据
	   * @param  {String} dim 分组的字段
	   * @return {Object}  分组的键值对映射
	   */
	  groupData: function(data, dim) {
	    var groups = {};
	
	    Util.each(data, function(record) {
	      var value = record[dim];
	      if (value === undefined) {
	        value = record[dim] = DEFAULT_Y;
	      }
	      if (!groups[value]) {
	        groups[value] = [];
	      }
	      groups[value].push(record);
	    });
	
	    return groups;
	  }
	});
	
	module.exports = Adjust;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Moves graphic elements next to other graphic elements that appear at the same value, rather than superimposing them.
	 * @fileOverview dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Adjust = __webpack_require__(391);
	var Frame = __webpack_require__(270);
	
	var Dodge = function(cfg) {
	  Dodge.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Dodge, Adjust);
	
	Util.augment(Dodge, {
	
	  /**
	   * 调整过程中,2个数据的间距
	   * @type {Number}
	   */
	  marginRatio: 1 / 2,
	
	  /**
	   * 调整占单位宽度的比例,例如：占2个分类间距的 1/2
	   * @type {Number}
	   */
	  dodgeRatio: 1 / 2,
	  _getDodgeDim: function(dims) {
	    var self = this;
	    var rst = null;
	    Util.each(dims, function(dim) {
	      if (dim !== self.xDim) {
	        rst = dim;
	        return false;
	      }
	    });
	    return rst;
	  },
	  /**
	   * @protected
	   * adjust data of frames
	   * @param  {Array} frames data frames
	   * @return {Array} the data frame
	   */
	  processAdjust: function(frames) {
	    var self = this;
	    var mergeFrame = Frame.merge.apply(null, frames);
	    var groupDims = self.groupDims;
	    var dodgeDim = self._getDodgeDim(groupDims);
	    if (dodgeDim) { // 如果指定了分组dim的字段
	      frames = Frame.group(mergeFrame, dodgeDim);
	    }
	    self.adjFrames = frames;
	    self.mergeFrame = mergeFrame;
	    frames = self.adjustFrames(frames, mergeFrame);
	
	    if (dodgeDim) { // 调整之后重新按照 groupDims 进行分组
	      mergeFrame = Frame.merge.apply(null, frames);
	      frames = Frame.group(mergeFrame, groupDims);
	    }
	
	    self.adjFrames = null;
	    self.mergeFrame = null;
	    return frames;
	  },
	  getDistribution: function(dim) {
	    var self = this;
	    var frames = self.adjFrames;
	    var map = {};
	
	    Util.each(frames, function(frame, index) {
	      var values = Frame.values(frame, dim);
	      if (!values.length) {
	        values.push(0);
	      }
	      Util.each(values, function(val) {
	        if (!map[val]) {
	          map[val] = [];
	        }
	        map[val].push(index);
	      });
	    });
	    return map;
	  },
	  adjustDim: function(dim, values, data, frameCount, frameIndex) {
	    var self = this;
	    var map = self.getDistribution(dim);
	    var groupData = self.groupData(data, dim); // 根据值分组
	
	    Util.each(groupData, function(group, key) {
	      key = parseFloat(key);
	      var range;
	      if (values.length === 1) {
	        range = {
	          pre: -1,
	          next: 1
	        };
	      } else {
	        range = self.getAdjustRange(dim, key, values);
	      }
	      Util.each(group, function(record) {
	        var value = record[dim];
	        var valueArr = map[value];
	        var valIndex = Util.indexOf(valueArr, frameIndex);
	        record[dim] = self.getDodgeOffset(range, valIndex, valueArr.length);
	      });
	    });
	  },
	  getDodgeOffset: function(range, index, count) {
	    var self = this;
	    var pre = range.pre;
	    var next = range.next;
	    var offset;
	    var tickLength = next - pre;
	    var width = (tickLength * self.dodgeRatio) / count;
	    var margin = self.marginRatio * width;
	    offset = 1 / 2 * (tickLength - (count) * width - (count - 1) * margin) +
	      ((index + 1) * width + index * margin) -
	      1 / 2 * width - 1 / 2 * tickLength;
	    return (pre + next) / 2 + offset;
	  }
	});
	
	module.exports = Dodge;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Repositions graphic elements randomly using a normal or uniform distribution
	 * @author dxq613@gmail.com
	 * reference: http://www-01.ibm.com/support/knowledgecenter/SSLVMB_21.0.0/com.ibm.spss.statistics.help/gpl_statement_element_jitter.htm
	 */
	
	'use strict';
	
	
	var Util = __webpack_require__(169);
	var Adjust = __webpack_require__(391);
	
	var Jitter = function(cfg) {
	  Jitter.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Jitter, Adjust);
	
	Util.augment(Jitter, {
	  getAdjustOffset: function(pre, next) {
	    var r = Math.random(); // 随机位置，均匀分布
	    var avg = (next - pre); // * length
	    var append = avg * 0.05;
	    return pre + append + avg * 0.9 * r;
	  },
	  // adjust group data
	  _adjustGroup: function(group, dim, key, values) {
	    var self = this;
	    var range = self.getAdjustRange(dim, key, values);
	
	    Util.each(group, function(record) {
	      record[dim] = self.getAdjustOffset(range.pre, range.next); // 获取调整的位置
	    });
	  },
	  adjustDim: function(dim, values, data) {
	    var self = this;
	    var groupData = self.groupData(data, dim);
	    Util.each(groupData, function(group, key) {
	      key = parseFloat(key);
	      self._adjustGroup(group, dim, key, values);
	    });
	  }
	});
	
	module.exports = Jitter;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The extension function of stack ,which mixin to geom
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Adjust = __webpack_require__(391);
	
	var Stack = function(cfg) {
	  Stack.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Stack, Adjust);
	
	Util.augment(Stack, {
	  height: null,
	  size: 10,
	  reverseOrder: false,
	  adjustNames: ['y'], // Only support stack y
	  processOneDimStack: function(frames) {
	    var self = this;
	    var xDim = self.xDim;
	    var yDim = self.yDim || 'y';
	    var height = self.height;
	
	    var stackY = {};
	    var newFrames = [];
	    // 如果层叠的顺序翻转
	    if (self.reverseOrder) {
	      frames = frames.slice(0).reverse();
	    }
	    for (var i = 0; i < frames.length; i++) {
	      // var preY = stackHeight;
	      var data = frames[i].toJSON();
	      // cates
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var size = item.size || self.size;
	        var stackHeight = (size * 2) / height;
	        var x = item[xDim];
	        if (!stackY[x]) {
	          stackY[x] = stackHeight / 2;
	        }
	        item[yDim] = stackY[x];
	        stackY[x] += stackHeight;
	      }
	
	      newFrames.push(new Frame(data));
	    }
	    // 翻转回来
	    if (self.reverseOrder) {
	      newFrames.reverse();
	    }
	    return newFrames;
	  },
	  processAdjust: function(frames) {
	    var self = this;
	    if (self.yDim) {
	      frames = self.processStack(frames);
	    } else {
	      frames = self.processOneDimStack(frames);
	    }
	    return frames;
	  },
	  processStack: function(frames) {
	    var self = this;
	    var xDim = self.xDim;
	    var yDim = self.yDim;
	    var count = frames.length;
	    var stackFrames = [];
	    var stackCache = {
	      positive: {},
	      negative: {}
	    };
	    var newFrames = [];
	    // 层叠顺序翻转
	    if (self.reverseOrder) {
	      frames = frames.slice(0).reverse();
	    }
	    for (var i = 0; i < count; i++) {
	      var data = frames[i].toJSON();
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var x = item[xDim];
	        var y = item[yDim] || 0;
	        var xkey = x.toString();
	        y = Util.isArray(y) ? y[1] : y;
	        var direction = y >= 0 ? 'positive' : 'negative';
	        if (!stackCache[direction][xkey]) {
	          stackCache[direction][xkey] = 0;
	        }
	        item[yDim] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];
	        stackCache[direction][xkey] += y;
	      }
	      stackFrames.push(data);
	    }
	
	    // 层叠顺序翻转
	    if (self.reverseOrder) {
	      stackFrames.reverse();
	    }
	
	    Util.each(stackFrames, function(stackFrame) {
	      var frame = new Frame(stackFrame);
	      newFrames.push(frame);
	    });
	
	    return newFrames;
	  }
	});
	
	module.exports = Stack;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The extension function of symmetric ,which mixin to geom
	 * @author huangtonger@aliyun.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Adjust = __webpack_require__(391);
	
	var Symmetric = function(cfg) {
	  Symmetric.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Symmetric, Adjust);
	
	Util.augment(Symmetric, {
	  cacheMax: null,
	  adjustNames: ['y'], // Only support stack y
	  // 获取最大的y值
	  _getMax: function(dim) {
	    var self = this;
	    var mergeFrame = self.mergeFrame;
	    var max = Frame.max(mergeFrame, dim);
	    return max;
	  },
	  // 获取每个字段最大的值
	  _getXValuesMax: function() {
	    var self = this;
	    var yDim = self.yDim;
	    var xDim = self.xDim;
	    var cache = {};
	    var mergeFrame = self.mergeFrame;
	    mergeFrame.each(function(obj) {
	      var xValue = obj[xDim];
	      var yValue = obj[yDim];
	      var max = Util.isArray(yValue) ? Math.max.apply(null, yValue) : yValue;
	      cache[xValue] = cache[xValue] || 0;
	      if (cache[xValue] < max) {
	        cache[xValue] = max;
	      }
	    });
	    return cache;
	  },
	  // 入口函数
	  processAdjust: function(frames) {
	    var self = this;
	    var mergeFrame = Frame.merge.apply(null, frames);
	    self.mergeFrame = mergeFrame;
	    frames = self._processSymmetric(frames);
	    self.mergeFrame = null;
	    return frames;
	  },
	  // 处理对称
	  _processSymmetric: function(frames) {
	    var self = this;
	    var xDim = self.xDim;
	    var yDim = self.yDim;
	    var max = self._getMax(yDim);
	    var first = frames[0].rowObject(0);
	    var cache;
	    var rst = [];
	    if (first && Util.isArray(first[yDim])) {
	      cache = self._getXValuesMax();
	    }
	    Util.each(frames, function(frame) {
	      var data = frame.toJSON();
	      Util.each(data, function(obj) {
	        var value = obj[yDim];
	        var offset;
	        if (Util.isArray(value)) {
	          var xValue = obj[xDim];
	          var valueMax = cache[xValue];
	          offset = (max - valueMax) / 2;
	          var tmp = [];
	          /* eslint-disable no-loop-func */
	          Util.each(value, function(subVal) { // 多个字段
	            tmp.push(offset + subVal);
	          });
	          /* eslint-enable no-loop-func */
	          obj[yDim] = tmp;
	        } else {
	          offset = (max - value) / 2;
	          obj[yDim] = [offset, value + offset];
	        }
	      });
	      rst.push(new Frame(data));
	    });
	    return rst;
	  }
	});
	
	module.exports = Symmetric;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 用于激活鼠标的悬浮事件
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Canvas = __webpack_require__(173);
	var Actived = __webpack_require__(397);
	
	var ActiveGroup = function(cfg) {
	  ActiveGroup.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(ActiveGroup, Canvas.Group);
	
	Util.mixin(ActiveGroup, [Actived.Group]);
	
	Util.augment(ActiveGroup, {
	  isItemActived: function(item) {
	    return item.get('actived');
	  },
	  setItemActived: function(shape, actived) {
	    shape.set('actived', actived);
	  }
	});
	
	
	module.exports = ActiveGroup;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	var Actived = __webpack_require__(398);
	
	Actived.Group = __webpack_require__(399);
	
	module.exports = Actived;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 图表中的激活的元素
	 * @ignore
	 */
	
	"use strict";
	
		
	var Util = __webpack_require__(169);
	
	/**
	 * @protected
	 * @class Actived
	 * 控件可以被激活（active)的扩展
	 *
	 * 	- [文档地址](http://spmjs.io/docs/g-actived/)
	 * 	- [wiki地址](http://spmjs.io/docs/g-actived/wiki/)
	 */
	var Actived = function(){
	
	};
	
	Actived.ATTRS = {
	
		/**
		 * 是否激活
		 * @type {Boolean}
		 */
		actived : false
	
	}; 
	
	Util.augment(Actived,{
		/**
		 * 是否处于激活状态
		 * @return {Boolean} 激活状态
		 */
		isActived : function(){
			return this.get('actived');
		},
		/**
		 * 设置激活
		 */
		setActived : function(){
			this.setActiveStatus(true);
			this.set('actived',true);
		},
		/**
		 * @protected
		 * 设置图形的激活状态
		 * @param {Boolean} actived 是否激活
		 */
		setActiveStatus : function(/*actived*/){
			
		},
		/**
		 * 清除激活
		 */
		clearActived : function(){
			this.setActiveStatus(false);
			this.set('actived',false);
			if(this.clearActivedItem){
				this.clearActivedItem();
			}
		}
	});
	
	module.exports = Actived;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 子元素可以被激活
	 * @ignore
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	/**
	 * @class Chart.Actived.Group
	 * @protected
	 * 元素可以激活的容器扩展
	 *
	 *  - [使用文档](http://spmjs.io/docs/g-actived/wiki/group.html)
	 */
	var Group = function(){
	
	};
	
	Group.ATTRS = {
		
		/**
		 * 是否允许多个激活
		 * @type {Boolean}
		 */
		multipleActive: false
	
		/**
		 * @event itemactived
		 * 选项激活
		 * @param {Object} ev 事件对象
		 * @param {Object} ev.item 激活的子项
		 */
		
	
		/**
		 * @event itemunactived
		 * 选项激活
		 * @param {Object} ev 事件对象
		 * @param {Object} ev.item 取消激活的子项
		 */
	};
	
	Util.augment(Group,{
	
		/**
		 * @protected
		 * 是否激活
		 * @param {Chart.Actived} item 可以被激活的元素
		 * @return {Chart.Actived[]} 可以被激活的元素集合
		 */
		isItemActived : function(item){
			return item.isActived();
		},
		/**
		 * @protected
		 * 获取可以被激活的元素
		 * @return {Chart.Actived[]} 可以被激活的元素集合
		 */
		getActiveItems : function(){
			return this.get('children');
		},
		/**
		 * @protected
		 * 设置激活状态
		 * @param {Chart.Actived} item 可以被激活的元素
		 * @param {Boolean} actived 是否激活
		 */
		setItemActived : function(item,actived){
			if(actived){
				item.setActived();
			}else{
				item.clearActived();
			}
		},
		
		/**
		 * @protected
		 * 触发激活事件
		 * @param  {Object} item 可激活的子项
		 */
		onActived : function(item){
			this.fire('itemactived',{item: item});
			this.fireUpGroup && this.fireUpGroup('actived',item);
		},
		/**
		 * @protected
		 * 触发取消激活事件
		 * @param  {Object} item 可激活的子项
		 */
		onUnActived : function(item){
			this.fire('itemunactived',{item: item});
			this.fireUpGroup && this.fireUpGroup('unactived',item);
		},
		/**
		 * 设置激活的元素
		 * @param {Chart.Actived} item 可以被激活的元素
		 */
		setActivedItem : function(item){
			var self = this;
			var multiple = self.get('multipleActive');
			if (!multiple) {
				self.clearActivedItem();
			}
	
			if(item && !self.isItemActived(item)){
				self.setItemActived(item,true);
				self.onActived(item);
			}
			
		},
		/**
		 * 获取激活的元素
		 * @return {Chart.Actived} 激活的元素
		 */
		getActived : function(){
			var self = this,
				items = self.getActiveItems(),
				rst = null;
	
			Util.each(items,function(item){
				if(self.isItemActived(item)){
					rst = item;
					return false;
				}
			});
	
			return rst;
		},
		getAllActived: function(){
			var self = this,
				items = self.getActiveItems(),
				rst = [];
	
			Util.each(items,function(item){
				if(self.isItemActived(item)){
					rst.push(item);
				}
			});
	
			return rst;
		},
		clearAllActived: function(){
			var self = this,
				items = self.getAllActived();
			Util.each(items,function(item){
				self.setItemActived(item,false);
				self.onUnActived(item);
			});
	
			return this;
		},
		/**
		 * 清除激活的元素
		 */
		clearActivedItem : function(item){
			var self = this;
			item = item || self.getActived();
			if(item){
				self.setItemActived(item,false);
				self.onUnActived(item);
			}
			return this; 
		}
	
	});
	
	module.exports = Group;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 动画主控
	 * 核心问题：
	 * 问题一：差量对比的算法效率
	 * 问题二：确保最后一次draw canvas的结构树是正确的
	 * @author huangtonger@aliyun.com minnuo<audrey.tm@alibaba-inc.com>
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Canvas = __webpack_require__(173);
	var GroupAnimate = __webpack_require__(401);
	var Animate = __webpack_require__(412);
	var Matrix = Canvas.Matrix.Matrix3;
	
	// 过滤掉无法做动画差值的属性
	var ReservedAttrs = {
	  text: 'text',
	  elements: 'elements',
	  rotate: 'rotate',
	  textAlign: 'textAlign',
	  textBaseline: 'textBaseline',
	  fontStyle: 'fontStyle',
	  font: 'font',
	  fontWeight: 'fontWeight',
	  fontFamily: 'fontFamily',
	  points: 'points'
	};
	
	// 获取图组内所有的shapes
	function getShapes(shapes, parent) {
	  // 当图组设置了animate为false，则不对该图组的子元素做动画
	  if (!Util.isArray(shapes) || parent.get('animate') === false) return;
	  var children = parent.get('children');
	  Util.each(children, function(child) {
	    if (child.isGroup) {
	      getShapes(shapes, child);
	    } else if (child.isShape) {
	      shapes.push(child);
	    }
	  });
	}
	
	// 获取变更的属性
	function getDiffAttrs(attrs1, attrs2) {
	  var l1 = attrs1.length;
	  var l2 = attrs2.length;
	  var attrs = l2 > l1 ? attrs2 : attrs1;
	  var rst = {
	    attrs1: {},
	    attrs2: {}
	  };
	  var bool = false;
	  var attr1;
	  var attr2;
	  var pathString1;
	  var pathString2;
	
	  Util.each(attrs, function(attr, k) {
	    attr1 = attrs1[k];
	    attr2 = attrs2[k];
	    if (Util.isObject(attr1) || Util.isObject(attr2)) return;
	    if (k === 'path') {
	      attr1 = Util.parsePathString(attr1);
	      attr2 = Util.parsePathString(attr2);
	      pathString1 = Util.path2string(attr1);
	      pathString2 = Util.path2string(attr2);
	      if (pathString1 === pathString2 || pathString1.indexOf('NaN') !== -1 || pathString2.indexOf('NaN') !== -1) return;
	    }
	    if (Util.isArray(attr1) && Util.isArray(attr2) && Util.equalsArray(attr1, attr2)) {
	      return;
	    }
	    if (attr1 !== attr2 && !ReservedAttrs[k]) {
	      rst.attrs1[k] = attr1;
	      rst.attrs2[k] = attr2;
	      bool = true;
	    }
	  });
	  return bool ? rst : false;
	}
	
	// 通过id查找
	function find(id, arr) {
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i].id === id) return arr[i];
	  }
	  return false;
	}
	
	// 获取全图形属性
	function getAllAttrs(shape) {
	  var rst = {};
	  var attrs = shape.__attrs;
	  Util.each(attrs, function(v, k) {
	    rst[k] = shape.attr(k);
	  });
	  return rst;
	}
	
	function getShapeAnimateCfg(shape) {
	  var animateCfg = {};
	  if (Util.isFunction(shape.getParent) && shape.getParent().get('geom')) {
	    animateCfg = shape.getParent().get('geom').get('animateCfg');
	  }
	  return animateCfg;
	}
	
	// 复制图形用作缓存
	function cloneShapes(shapes) {
	  var rst = [];
	  Util.each(shapes, function(v) {
	    if (!v.id || v.isClip) return;
	    var animateCfg = getShapeAnimateCfg(v);
	    // if (Util.isFunction(v.getParent) && v.getParent().get('geom')) {
	    //   animateCfg = v.getParent().get('geom').get('animateCfg');
	    // }
	    rst.push({
	      id: v.id,
	      stash: true,
	      type: v.get('type'),
	      attrs: getAllAttrs(v), // 设入的属性
	      matrix: v.getMatrix().clone(),
	      animateType: v.animateType,
	      realShape: v,
	      isStash: true,
	      points: v.get('origin') && v.get('origin').points || [],
	      index: v.get('origin') && v.get('origin').index || 0,
	      animateCfg: animateCfg
	    });
	  });
	  return rst;
	}
	
	function isNumberArray(arr) {
	  for (var i = 0; i < arr.length; i++) {
	    if ((arr[i] !== 0 && !arr[i]) || !Util.isNumber(arr[i])) {
	      return false;
	    }
	  }
	  return true;
	}
	
	function isLegalMatrix(matrix) {
	  return Util.isObject(matrix) && matrix.type === 'matrix3' && isNumberArray(matrix.elements);
	}
	
	function isObjectSameType(obj1, obj2) {
	  var rst = true;
	  Util.each(obj1, function(v, k) {
	    if (typeof v !== typeof obj2[k]) {
	      rst = false;
	      return false;
	    }
	  });
	  return rst;
	}
	
	function check(s1, s2) {
	  var attr1;
	  var attr2;
	  var matrix1;
	  var matrix2;
	  if (!s1 || !s2) {
	    return false;
	  }
	
	  attr1 = s1.attrs;
	  attr2 = getAllAttrs(s2);
	  matrix1 = s1.matrix;
	  matrix2 = s2.getMatrix();
	
	  if (!isLegalMatrix(matrix1) || !isLegalMatrix(matrix2)) {
	    return false;
	  }
	  if (!isObjectSameType(attr1, attr2)) {
	    return false;
	  }
	  return true;
	}
	
	function getAnimate(geomType, coord, animationType, animationName) {
	  var result;
	  if (animationName) {
	    result = Animate.animation[animationType][animationName];
	  } else {
	    result = Animate.getAnimation(geomType, coord, animationType);
	  }
	  return result;
	}
	
	function getAnimateCfg(geomType, animationType, shape) {
	  var defaultCfg = Animate.getAnimateCfg(geomType, animationType);
	  var cfg = {};
	  var animateCfg = shape.animateCfg;
	  if (!animateCfg && Util.isFunction(shape.getParent)) {
	    var geom = shape.getParent().get('geom');
	    if (geom) {
	      animateCfg = geom.get('animateCfg');
	    }
	  }
	  if (animateCfg) {
	    cfg = Util.simpleMix({}, defaultCfg, animateCfg[animationType]);
	  } else {
	    cfg = defaultCfg;
	  }
	  return cfg;
	}
	
	// 添加动画
	// 注意缓存的shape不是真正的shape
	function addAnimate(arr1, arr2, canvas, coord, isUpdate) {
	  var s; // 销毁动画新增shape
	  var s1; // 缓存shape
	  var s2; // 目标shape
	  var id;
	  var diffAttrs;
	  var animate;
	  var matrix2;
	  var updateCfg;
	  var matrixBool;
	  var animateCfg;
	  var combineArr = arr1.concat(arr2); // 合并缓存shapes和当前shapes
	
	  if (combineArr.length > 1500) { // 粗略的元素限制策略
	    canvas.draw();
	    return;
	  }
	
	  if (isUpdate) {
	    Util.each(combineArr, function(v) {
	      if (!v.isStash && v.realShape && v.realShape.isTem) {
	        v.realShape.remove(true); // 确保临时元素被删除，重要！！
	        return;
	      }
	      if (v.isTem && !v.get('destroyed')) {
	        v.remove(true); // 确保临时元素被删除，重要！！
	      }
	      id = v.id;
	      // id 不存在不添加动画
	      if (!id) {
	        canvas && !canvas.get('destroyed') && canvas.draw();
	        return;
	      }
	      // 只查找对照组的元素
	      if (v.isStash) {
	        s1 = v;
	        s2 = find(id, arr2);
	      } else {
	        s1 = find(id, arr1);
	        s2 = v;
	      }
	
	      if (s1 && s2 && !s2.get('destroyed')) { // 更新动画
	        // 防御机制：如果属性、矩阵不合法则不执行动画
	        if (!check(s1, s2)) {
	          return;
	        }
	        animateCfg = getAnimateCfg(s1.animateType, 'update', s1);
	        animate = getAnimate(s1.animateType, coord, 'update', animateCfg.animation);
	        if (Util.isFunction(animate)) {
	          animate = animate(s1, s2, animateCfg, coord);
	        } else {
	          matrix2 = s2.getMatrix(); // 获取当前图形矩形
	          diffAttrs = getDiffAttrs(s1.attrs, getAllAttrs(s2));
	          matrixBool = Matrix.equal(s1.matrix, matrix2);
	
	          if (!diffAttrs && matrixBool) {
	            // 这代码如果不改，绝对对不住自己的，很多地方很神奇的 return ;
	            // 很多地方又 canvas.draw();
	            // 很多地方又加了 canvas.get('destroyed') 判定
	            // 原先很多图中断的很大可能发生在这里
	            // canvas.draw();
	            return;
	          } else if (diffAttrs && matrixBool) {
	            s2.attr(diffAttrs.attrs1);
	            updateCfg = diffAttrs.attrs2;
	          } else if (!diffAttrs && !matrixBool) {
	            s2.setMatrix(s1.matrix);
	            updateCfg = {
	              matrix: matrix2
	            };
	          } else {
	            s2.attr(diffAttrs.attrs1);
	            s2.setMatrix(s1.matrix);
	            updateCfg = Util.simpleMix({
	              matrix: matrix2
	            }, diffAttrs.attrs2);
	          }
	          s2.animate(updateCfg, animateCfg.duration, animateCfg.easing);
	        }
	      } else if (s1 && !s2) { // 销毁动画
	        if (!isLegalMatrix(s1.matrix)) {
	          return;
	        }
	        animateCfg = getAnimateCfg(s1.animateType, 'leave', s1);
	        animate = getAnimate(s1.animateType, coord, 'leave', animateCfg.animation);
	        if (Util.isFunction(animate)) {
	          s = canvas.addShape(s1.type, {
	            attrs: s1.attrs,
	            points: s1.points,
	            index: s1.index,
	            id: s1.id,
	            animateCfg: s1.animateCfg
	          });
	          // label 不受坐标系矩阵影响
	          (s1.animateType.indexOf('label') === -1) && s1.matrix.multiply(coord.get('matrix'));
	          s.setMatrix(s1.matrix);
	          s.isTem = true;
	          animate(s, animateCfg, coord);
	        } else {
	          canvas && !canvas.get('destroyed') && canvas.draw();
	        }
	      } else if (!s1 && s2 && !s2.get('destroyed')) { // 生成动画
	        if (!isLegalMatrix(s2.getMatrix())) {
	          return;
	        }
	        animateCfg = getAnimateCfg(s2.animateType, 'enter', s2);
	        animate = getAnimate(s2.animateType, coord, 'enter', animateCfg.animation);
	        if (Util.isFunction(animate)) {
	          animate(s2, animateCfg, coord);
	        } else {
	          canvas && !canvas.get('destroyed') && canvas.draw();
	        }
	      }
	    });
	  } else {
	    Util.each(arr2, function(shape) {
	      if (!isLegalMatrix(shape.getMatrix())) {
	        return;
	      }
	      animateCfg = getAnimateCfg(shape.animateType, 'appear', shape);
	      animate = getAnimate(shape.animateType, coord, 'appear', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(shape, animateCfg, coord);
	      } else {
	        canvas && !canvas.get('destroyed') && canvas.draw();
	      }
	    });
	  }
	}
	
	// 个体动画执行函数
	function shapeAnimation(canvas, coord, isUpdate, groupAnimate) {
	  var flag = isUpdate || !groupAnimate;
	  var shapesStash = canvas.get('shapesStash');
	  var shapes = [];
	  shapesStash = shapesStash ? shapesStash : [];
	  getShapes(shapes, canvas);
	  canvas.set('shapesStash', cloneShapes(shapes));
	  flag && addAnimate(shapesStash, shapes, canvas, coord, isUpdate);
	  // 无论是否执行动画，都调用一次 draw()
	  canvas.draw();
	}
	
	// 获取整体动画执行函数
	function getGroupAnimation(config) {
	  var geom = config.geom; // 获取图形实例
	  var fn = config.fn; // 绘制方法
	  var coord = geom.get('coord');
	  // animate构造函数
	  var C = GroupAnimate[config.animateCfg.animation];
	  if (!C && !Util.isFunction(C)) {
	    return false;
	  }
	  var start = coord.get('start');
	  var end = coord.get('end');
	  var width = coord.get('width');
	  var height = coord.get('height');
	  var cfg = {
	    group: geom.get('group'),
	    rect: {
	      x: start.x,
	      y: end.y,
	      width: width,
	      height: height
	    },
	    before: fn
	  };
	  Util.simpleMix(cfg, config.animateCfg);
	  if (coord.isPolar) {
	    Util.simpleMix(cfg, {
	      circle: {
	        center: coord.getCenter(),
	        startAngle: coord.get('startAngle'),
	        endAngle: coord.get('endAngle'),
	        r: (Math.max(width, height)) / 2
	      }
	    });
	  }
	  return new C(cfg);
	}
	
	module.exports = {
	  shapeAnimation: shapeAnimation,
	  getGroupAnimation: getGroupAnimation
	};


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	var Animate = __webpack_require__(402);
	
	module.exports = Animate;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var Anim = __webpack_require__(403);
	var Angle = __webpack_require__(404);
	var Circle = __webpack_require__(405);
	var Waveh = __webpack_require__(406);
	var scaleXY = __webpack_require__(408);
	var ScaleY = __webpack_require__(409);
	var ScaleX = __webpack_require__(410);
	var Waves = __webpack_require__(411);
	
	Anim.angle = Angle;
	Anim.circle = Circle;
	Anim.waveh = Waveh;
	Anim.scaleXY = scaleXY;
	Anim.scaleY = ScaleY;
	Anim.scaleX = ScaleX;
	Anim.waves = Waves;
	
	Anim.groupAngle = Angle;
	Anim.groupCircle = Circle;
	Anim.groupWaveh = Waveh;
	Anim.groupScaleXY = scaleXY;
	Anim.groupScaleY = ScaleY;
	Anim.groupScaleX = ScaleX;
	Anim.groupWaves = Waves;
	
	module.exports = Anim;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(197);
	var Matrix = __webpack_require__(173).Matrix;
	var Matrix3 = Matrix.Matrix3;
	
	/**
	 * @class Animate
	 * 分组的一些动画
	 */
	var Animate = function(cfg) {
		Animate.superclass.constructor.call(this, cfg);
	};
	
	Animate.ATTRS = {
		/**
		 * 平滑函数，默认是 'easeInOut'
		 * @type {String}
		 */
		easing: 'easeInOutQuad',
		/**
		 * 动画执行的时间
		 * @type {Number}
		 */
		duration: 1000,
		/**
		 * 回调函数
		 * @type {Function}
		 */
		callback: null,
		/**
		 * 执行动画的分组
		 * @type {Canvas.Group}
		 */
		group: null,
	
		/**
		 * 执行动画的区域
		 * @type {Object}
		 */
		rect: null,
		/**
		 * 执行动画前调用函数
		 * @type {Function}
		 */
		before: null
	};
	
	Util.extend(Animate, Base);
	
	Util.augment(Animate, {
		/**
		 * 执行动画
		 */
		start: function() {
			this.startAnimate();
			return this;
		},
		/**
		 * 开始动画
		 * @protected
		 */
		startAnimate: function() {
			var target = this.getTarget();
			var group = this.get('group');
			this.set('originMatrix', group.getMatrix().clone());
			this.set('rect', this.getAnimRect());
			this.set('target', target);
			this.beforeAnimate(target);
			this.execAnimate(target);
		},
		/**
		 * 动画执行前
		 * @param  {Object} target 目标图形对象
		 */
		beforeAnimate: function(target) {
			var initMatrix = this.getInitMatrix();
			var initAttrs = this.getInitAttrs();
			var originMatrix = this.get('originMatrix');
			initMatrix = Matrix3.multiply(originMatrix, initMatrix);// 乘以原始矩阵 注意：矩阵相乘不可换序！
			target.setMatrix(initMatrix);
			target.attr(initAttrs);
		},
		/**
		 * 动画执行时
		 * @param  {Object} target 目标图形对象
		 */
		execAnimate: function(target) {
			var self = this;
			var before = self.get('before');
			var callback = self.get('callback');
			var duration = self.get('duration');
			var easing = self.get('easing');
			var endAttrs = self.getEndAttrs();
			var originMatrix = self.get('originMatrix');
			var endMatrix = self.getEndMatrix();
			var toProps;
			endMatrix = Matrix3.multiply(originMatrix, endMatrix); // 乘以原始矩阵 注意：矩阵相乘不可换序！
			toProps = Util.mix({}, endAttrs, {
				matrix: endMatrix
			});
			target.animate(toProps, duration, easing, function() {
				callback && callback();
				self.afterAnimate(target);
			});
			before && before(); // 防止before函数执行时间过长，阻塞动画执行
		},
		/**
		 * 动画执行后
		 * @param  {Object} target 目标图形对象
		 * @protected
		 */
		afterAnimate: function(target) {
			var group = this.get('group');
			var canvas = group.get('canvas');
			if (group != target) {
				group.attr('clip', false);
				canvas.draw();
			}else{
				return true;
			}
		},
		/**
		 * 获取动画目标
		 * @protected
		 */
		getTarget: function() {
			return this.get('group');
		},
		/**
		 * 动画初始的矩阵
		 * @protected
		 */
		getInitMatrix: function() {
			return new Matrix3();
		},
		/**
		 * 动画初始的属性
		 * @protected
		 */
		getInitAttrs: function() {
			return {};
		},
		/**
		 * 动画结束的矩阵
		 * @protected
		 */
		getEndMatrix: function() {
			return new Matrix3();
		},
		/**
		 * 动画结束的属性
		 * @protected
		 */
		getEndAttrs: function() {
			return {};
		},
		/**
		 * 获取动画的执行的区域
		 * @protected
		 */
		getAnimRect: function() {
			var rect = this.get('rect');
			var group = this.get('group');
			if (!rect) {
				rect = group.getBBBox();
			}
			return rect;
		},
	  /**
	   * @protected
	   * 获取动画的圆形区域的信息，半径和圆心
	   */
	  getCircleInfo: function(){
	    var rect = this.get('rect');
	    var circle = this.get('circle');
	    var center = this.getRectCenter(rect);
	    var r = Math.min(rect.width,rect.height) / 2;
	    if (!circle) {
				circle = {
					center : center,
			    r : r
			  };
	    }
	    return circle;
	  },
		/**
		 * 获取动画的执行的区域中心
		 * @protected
		 */
		getRectCenter: function(rect) {
			return {
				x: rect.x + rect.width / 2,
				y: rect.y + rect.height / 2
			};
		},
		/**
		 * 结束动画
		 */
		stop: function() {
			this.stopAnimate();
			return this;
		},
		/**
		 * 内部结束动画，方便子类继承覆盖
		 * @protected
		 */
		stopAnimate: function() {
			var target = this.getTarget();
			target && target.stopAnimate();
		}
	});
	
	module.exports = Animate;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 通过调整角度，执行圆的动画
	 * @author  ajsdhfg@163.com, dxq613@gmail.com
	 */
	
	'use strict';
	
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	
	var Angle = function(cfg) {
		Angle.superclass.constructor.call(this, cfg);
	};
	Angle.ATTRS = {
		_circle: {
			center: {
				x: 0,
				y: 0
			},
			r: 0,
			startAngle: -Math.PI/2,
			endAngle: Math.PI * (3/2)
		}
	}
	Util.extend(Angle, Animate);
	Util.augment(Angle, {
		/**
		 * 动画初始的属性
		 */
		getInitAttrs: function() {
			var _circle = this.get('_circle');
			var circle = this.getCircleInfo();
			var center = circle.center;
			circle = Util.mix(_circle, circle);
			var attrs = {
				x: center.x,
				y: center.y,
				rs: 0,
				re: circle.r + 100,
				startAngle: circle.startAngle,
				endAngle: circle.startAngle
			};
			return attrs;
		},
		/**
		 * 动画结束的属性
		 */
		getEndAttrs: function() {
			var _circle = this.get('_circle');
			var circle = this.getCircleInfo();
			circle  = Util.mix(_circle, circle);
			var attrs = {
				endAngle: circle.endAngle
			};
			return attrs;
		},
		/**
		 * 获取动画目标
		 */
		getTarget: function() {
			var group = this.get('group');
			var parent = group.getParent();
			var clip = parent.addShape('Fan');
			group.attr('clip', clip);
			return clip;
		}
	});
	
	module.exports = Angle;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 通过调整半径，执行圆的动画
	 * @author  ajsdhfg@163.com, dxq613@gmail.com
	 */
	
	'use strict';
	
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	
	var Circle = function(cfg) {
		Circle.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Circle, Animate);
	Util.augment(Circle, {
		/**
		 * 动画初始的属性
		 */
		getInitAttrs: function() {
			var circleInfo = this.getCircleInfo();
			var center = circleInfo.center;
			var attrs = {
				x: center.x,
				y: center.y,
				r: 0
			};
			return attrs;
		},
		/**
		 * 动画结束的属性
		 */
		getEndAttrs: function() {
			var circleInfo = this.getCircleInfo();
			var attrs = {
				r: circleInfo.r + 150
			};
			return attrs;
		},
		/**
		 * 获取动画目标
		 */
		getTarget: function() {
			var group = this.get('group');
			var parent = group.getParent();
			var clip = parent.addShape('Circle');
			group.attr('clip', clip);
			return clip;
		}
	});
	
	module.exports = Circle;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Wave = __webpack_require__(407);
	var Util = __webpack_require__(169);
	
	var Hwave = function(cfg) {
		Hwave.superclass.constructor.call(this, cfg);
	};
	Util.extend(Hwave, Wave);
	
	Util.augment(Hwave, {
		/**
		 * 动画初始的参数
		 */
		getInitAttrs: function() {
			var rect = this.get('rect');
			var attrs = {
				x: rect.x,
				y: rect.y,
				width: rect.width,
				height: 0
			};
			return attrs;
		}
	});
	
	module.exports = Hwave;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	
	var Wave = function(cfg) {
	  Wave.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Wave, Animate);
	Util.augment(Wave, {
	
	  /**
	   * 获取动画开始的参数、执行动画、结束动画的参数
	   * @protected
	   */
	  getEndAttrs: function() {
	    var rect = this.get('rect');
	    var attrs = {
	      width: rect.width,
	      height: rect.height
	    };
	    return attrs;
	  },
	  /**
	   * 获取动画目标
	   */
	  getTarget: function() {
	    var group = this.get('group');
	    var parent = group.getParent();
	    var clip = parent.addShape('Rect');
	    group.attr('clip', clip);
	    return clip;
	  }
	});
	
	module.exports = Wave;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(173).Matrix;
	var Matrix3 = Matrix.Matrix3;
	var MatrixUtil = Util.MatrixUtil;
	
	var ScaleXY = function(cfg) {
		ScaleXY.superclass.constructor.call(this, cfg);
	};
	Util.extend(ScaleXY, Animate);
	
	Util.augment(ScaleXY, {
		/**
		 * 动画初始的参数
		 */
		getInitMatrix: function() {
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 0.01, 0.01, center.x, center.y);
			return matrix;
		},
		/**
		 * 获取动画开始的参数、执行动画、结束动画的参数
		 * @protected
		 */
		getAnimMatrix: function() {
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 1, 1, center.x, center.y);
			return matrix;
		}
	});
	
	module.exports = ScaleXY;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(173).Matrix;
	var Matrix3 = Matrix.Matrix3;
	var MatrixUtil = Util.MatrixUtil;
	
	var ScaleY = function(cfg){
	  ScaleY.superclass.constructor.call(this,cfg);
	};
	Util.extend(ScaleY,Animate);
	
	Util.augment(ScaleY,{
		/**
		 * 动画初始的参数
		 */
		getInitMatrix: function() {
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 1, -0.01, center.x, rect.y + rect.height);
			return matrix;
		},
		/**
		 * 获取动画开始的参数、执行动画、结束动画的参数
		 * @protected
		 */
		getAnimMatrix: function(){
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 1, 1, center.x, rect.y + rect.height);
			return matrix;
		}
	});
	
	module.exports = ScaleY;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var Animate = __webpack_require__(403);
	var Util = __webpack_require__(169);
	var Matrix = __webpack_require__(173).Matrix;
	var Matrix3 = Matrix.Matrix3;
	var MatrixUtil = Util.MatrixUtil;
	
	var ScaleX = function(cfg) {
		ScaleX.superclass.constructor.call(this, cfg);
	};
	Util.extend(ScaleX, Animate);
	
	Util.augment(ScaleX, {
		/**
		 * 动画初始的参数
		 */
		getInitMatrix: function() {
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 0.01, 1, center.x - rect.width / 2, rect.y);
			return matrix;
		},
		/**
		 * 获取动画开始的参数、执行动画、结束动画的参数
		 * @protected
		 */
		getAnimMatrix: function() {
			var rect = this.get('rect');
			var center = this.getRectCenter(rect);
			var matrix = new Matrix3();
			matrix = MatrixUtil.scale(matrix, 1, 1, center.x - rect.width / 2, rect.y);
			return matrix;
		}
	});
	
	module.exports = ScaleX;


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Wave = __webpack_require__(407);
	var Util = __webpack_require__(169);
	
	var Swave = function(cfg) {
		Swave.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Swave, Wave);
	Util.augment(Swave, {
		/**
		 * 动画初始的参数
		 */
		getInitAttrs: function() {
			var rect = this.get('rect');
			var attrs = {
				x: rect.x,
				y: rect.y,
				width: 0,
				height: rect.height
			};
			return attrs;
		}
	});
	
	module.exports = Swave;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 动画实现
	 * @author huangtonger@aliyun.com minnuo<audrey.tm@alibaba-inc.com>
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Canvas = __webpack_require__(173);
	var Vector3 = Canvas.Matrix.Vector3;
	var G = Canvas.G;
	
	/* ****************** 工具类方法 *********************/
	
	/**
	 * 根据坐标系获取Clip
	 * @param coord
	 * @param bool 初始状态是否是入场
	 */
	function getClip(coord, bool) {
	  var start = coord.get('start');
	  var end = coord.get('end');
	  var width = coord.getWidth();
	  var height = coord.getHeight();
	  var margin = 200;
	  var startAngle;
	  var endAngle;
	  var center;
	  var radius;
	  var clip;
	
	  if (coord.isPolar) {
	    radius = coord.getRadius();
	    center = coord.getCenter();
	    startAngle = coord.get('startAngle');
	    endAngle = coord.get('endAngle');
	    clip = new G.Fan({
	      attrs: {
	        x: center.x,
	        y: center.y,
	        rs: 0,
	        re: radius + margin,
	        startAngle: startAngle,
	        endAngle: bool ? startAngle : endAngle
	      }
	    });
	    clip.endState = {
	      endAngle: bool ? endAngle : startAngle
	    };
	  } else {
	    clip = new G.Rect({
	      attrs: {
	        x: start.x - margin,
	        y: end.y - margin,
	        width: bool ? 0 : width + margin * 2,
	        height: height + margin * 2
	      }
	    });
	    clip.endState = {
	      width: bool ? width + margin * 2 : 0
	    };
	  }
	  clip.isClip = true;
	  return clip;
	}
	// 获取图形的包围盒
	function getPointsBox(points) {
	  if (!points || !points.length) return null;
	  var first = points[0];
	  var minX = first.x;
	  var maxX = first.x;
	  var minY = first.y;
	  var maxY = first.y;
	  Util.each(points, function(v) {
	    minX = minX > v.x ? v.x : minX;
	    maxX = maxX < v.x ? v.x : maxX;
	    minY = minY > v.y ? v.y : minY;
	    maxY = maxY < v.y ? v.y : maxY;
	  });
	  return {
	    minX: minX,
	    maxX: maxX,
	    minY: minY,
	    maxY: maxY,
	    centerX: (minX + maxX) / 2,
	    centerY: (minY + maxY) / 2
	  };
	}
	
	function getAngle(shape, coord) {
	  var points = shape.points || shape.get('origin').points;
	  var box = getPointsBox(points);
	  var endAngle;
	  var startAngle;
	  var coordStartAngle = coord.get('startAngle');
	  var coordEndAngle = coord.get('endAngle');
	  var diffAngle = coordEndAngle - coordStartAngle;
	
	  if (coord.isTransposed) {
	    endAngle = box.maxY * diffAngle;
	    startAngle = box.minY * diffAngle;
	  } else {
	    endAngle = box.maxX * diffAngle;
	    startAngle = box.minX * diffAngle;
	  }
	  endAngle += coordStartAngle;
	  startAngle += coordStartAngle;
	  return {
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}
	// 根据角度生成扇形path
	function createPath(attrs) {
	  var cx = attrs.x;
	  var cy = attrs.y;
	  var rs = attrs.rs;
	  var re = attrs.re;
	  var path;
	  var startAngle = attrs.startAngle;
	  var endAngle = attrs.endAngle;
	  if ((endAngle - startAngle) % Math.PI === 0) {
	    endAngle = endAngle - 0.000001;
	  }
	
	  var ssp = {
	    x: Math.cos(startAngle) * rs + cx,
	    y: Math.sin(startAngle) * rs + cy
	  };
	  var sep = {
	    x: Math.cos(startAngle) * re + cx,
	    y: Math.sin(startAngle) * re + cy
	  };
	  var esp = {
	    x: Math.cos(endAngle) * rs + cx,
	    y: Math.sin(endAngle) * rs + cy
	  };
	  var eep = {
	    x: Math.cos(endAngle) * re + cx,
	    y: Math.sin(endAngle) * re + cy
	  };
	  var largeArcFlag = (endAngle - startAngle) >= Math.PI ? 1 : 0;
	  if (rs === 0) {
	    path = [
	        ['M', ssp.x, ssp.y],
	        ['L', sep.x, sep.y],
	        ['A', re, re, 0, largeArcFlag, 1, eep.x, eep.y],
	        ['L', esp.x, esp.y],
	        ['Z']
	    ];
	  } else {
	    path = [
	        ['M', ssp.x, ssp.y],
	        ['L', sep.x, sep.y],
	        ['A', re, re, 0, largeArcFlag, 1, eep.x, eep.y],
	        ['L', esp.x, esp.y],
	        ['A', rs, rs, 0, largeArcFlag, 0, ssp.x, ssp.y],
	        ['Z']
	    ];
	  }
	  return path;
	}
	
	function getAnimateParam(animateCfg, index, id, endState) {
	  var result = {};
	  if (animateCfg.delay) {
	    endState.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;
	  }
	  result.easing = Util.isFunction(animateCfg.easing) ? animateCfg.easing(index, id) : animateCfg.easing;
	  result.duration = Util.isFunction(animateCfg.duration) ? animateCfg.duration(index, id) : animateCfg.duration;
	  return result;
	}
	
	/* ***********************************************************/
	
	/* *************************** 动画 ***************************/
	
	function scaleInY(shape, animateCfg) {
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x = (box.minX + box.maxX) / 2;
	  var y;
	  var v;
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	
	  if (points[0].y - points[1].y <= 0) { // 当顶点在零点之下
	    y = box.maxY;
	  } else {
	    y = box.minY;
	  }
	  v = new Vector3(x, y, 1);
	  shape.apply(v);
	  shape.transform([
	    ['t', -v.x, -v.y],
	    ['s', 1, 0.01],
	    ['t', v.x, v.y]
	  ]);
	  var endState = {
	    transform: [
	      ['t', -v.x, -v.y],
	      ['s', 1, 100],
	      ['t', v.x, v.y]
	    ]
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function scaleInX(shape, animateCfg) {
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x;
	  var y = (box.minY + box.maxY) / 2;
	  var v;
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	  if (points[0].y - points[1].y > 0) { // 当顶点在零点之下
	    x = box.maxX;
	  } else {
	    x = box.minX;
	  }
	  v = new Vector3(x, y, 1);
	  shape.apply(v);
	  shape.transform([
	    ['t', -v.x, -v.y],
	    ['s', 0.01, 1],
	    ['t', v.x, v.y]
	  ]);
	  var endState = {
	    transform: [
	      ['t', -v.x, -v.y],
	      ['s', 100, 1],
	      ['t', v.x, v.y]
	    ]
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function lineWidthOut(shape, animateCfg) {
	  var endState = {
	    lineWidth: 0,
	    destroy: true
	  };
	  var id = shape.id || shape.get('id');
	  var index = shape.get('index') || (shape.get('origin') && shape.get('origin').index) || 0;
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function zoomIn(shape, animateCfg) {
	  var box = shape.getBBox();
	  var x = (box.minX + box.maxX) / 2;
	  var y = (box.minY + box.maxY) / 2;
	  var v = new Vector3(x, y, 1);
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	  shape.apply(v);
	  shape.transform([
	    ['t', -v.x, -v.y],
	    ['s', 0.01, 0.01],
	    ['t', v.x, v.y]
	  ]);
	  var endState = {
	    transform: [
	      ['t', -v.x, -v.y],
	      ['s', 100, 100],
	      ['t', v.x, v.y]
	    ]
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function zoomOut(shape, animateCfg) {
	  var box = shape.getBBox();
	  var x = (box.minX + box.maxX) / 2;
	  var y = (box.minY + box.maxY) / 2;
	  var v = new Vector3(x, y, 1);
	  var id = shape.id || shape.get('id');
	  var index = shape.get('index') || (shape.get('origin') && shape.get('origin').index) || 0;
	  shape.apply(v);
	  var endState = {
	    transform: [
	      ['t', -v.x, -v.y],
	      ['s', 0.1, 0.1],
	      ['t', v.x, v.y]
	    ],
	    destroy: true
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function pathIn(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	  var path = Util.pathToAbsolute(shape.attr('path'));
	  shape.attr('path', [path[0]]);
	  var endState = {
	    path: path
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function pathOut(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape.id || shape.get('id');
	  var index = shape.get('index') || (shape.get('origin') && shape.get('origin').index) || 0;
	  var path = Util.pathToAbsolute(shape.attr('path'));
	  var endState = {
	    path: [path[0]],
	    destroy: true
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function clipIn(shape, animateCfg, coord, startAngle, endAngle) {
	  var clip = getClip(coord, true);
	  var canvas = shape.get('canvas');
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	  var endState;
	  if (startAngle) {
	    clip.attr('startAngle', startAngle);
	    clip.attr('endAngle', startAngle);
	    endState = {
	      endAngle: endAngle
	    };
	  } else {
	    endState = clip.endState;
	  }
	  clip.set('canvas', canvas);
	  shape.attr('clip', clip);
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  clip.animate(endState, aniamteParam.duration, aniamteParam.easing,
	    function() {
	      shape && !shape.get('destroyed') && shape.attr('clip', null) && clip.destroy();
	    });
	}
	
	function fadeIn(shape, animateCfg) {
	  var id = shape.id || shape.get('id');
	  var index = (shape.get('origin') && shape.get('origin').index) || 0;
	  var fillOpacity = Util.isNull(shape._getAttr('fillOpacity')) ? 1 : shape._getAttr('fillOpacity');
	  var strokeOpacity = Util.isNull(shape._getAttr('strokeOpacity')) ? 1 : shape._getAttr('strokeOpacity');
	  shape.attr('fillOpacity', 0);
	  shape.attr('strokeOpacity', 0);
	  var endState = {
	    fillOpacity: fillOpacity,
	    strokeOpacity: strokeOpacity
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	
	function fadeOut(shape, animateCfg) {
	  var id = shape.id || shape.get('id');
	  var index = shape.get('index') || (shape.get('origin') && shape.get('origin').index) || 0;
	  var strokeOpacity = shape._getAttr('strokeOpacity') || 0;
	  var fillOpacity = shape._getAttr('fillOpacity') || 0;
	  var endState = {
	    onUpdate: function(f, r) {
	      f.attrs.strokeOpacity = strokeOpacity * (1 - r);
	      f.attrs.fillOpacity = fillOpacity * (1 - r);
	    }
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, aniamteParam.duration, aniamteParam.easing, function() {
	    shape.remove(true);
	  });
	}
	
	function fanIn(shape, animateCfg, coord) {
	  var angle = getAngle(shape, coord);
	  var endAngle = angle.endAngle;
	  var startAngle = angle.startAngle;
	  clipIn(shape, animateCfg, coord, startAngle, endAngle);
	}
	
	function fanUpdate(shape1, shape2, animateCfg, coord) {
	  var angle1 = getAngle(shape1, coord);
	  var angle2 = getAngle(shape2, coord);
	  var endAngle1 = angle1.endAngle;
	  var startAngle1 = angle1.startAngle;
	  var endAngle2 = angle2.endAngle;
	  var startAngle2 = angle2.startAngle;
	  var radius = coord.getRadius();
	  var inner = coord.get('inner');
	  var center = coord.getCenter();
	  var id = shape1.id || shape1.get('id');
	  var index = shape1.index === undefined ? (shape1.get('origin') && shape1.get('origin').index) : shape1.index;
	  shape2.__attrs.path = shape1.attrs.path;
	  var endState = {
	    onUpdate: function(f, r) {
	      var attrs = {
	        x: center.x,
	        y: center.y,
	        rs: radius * inner,
	        re: radius,
	        startAngle: startAngle1 + (startAngle2 - startAngle1) * r,
	        endAngle: endAngle1 + (endAngle2 - endAngle1) * r
	      };
	      f.attrs.path = createPath(attrs);
	    }
	  };
	  var aniamteParam = getAnimateParam(animateCfg, index, id, endState);
	  shape2.animate(endState, aniamteParam.duration, aniamteParam.easing);
	}
	/* ********************************************************/
	
	var Animate = {
	  line: {
	    appear: function() {
	      return Animate.animation.appear.clipIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.clipIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.lineWidthOut;
	    },
	    cfg: {
	      appear: {
	        duration: 900,
	        easing: 'easeInOutQuart'
	      }
	    }
	  },
	  path: {
	    appear: function() {
	      return Animate.animation.appear.clipIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.clipIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.lineWidthOut;
	    },
	    cfg: {
	      appear: {
	        duration: 900,
	        easing: 'easeInOutQuart'
	      }
	    }
	  },
	  area: {
	    appear: function() {
	      return Animate.animation.appear.clipIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.fadeIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.fadeOut;
	    },
	    cfg: {
	      appear: {
	        duration: 900,
	        easing: 'easeInOutQuart'
	      },
	      enter: {
	        easing: 'easeInQuart'
	      },
	      leave: {
	        easing: 'easeOutQuart',
	        duration: 600
	      }
	    }
	  },
	  polygon: {
	    appear: function() {
	      return Animate.animation.appear.zoomIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.zoomIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.zoomOut;
	    }
	  },
	  edge: {
	    appear: function() {
	      return Animate.animation.appear.pathIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.pathIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.pathOut;
	    }
	  },
	  interval: {
	    appear: function(coord) {
	      var result = Animate.animation.appear.pathIn;
	      if (coord.isRect) {
	        if (coord.isTransposed) {
	          result = Animate.animation.appear.scaleInX;
	        } else {
	          result = Animate.animation.appear.scaleInY;
	        }
	      } else if ((coord.isTransposed && coord.isPolar) || coord.type === 'theta') {
	        result = Animate.animation.appear.fanIn;
	      }
	      return result;
	    },
	    enter: function(coord) {
	      if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
	        return Animate.animation.enter.fadeIn;
	      }
	      return Animate.animation.enter.pathIn;
	    },
	    leave: function(coord) {
	      if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
	        return Animate.animation.leave.fadeOut;
	      }
	      return Animate.animation.leave.pathOut;
	    },
	    update: function(coord) {
	      if (coord.type === 'theta') {
	        return Animate.animation.update.fanUpdate;
	      }
	    },
	    cfg: {
	      appear: {
	        duration: 450
	      },
	      leave: {
	        easing: 'easeOutQuart'
	      },
	      enter: {
	        easing: 'easeInQuart'
	      }
	    }
	  },
	  point: {
	    appear: function() {
	      return Animate.animation.appear.zoomIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.zoomIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.zoomOut;
	    }
	  },
	  schema: null,
	  contour: null,
	  heatmap: null,
	  label: {
	    appear: function() {
	      return Animate.animation.appear.fadeIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.fadeIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.fadeOut;
	    },
	    cfg: {
	      appear: {
	        duration: 900
	      }
	    }
	  },
	  axisLine: {},
	  gridLine: {},
	  labelLine: {
	    appear: function() {
	      return Animate.animation.appear.pathIn;
	    },
	    enter: function() {
	      return Animate.animation.enter.pathIn;
	    },
	    leave: function() {
	      return Animate.animation.leave.pathOut;
	    }
	  }
	};
	
	
	// 默认动画库
	Animate.animation = {
	  enter: {
	    'clipIn': clipIn,
	    'zoomIn': zoomIn,
	    'pathIn': pathIn,
	    'scaleInY': scaleInY,
	    'scaleInX': scaleInX,
	    'fanIn': fanIn,
	    'fadeIn': fadeIn
	  },
	  leave: {
	    'lineWidthOut': lineWidthOut,
	    'zoomOut': zoomOut,
	    'pathOut': pathOut,
	    'fadeOut': fadeOut
	  },
	  appear: {
	    'clipIn': clipIn,
	    'zoomIn': zoomIn,
	    'pathIn': pathIn,
	    'scaleInY': scaleInY,
	    'scaleInX': scaleInX,
	    'fanIn': fanIn,
	    'fadeIn': fadeIn
	  },
	  update: {
	    'fanUpdate': fanUpdate
	  }
	};
	
	// 默认动画配置
	Animate.defaultCfg = {
	  update: {
	    duration: 600,
	    easing: 'easeInOutQuart'
	  },
	  enter: {
	    duration: 610,
	    easing: 'easeInOutQuart'
	  },
	  leave: {
	    duration: 300,
	    easing: 'easeInQuart'
	  },
	  appear: {
	    duration: 450,
	    easing: 'easeOutQuart'
	  }
	};
	
	// 获取动画
	Animate.getAnimation = function(geomType, coord, animationType) {
	  var geomAnimateCfg = this[geomType];
	  if (geomAnimateCfg) {
	    var animation = geomAnimateCfg[animationType];
	    if (Util.isFunction(animation)) {
	      return animation(coord);
	    }
	  }
	  return false;
	};
	
	
	// 获取动画配置
	Animate.getAnimateCfg = function(geomType, animationType) {
	  var animateCfg = {};
	  var defaultCfg = this.defaultCfg[animationType];
	  animateCfg = Util.simpleMix({}, defaultCfg, this[geomType] && this[geomType].cfg && this[geomType].cfg[animationType]);
	  return animateCfg;
	};
	
	// 注册动画
	Animate.registAnimation = function(animationType, animationName, animationFun) {
	  if (!this.animation[animationType]) {
	    this.animation[animationType] = {};
	  }
	  this.animation[animationType][animationName] = animationFun;
	};
	
	module.exports = Animate;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分面操作相关的辅助类
	 * @author zaifei.zwx@alibaba-inc.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Facet = __webpack_require__(414);
	var Global = __webpack_require__(264);
	
	var FacetAssist = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(FacetAssist, {
	  chart: null,
	
	  // 获取 type 对应的Facet类
	  _getFacetClass: function(type) {
	    type = Util.ucfirst(type);
	    return Facet[type];
	  },
	  // 创建分面视图
	  _createFacetView: function(facet) {
	    var chart = this.chart;
	    chart.set('animate', false); // 分面暂且关闭动画
	    var view = chart.createView({
	      index: facet.index,
	      data: facet.frame,
	      region: facet.region,
	      facet: facet
	    });
	    view.set('options', chart.get('options'));
	    view.set('plotContainer', chart.get('plotContainer'));
	    view.set('frontPlot', chart.get('frontPlot'));
	    view.set('backPlot', chart.get('backPlot'));
	    view.set('scales', chart.get('scales'));
	    view.set('stats', chart.get('stats'));
	
	    return view;
	  },
	  generateFacets: function(data, facetCfg) {
	    var self = this;
	    var views = [];
	    var chart = self.chart;
	    var scaleAssist = chart.get('scaleAssist');
	
	    facetCfg.defs = scaleAssist.defs;
	    facetCfg.plotRange = chart.get('plotRange');
	    facetCfg = Util.mix({}, Global.facetCfg, facetCfg);
	    facetCfg.facetTitle = Util.mix({}, Global.facetCfg.facetTitle, facetCfg.facetTitle);
	    if (!facetCfg.dims) { // 兼容 @ali/g-facet 模块的 dims 参数名
	      facetCfg.dims = facetCfg.fields; // 必须是数组
	    }
	
	    var C = self._getFacetClass(facetCfg.type);
	    var f = new C(facetCfg);
	    var facets = f.generateFacets(data); // 生成分面
	    var plotContainer = chart.get('plotContainer');
	    var group = plotContainer.addGroup();
	    f.drawTitles(facets, group); // 绘制每个分面的标题
	
	    Util.each(facets, function(facet) {
	      views.push(self._createFacetView(facet));
	    });
	    return views;
	  }
	});
	
	module.exports = FacetAssist;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	var Facet = __webpack_require__(415);
	
	Facet.Facet = __webpack_require__(416);
	Facet.Rect = __webpack_require__(417);
	Facet.List = __webpack_require__(418);
	Facet.Circle = __webpack_require__(419);
	Facet.Tree = __webpack_require__(420);
	Facet.Mirror = __webpack_require__(421);
	
	module.exports = Facet;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分面的基类
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	
	/**
	 * @class Chart.Facets
	 * 用于生成分面的类
	 */
	var Facets = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(Facets, {
	
	  /**
	   * 分面的字段名列表
	   * @type {Array}
	   */
	  dims: [],
	
	  /**
	   * 分面之间的间距
	   * @type {Number}
	   */
	  margin: 0,
	
	  defs: {}, // 列定义
	
	  facetTitle: {
	    titleOffset: 25,
	    colDimTitle: {
	      title: {
	        'font-size': 16,
	        'text-anchor': 'middle',
	        fill: '#444'
	      }
	    },
	    colTitle: {
	      title: {
	        'font-size': 14,
	        'text-anchor': 'middle',
	        fill: '#444'
	      }
	    },
	    rowTitle: {
	      title: {
	        'font-size': 14,
	        'text-anchor': 'middle',
	        rotate: 90,
	        fill: '#444'
	      }
	    },
	    rowDimTitle: {
	      title: {
	        'font-size': 16,
	        'text-anchor': 'middle',
	        rotate: 90,
	        fill: '#444'
	      }
	    }
	  },
	
	  /**
	   * 画布的绘制区域
	   * @type {Plot.Range}
	   */
	  plotRange: null,
	  /**
	   * @protected
	   * 获取字段对应的
	   * @param  {[type]} dim   [description]
	   * @param  {[type]} frame [description]
	   * @return {[type]}       [description]
	   */
	  getDimValues: function(dim, frame) {
	    var self = this;
	    var def = self.defs[dim];
	    var values = [];
	    if (def && def.values) {
	      values = def.values;
	    } else {
	      values = Frame.values(frame, dim);
	    }
	    return values;
	  },
	  /**
	   * 获取过滤Frame的函数
	   * @protected
	   */
	  getFilter: function(conditions) {
	    var defs = this.defs;
	    var filter = function(obj) {
	      var filtered = true;
	      Util.each(conditions, function(cond) {
	        var dim = cond.dim;
	        var value = cond.value;
	        var values = cond.values;
	        var tmp = true;
	        if (!Util.isNull(value) && dim) {
	          if (defs[dim] && defs[dim].group) {
	            tmp = defs[dim].group(obj) === Util.indexOf(values, value);
	          } else {
	            tmp = obj[dim] === value || obj[dim] === Util.indexOf(values, value);
	          }
	        }
	        filtered = filtered && tmp;
	      });
	      return filtered;
	    };
	
	    return filter;
	  },
	
	  /**
	   * 绘制分面的title
	   * @param  {Array} facets 分面集合
	   * @param  {Canvas.Group} group 绘图的层
	   */
	  drawTitles: function(facets, group) {
	    var self = this;
	    var dims = self.dims;
	
	    Util.each(facets, function(facet) {
	      self.drawFacetTitle('col', facet, group);
	    });
	
	    self.drawDimTitle('col', dims[0], group);
	  },
	  /**
	   * 生成分面
	   * @param  {DataFrame} frame 数据集合
	   * @return {Array} 多个分面集合
	   */
	  generateFacets: function(/* frame */) {
	
	  },
	  drawFacetTitle: function(type, facet, group) {
	    var self = this;
	    var facetTitle = self.facetTitle;
	    var titleOffset = facetTitle.titleOffset;
	    var titleCfg = type === 'row' ? facetTitle.rowTitle : facetTitle.colTitle;
	
	    var region = facet.region;
	    var start = region.start;
	    var end = region.end;
	
	    var dim = type === 'row' ? 'y' : 'x';
	    var othDim = type === 'row' ? 'x' : 'y';
	    var point = {}; // 顶部中点
	    point[dim] = (end[dim] - start[dim]) / 2 + start[dim];
	    point[othDim] = end[othDim];
	
	    var factor = dim === 'x' ? -1 : 1;
	    var title = Util.mix({
	      text: facet[dim + 'Value']
	    }, titleCfg.title);
	
	    title[dim] = point[dim];
	    title[othDim] = point[othDim] + titleOffset * factor;
	
	    group.addShape('Text', {
	      attrs: title
	    });
	  },
	  drawDimTitle: function(type, field, group) {
	    if (Util.isNull(field)) {
	      return;
	    }
	    var self = this;
	    var plotRange = self.plotRange;
	    var defs = self.defs;
	    var dim = type === 'row' ? 'y' : 'x';
	    var facetTitle = self.facetTitle;
	    var titleOffset = facetTitle.titleOffset;
	    var titleCfg = dim === 'x' ? facetTitle.colDimTitle : facetTitle.rowDimTitle;
	
	    var title = defs[field] && defs[field].alias || field;
	    var point = {};
	    if (dim === 'x') {
	      point = {
	        y: plotRange.tl.y + (titleOffset + 40) * -1,
	        x: (plotRange.tr.x - plotRange.tl.x) / 2 + plotRange.tl.x
	      };
	    } else {
	      point = {
	        x: plotRange.tr.x + (titleOffset + 40),
	        y: (plotRange.br.y - plotRange.tr.y) / 2 + plotRange.tr.y
	      };
	    }
	
	    title = Util.mix({
	      text: title,
	      x: point.x,
	      y: point.y
	    }, titleCfg.title);
	
	    group.addShape('Text', {
	      attrs: title
	    });
	  }
	});
	
	module.exports = Facets;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分面
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	/**
	 * @class Chart.Facet
	 * @param {Object} cfg 分面
	 */
	var Facet = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	
	Util.augment(Facet, {
	  /**
	   * 按照x轴进行分面的值
	   * @type {*}
	   */
	  xValue: null,
	  /**
	   * 按照y轴进行分面的值
	   * @type {*}
	   */
	  yValue: null,
	  /**
	   * 分面的起始、结束位置
	   * @type {Object}
	   */
	  region: null,
	  /**
	   * 分面对应的数据集合
	   * @type {DataFrame}
	   */
	  frame: null
	});
	
	module.exports = Facet;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分面的基类
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Base = __webpack_require__(415);
	var Facet = __webpack_require__(416);
	
	/**
	 * @class Chart.Facets
	 * 用于生成分面的类
	 */
	var Facets = function(cfg) {
	  Facets.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Facets, Base);
	
	Util.augment(Facets, {
	
	  /**
	   * 分面的字段名列表
	   * @type {Array}
	   */
	  dims: [],
	
	  defs: {}, // 列定义
	  type: 'rect',
	  /**
	   * 画布的绘制区域
	   * @type {Plot.Range}
	   */
	  plotRange: null,
	  /**
	   * 绘制分面的title
	   * @param  {Array} facets 分面集合
	   * @param  {Canvas.Group} group 绘图的层
	   */
	  drawTitles: function(facets, group) {
	    if (facets.length <= 1) { // 仅有一个facet生成title
	      return;
	    }
	    var self = this;
	    var first = facets[0];
	    // 绘制每个的title
	    Util.each(facets, function(facet) {
	      if (facet.cols > 0) { // 多列
	        if (facet.rowIndex === facet.rows - 1) { // 第一行显示标题
	          self.drawFacetTitle('col', facet, group);
	        }
	      }
	      if (facet.rows > 0) { // 多行
	        if (facet.colIndex === facet.cols - 1) { // 最后一列显示标题
	          self.drawFacetTitle('row', facet, group);
	        }
	      }
	    });
	    // 绘制整体title
	    if (first) {
	      if (first.cols > 1) { // 列
	        self.drawDimTitle('col', first.xDim, group);
	      }
	
	      if (first.rows > 1) { // 行
	        self.drawDimTitle('row', first.yDim, group);
	      }
	    }
	  },
	
	  getRegion: function(rows, cols, xIndex, yIndex) {
	    var self = this;
	    var plotRange = self.plotRange;
	    var margin = rows === 1 && cols === 1 ? 0 : self.margin; // 间距边框
	    var bl = plotRange.bl; // 画布的左下角
	    var tr = plotRange.tr; // 画布的右上角
	
	    var xWidth = (tr.x - bl.x) / cols; // x轴方向的每个分面的偏移
	    var yWidth = (tr.y - bl.y) / rows; // y轴方向的每个分面的偏移
	
	    var start = {
	      x: bl.x + xWidth * xIndex,
	      y: bl.y + yWidth * yIndex - margin
	    };
	
	    var end = {
	      x: start.x + xWidth - margin,
	      y: start.y + yWidth + margin
	    };
	    return {
	      start: start,
	      end: end
	    };
	  },
	
	  /**
	   * 生成分面
	   * @param  {DataFrame} frame 数据集合
	   * @return {Array} 多个分面集合
	   */
	  generateFacets: function(frame) {
	    var self = this;
	    var dims = self.dims;
	    var rst = [];
	    var rows = 1;
	    var cols = 1;
	    var xDim = dims[0];
	    var yDim = dims[1];
	    var xValues = [''];
	    var yValues = [''];
	    if (xDim) {
	      xValues = self.getDimValues(xDim, frame);
	      cols = xValues.length;
	    }
	    if (yDim) {
	      yValues = self.getDimValues(yDim, frame);
	      rows = yValues.length;
	    }
	    var facetIdx = 0; // facet 索引
	
	    // 获取每个维度对应的frame
	    Util.each(xValues, function(xVal, xIndex) {
	      Util.each(yValues, function(yVal, yIndex) {
	        var conditions = [{
	          dim: xDim,
	          value: xVal,
	          values: xValues
	        }, {
	          dim: yDim,
	          value: yVal,
	          values: yValues
	        }];
	        var filter = self.getFilter(conditions);
	        var subFrame = Frame.filter(frame, filter);
	        var facet = new Facet({
	          type: self.type,
	          xValue: xVal,
	          yValue: yVal,
	          xDim: xDim,
	          yDim: yDim,
	          colIndex: xIndex,
	          rowIndex: yIndex,
	          cols: cols,
	          rows: rows,
	          frame: subFrame,
	          region: self.getRegion(rows, cols, xIndex, yIndex),
	          index: facetIdx++
	        });
	        rst.push(facet);
	      });
	    });
	
	    return rst;
	  }
	});
	
	module.exports = Facets;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 单个字段的分面列表，可以换行
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Rect = __webpack_require__(417);
	var Frame = __webpack_require__(270);
	var Facet = __webpack_require__(416);
	
	var List = function(cfg) {
	  List.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(List, Rect);
	
	Util.augment(List, {
	
	  /**
	   * 用于分面的字段，列表的分面仅支持一个字段
	   * @type {Array}
	   */
	  dims: [],
	  /**
	   * 每一行有几个分面，用于计算
	   * @type {Number}
	   */
	  cols: 5,
	
	  /**
	   * 分面的行数，不用指定，通过rows = count/cols 自动计算
	   * @type {[type]}
	   */
	  rows: null,
	  /**
	   * 绘制分面的title
	   * @param  {Array} facets 分面集合
	   * @param  {Canvas.Group} group 绘图的层
	   */
	  drawTitles: function(facets, group) {
	    var self = this;
	    var dims = self.dims;
	
	    Util.each(facets, function(facet) {
	      self.drawFacetTitle('col', facet, group);
	    });
	
	    self.drawDimTitle('col', dims[0], group);
	  },
	  getRegion: function(rows, cols, xIndex, yIndex) {
	    var self = this;
	    var plotRange = self.plotRange;
	    var margin = self.margin; // 间距边框
	    var tl = plotRange.tl; // 画布的左下角
	    var br = plotRange.br; // 画布的右上角
	
	    var xWidth = (br.x - tl.x) / cols; // x轴方向的每个分面的偏移
	    var yWidth = (br.y - tl.y) / rows; // y轴方向的每个分面的偏移
	
	    var start = {
	      x: tl.x + xWidth * xIndex,
	      y: tl.y + yWidth * (yIndex + 1) - margin
	    };
	
	    var end = {
	      x: start.x + xWidth - margin,
	      y: start.y - yWidth + margin
	    };
	
	    return {
	      start: start,
	      end: end
	    };
	  },
	  /**
	   * 生成分面
	   * @param  {DataFrame} frame 数据集合
	   * @return {Array} 多个分面集合
	   */
	  generateFacets: function(frame) {
	    var self = this;
	    var dims = self.dims;
	    var xDim = dims[0];
	    if (!xDim) {
	      throw new Error('Please specify for the field for facet!');
	    }
	    var xValues = self.getDimValues(xDim, frame);
	    var count = xValues.length;
	    var cols = self.cols;
	    var rows = parseInt((count + cols - 1) / cols, 10);
	    var rst = [];
	    var facetIdx = 0; // facet 索引
	    Util.each(xValues, function(xVal, index) {
	      var row = parseInt(index / cols, 10);
	      var col = index % cols;
	      var conditions = [{
	        dim: xDim,
	        value: xVal,
	        values: xValues
	      }];
	      var filter = self.getFilter(conditions);
	      var subFrame = Frame.filter(frame, filter);
	      var facet = new Facet({
	        type: self.type,
	        count: count,
	        xValue: xVal,
	        xDim: xDim,
	        yValue: xVal,
	        yDim: xDim,
	        colIndex: col,
	        rowIndex: row,
	        cols: cols,
	        rows: rows,
	        frame: subFrame,
	        region: self.getRegion(rows, cols, col, row),
	        index: facetIdx++
	      });
	      rst.push(facet);
	    });
	    return rst;
	  }
	});
	
	
	module.exports = List;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 圆形排布的分面
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(415);
	var Frame = __webpack_require__(270);
	var Facet = __webpack_require__(416);
	
	
	function getPoint(center, r, angle) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}
	
	/**
	 * @class Facets.Circle
	 * According to the circular distribution facets
	 */
	var Circle = function(cfg) {
	  Circle.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Circle, Base);
	Util.augment(Circle, {
	  // get the distribution region
	  getRegion: function(count, index) {
	    var self = this;
	    var plotRange = self.plotRange;
	    var r = Math.min(plotRange.getWidth(), plotRange.getHeight()) / 2; // 画布半径
	    var avgAngle = Math.PI * 2 / count;
	    var angle = -1 * Math.PI / 2 + avgAngle * index; // 当前分面所在的弧度
	    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));
	    var center = self.getCenter(); // 画布圆心
	
	    var middle = getPoint(center, r - facetR, angle); // 分面的中心点
	
	    return self.getFacetRegion(middle, facetR);
	  },
	  // get one facet's start and end
	  getFacetRegion: function(center, r) {
	    var startAngle = Math.PI * 3 / 4;
	    var endAngle = Math.PI * -1 * 1 / 4;
	    return {
	      start: getPoint(center, r, startAngle),
	      end: getPoint(center, r, endAngle)
	    };
	  },
	  // get the center of canvas
	  getCenter: function() {
	    var self = this;
	    var plotRange = self.plotRange;
	    var tl = plotRange.tl;
	    var width = plotRange.getWidth();
	    var height = plotRange.getHeight();
	
	    var center = {
	      x: tl.x + width / 2,
	      y: tl.y + height / 2
	    };
	
	    return center;
	  },
	  /**
	   * 生成分面
	   * @param  {DataFrame} frame 数据集合
	   * @return {Array} 多个分面集合
	   */
	  generateFacets: function(frame) {
	    var self = this;
	    var dims = self.dims;
	    var dim = dims[0];
	    if (!dim) {
	      throw new Error('Please specify for the field for facet!');
	    }
	    var values = self.getDimValues(dim, frame);
	    var count = values.length;
	    var rst = [];
	    var facetIdx = 0; // facet 索引
	    Util.each(values, function(value, index) {
	      var conditions = [{
	        dim: dim,
	        value: value,
	        values: values
	      }];
	      var filter = self.getFilter(conditions);
	      var subFrame = Frame.filter(frame, filter);
	      var facet = new Facet({
	        type: self.type,
	        xValue: value,
	        xDim: dim,
	        colIndex: index,
	        cols: count,
	        rows: 1,
	        rowIndex: 0,
	        frame: subFrame,
	        region: self.getRegion(count, index),
	        index: facetIdx++
	      });
	      rst.push(facet);
	    });
	    return rst;
	  }
	});
	
	module.exports = Circle;


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 树形分布的分面
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var Base = __webpack_require__(415);
	var Frame = __webpack_require__(270);
	var Facet = __webpack_require__(416);
	
	/**
	 * @class Facets.Tree
	 * According to the distribution of tree faceted
	 */
	var Tree = function(cfg) {
	  Tree.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Tree, Base);
	
	Util.augment(Tree, {
	  // showRoot: true,
	  rootTitle: '',
	  /**
	   * the line link facet and it's parent
	   * @type {Object}
	   */
	  line: {
	    stroke: 'red'
	  },
	  /**
	   * 是否使用曲线连接
	   * @type {Boolean}
	   */
	  smooth: false,
	  /**
	   * 生成分面
	   * @param  {DataFrame} frame 数据集合
	   * @return {Array} 多个分面集合
	   */
	  generateFacets: function(frame) {
	    var self = this;
	    var dims = self.dims;
	    if (!dims.length) {
	      throw new Error('Please specify for the fields for facet!');
	    }
	    var rst = [];
	    var root = self.getRootFacet(frame);
	    // if (self.showRoot) {
	    rst.push(root);
	    // }
	    root.children = self.getChildFacets(frame, 1, rst);
	    self.setRegion(rst);
	    return rst;
	  },
	  // get rows of facets
	  getRows: function() {
	    return this.dims.length + 1;
	  },
	  drawTitles: function(facets, group) {
	    var self = this;
	
	    self.drawLines(facets, group);
	    Util.each(facets, function(facet) {
	      self.drawFacetTitle('col', facet, group);
	    });
	
	    // self.drawDimTitle('col',dims[0],group);
	  },
	  drawLines: function(facets, group) {
	    var self = this;
	    var lineGroup = group.addGroup();
	    Util.each(facets, function(facet) {
	      if (!self.isLeaf(facet)) {
	        var children = facet.children;
	        self._addFacetLines(facet, children, lineGroup);
	      }
	    });
	  },
	  // add lines with it's children
	  _addFacetLines: function(facet, children, group) {
	    var self = this;
	    var region = facet.region;
	    var start = {
	      x: region.start.x + (region.end.x - region.start.x) / 2,
	      y: region.start.y
	    };
	
	    Util.each(children, function(subFacet) {
	      var subRegion = subFacet.region;
	      var end = {
	        x: subRegion.start.x + (subRegion.end.x - subRegion.start.x) / 2,
	        y: subRegion.end.y
	      };
	      var middle1 = {
	        x: start.x,
	        y: start.y + (end.y - start.y) / 2
	      };
	      var middle2 = {
	        x: end.x,
	        y: middle1.y
	      };
	      self._drawLine([start, middle1, middle2, end], group);
	    });
	  },
	  _getPath: function(points) {
	    var self = this;
	    var path = '';
	    var smooth = self.smooth;
	    if (smooth) {
	      var tmp = [];
	      tmp.push(['M', points[0].x, points[0].y]);
	      tmp.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);
	      path = tmp.join(' ');
	    } else {
	      Util.each(points, function(point, index) {
	        var str = index === 0 ? 'M {x} {y}' : 'L {x} {y}';
	        path += Util.substitute(str, point);
	      });
	    }
	
	    return path;
	  },
	  // draw line width points
	  _drawLine: function(points, group) {
	    var self = this;
	    var path = self._getPath(points);
	    var line = self.line;
	    group.addShape('Path', {
	      attrs: Util.mix({
	        path: path
	      }, line)
	    });
	  },
	  // the root
	  getRootFacet: function(frame) {
	    var self = this;
	    var facet = new Facet({
	      type: self.type,
	      rows: self.getRows(),
	      rowIndex: 0,
	      colIndex: 0,
	      xValue: self.rootTitle,
	      frame: frame,
	      index: 0
	    });
	    return facet;
	  },
	  // get child
	  getChildFacets: function(frame, level, arr) {
	    var self = this;
	    var rst = [];
	    var dims = self.dims;
	    var length = dims.length;
	    if (length < level) {
	      return [];
	    }
	    var dim = dims[level - 1];
	    var values = self.getDimValues(dim, frame);
	    Util.each(values, function(value, index) {
	      var conditions = [{
	        dim: dim,
	        value: value,
	        values: values
	      }];
	      var filter = self.getFilter(conditions);
	      var subFrame = Frame.filter(frame, filter);
	      if (subFrame.rowCount()) {
	        var facet = new Facet({
	          type: self.type,
	          xValue: value,
	          xDim: dim,
	          colIndex: index,
	          rows: self.getRows(),
	          rowIndex: level,
	          frame: subFrame,
	          children: self.getChildFacets(subFrame, level + 1, arr),
	          index: arr.length
	        });
	        rst.push(facet);
	        arr.push(facet);
	      }
	    });
	    return rst;
	  },
	  // get facet use level
	  getFacetsByLevel: function(facets, level) {
	    var rst = [];
	    Util.each(facets, function(facet) {
	      if (facet.rowIndex === level) {
	        rst.push(facet);
	      }
	    });
	    return rst;
	  },
	  getRegion: function(rows, cols, xIndex, yIndex) {
	    var self = this;
	    var plotRange = self.plotRange;
	    var margin = self.margin; // 间距边框
	    var bl = plotRange.bl; // 画布的左下角
	    var tr = plotRange.tr; // 画布的右上角
	
	    var xWidth = (tr.x - bl.x) / cols; // x轴方向的每个分面的偏移
	    var yWidth = (tr.y - bl.y) / rows; // y轴方向的每个分面的偏移
	
	    var start = {
	      x: bl.x + xWidth * xIndex + margin,
	      y: bl.y + yWidth * yIndex - margin
	    };
	
	    var end = {
	      x: start.x + xWidth - margin,
	      y: start.y + yWidth * 2 / 3 + margin // 预留1/3的空隙，方便添加连接线
	    };
	    return {
	      start: start,
	      end: end
	    };
	  },
	  // if the facet has children , make it's column index in the middle of it's children
	  getRegionIndex: function(children) {
	    var first = children[0];
	    var last = children[children.length - 1];
	    return (last.colIndex - first.colIndex) / 2 + first.colIndex;
	  },
	  // set facets region
	  setRegion: function(facets) {
	    var self = this;
	    self.forceColIndex(facets);
	
	    Util.each(facets, function(facet) {
	      facet.region = self.getRegion(facet.rows, facet.cols, facet.colIndex, facet.rows - facet.rowIndex - 1);
	    });
	  },
	  // is  a leaf without children
	  isLeaf: function(facet) {
	    return !facet.children || !facet.children.length;
	  },
	  // set column index of facets
	  forceColIndex: function(facets) {
	    var self = this;
	    var leafs = [];
	    var index = 0;
	    Util.each(facets, function(facet) {
	      if (self.isLeaf(facet)) {
	        leafs.push(facet);
	        facet.colIndex = index;
	        index++;
	      }
	    });
	
	    Util.each(leafs, function(facet) {
	      facet.cols = leafs.length;
	    });
	    var maxLevel = self.dims.length;
	    for (var i = maxLevel - 1; i >= 0; i--) {
	      var levelFacets = self.getFacetsByLevel(facets, i);
	      // var yIndex = maxLevel - i;
	      for (var j = 0; j < levelFacets.length; j++) {
	        var facet = levelFacets[j];
	        if (!self.isLeaf(facet)) {
	          facet.originColIndex = facet.colIndex;
	          facet.colIndex = self.getRegionIndex(facet.children);
	          facet.cols = leafs.length;
	        }
	      }
	    }
	  }
	
	
	});
	
	module.exports = Tree;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview mirror facet
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var List = __webpack_require__(418);
	
	var Mirror = function(cfg) {
	  Mirror.superclass.constructor.call(this, cfg);
	  this._init();
	};
	
	Util.extend(Mirror, List);
	
	Util.augment(Mirror, {
	  type: 'mirror',
	  transpose: false,
	  /**
	   * 绘制分面的title
	   * @param  {Array} facets 分面集合
	   * @param  {Canvas.Group} group 绘图的层
	   */
	  drawTitles: function(facets, group) {
	    var self = this;
	    var dims = self.dims;
	    var titleType = self.transpose ? 'col' : 'row';
	    Util.each(facets, function(facet) {
	      self.drawFacetTitle(titleType, facet, group);
	    });
	
	    self.drawDimTitle(titleType, dims[0], group);
	  },
	  _init: function() {
	    var self = this;
	    var dims = self.dims;
	    var xDim = dims[0];
	    if (!xDim) {
	      throw new Error('Please specify for the field for facet!');
	    }
	
	    if (self.transpose) {
	      self.cols = 2;
	      self.rows = 1;
	    } else {
	      self.cols = 1;
	      self.rows = 2;
	    }
	  },
	  getRegion: function(rows, cols, xIndex, yIndex) {
	    var self = this;
	    var plotRange = self.plotRange;
	    var margin = self.margin; // 间距边框
	    var tl = plotRange.tl; // 画布的左下角
	    var br = plotRange.br; // 画布的右上角
	    var xWidth;
	    var yWidth;
	    if (cols > 1) {
	      xWidth = (br.x - tl.x - margin) / cols;
	      yWidth = (br.y - tl.y);
	    } else {
	      xWidth = br.x - tl.x;
	      yWidth = (br.y - tl.y - margin) / rows;
	    }
	
	    var start = {
	      x: tl.x + xWidth * xIndex + xIndex * (margin),
	      y: tl.y + yWidth * (yIndex + 1) + (margin) * yIndex
	    };
	
	    var end = {
	      x: start.x + xWidth,
	      y: start.y - yWidth
	    };
	
	    return {
	      start: start,
	      end: end
	    };
	  }
	});
	
	module.exports = Mirror;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	var Stat = __webpack_require__(423);
	
	Stat.summary = __webpack_require__(424);
	Stat.bin = __webpack_require__(439);
	Stat.smooth = __webpack_require__(447);
	Stat.density = __webpack_require__(465);
	Stat.region = __webpack_require__(469);
	
	var Frame = __webpack_require__(270);
	
	// 增加执行统计函数的代码
	Frame.execStat = function(frame,stat){
	  stat.init();
	  var rst = stat.exec([frame]);
	  return Frame.merge.apply(null,rst);
	};
	
	module.exports = Stat;


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 统计基类
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	
	/**
	 * @class Stat
	 * 处理度量的统计函数
	 */
	var Stat = function (cfg) {
	  Util.mix(this,cfg);
	};
	
	Util.augment(Stat,{
	  /**
	   * 是否是统计对象
	   * @type {Boolean}
	   */
	  isStat: true,
	  initDims: function(/*dims*/){
	    
	  },
	  /**
	   * 统计对象关联的字段
	   * @return {Array} 关联字段
	   */
	  getDims: function(){
	    return this.dims;
	  },
	  getStatDims: function(){
	    return this.getDims();
	  },
	  /**
	   * 初始化统计对象
	   * @chainable
	   */
	  init: function(){
	    var self = this;
	    var dims = self.dims;
	
	    // 划分dims，当前版本仅支持 cross : 'x*y'
	    if (Util.isString(dims)) {
	      dims = dims.split('*');
	      self.dims = dims;
	    }
	    // 嵌套统计函数
	    if (dims && dims.isStat){
	      var nstat = dims;
	      nstat.init();
	      self.stat = nstat;
	      dims = nstat.dims;
	      self.dims = dims;
	    }
	
	    if (!dims) {
	      dims = [];
	      self.dims = dims;
	    }
	    self.initDims(dims);
	  },
	  /**
	   * @protected
	   * some thing to do before stat exec
	   */
	  preExecute: function(/*frames*/){
	
	  },
	  /**
	   * Perform statistical transform
	   * @param  {Array} frames A collection of data frame
	   * @return {Array} The transform of collection
	   */
	  exec: function(frames){
	    var self = this;
	    self.preExecute(frames);
	    var rst = [];
	    if (this.stat) {
	      frames = this.stat.exec(frames);
	    }
	    Util.each(frames,function (frame) {
	      var execResult = self.execFrame(frame,frames);
	      if (Util.isArray(execResult)) {
	        rst = rst.concat(execResult);
	      } else {
	        rst.push(execResult);
	      }
	    });
	    return rst;
	  },
	  /**
	   * Execute each Frame
	   * @protected
	   * @param  {DataFrame} frame data frame for translate
	   * @return {DataFrame}
	   */
	  execFrame: function (frame/*,frames*/) {
	    return frame;
	  }
	});
	
	module.exports = Stat;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Summary = {
		count: __webpack_require__(425),
		max: __webpack_require__(427),
		min: __webpack_require__(428),
		mean: __webpack_require__(429),
	  median: __webpack_require__(430),
		proportion: __webpack_require__(431),
		range: __webpack_require__(433),
	  percent: __webpack_require__(434),
	  sd: __webpack_require__(435),
	  mode: __webpack_require__(436),
	  sum: __webpack_require__(437),
	  cumulative : __webpack_require__(438)
	};
	
	module.exports = Summary;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The count of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Count = function(dims){
	
	  return new Summary({
	    dims : dims,
	    initDims: function(dims){
	      dims.push('..count');
	    },
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = frame.rowCount();
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Count;


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview summary base
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Stat = __webpack_require__(423);
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	
	/**
	 * @class Stat.Summary
	 * The Base Class of statist summary
	 */
	var Summary = function  (cfg) {
	  Summary.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Summary,Stat);
	
	Util.augment(Summary,{
	  type: 'summary',
	  // override get all scales which through the statistical transformation
	  getStatDims: function(){
	    var self = this;
	    var dims = self.getDims();
	    var length = dims.length;
	    var rst = [dims[length - 1]];
	    return rst;
	  },
	  // 获取分组的条件
	  getGroupCondition: function(){
	    var self = this;
	    var dims = self.getDims();
	    var length = dims.length;
	    var condition;
	    var temp = [];
	
	    if (length > 1) {
	      temp = dims.slice(0,length - 1);
	      condition = [];
	    }
	    Util.each(temp,function(dim){
	      if (dim.indexOf('..') !== 0) { // 其他统计结果生成的字段不参与分组
	        condition.push(dim);
	      }
	    });
	    return condition;
	  },
	  // group frame
	  groupFrames: function(frame){
	    var self = this;
	    var group;
	    var condition = self.getGroupCondition();
	    if (condition) {
	      group = Frame.group(frame,condition);
	    } else {
	      group = [frame];
	    }
	    return group;
	  },
	  // transform the collection of frames,whitch groupd by dims
	  transformGroup: function(group,dim){
	    var self = this;
	
	    var arr = [];
	    //分组进行统计
	    Util.each(group,function(sub){
	      arr.push(self.transform(sub,dim));
	    });
	    return arr;
	  },
	  // override
	  execFrame: function(frame){
	    var self = this;
	    var dim = self.getStatDims()[0];
	    var group = self.groupFrames(frame);
	    var arr = self.transformGroup(group,dim);
	    //统计完成的数据进行合并
	    var mergeFrame = Frame.merge.apply(null,arr);
	    return mergeFrame;
	  },
	  /**
	   * @protected
	   * transform the data frame
	   * @param  {DataFrame} frame data frame
	   * @param  {String} dim  column name of the frame
	   * @return {DataFrame} frame
	   */
	  transform: function (frame/*,dim*/) {
	    return frame;
	  }
	});
	
	
	module.exports = Summary;


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The max of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Max = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.max(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Max;


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The min of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Min = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.min(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Min;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The mean of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Mean = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.mean(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Mean;


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The median of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Median = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.median(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Median;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The proportion of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	var Mixin = __webpack_require__(432);
	
	var Proportion = function(dims){
	  return new Summary(Util.mix({
	    dims : dims,
	    initDims: function(dims){
	      dims.push('..proportion');
	    },
	    transform : function(frame,name,totalFrame){
	      var percent = frame.rowCount() / totalFrame.rowCount();
	      var obj = frame.rowObject(0);
	      obj[name] = percent;
	      return new Frame([obj]);
	    }
	  },Mixin));
	};
	
	module.exports = Proportion;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算比例的通用类
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	
	module.exports = {
	  exec: function(frames){
	    var self = this;
	    self.preExecute(frames);
	    if (this.stat) {
	      frames = this.stat.exec(frames);
	    }
	    var rst = [];
	    var totalFrame = Frame.merge.apply(null,frames);
	    var condition = self.getGroupCondition();
	    var totalGroup = Frame.groupToMap(totalFrame,condition);
	
	    if (frames.length > 1) {
	      Util.each(frames,function(frame){
	        var sub = self.execFrame(frame,totalGroup);
	        rst.push(sub);
	      });
	    }else{
	      var sub = self.execFrame(frames[0]);
	      rst.push(sub);
	    }
	    return rst;
	  },
	  execFrame: function(frame,totalGroup){
	    var self = this;
	    var condition = self.getGroupCondition();
	    var groups = Frame.groupToMap(frame,condition);
	    var rst = [];
	    var dim = self.getStatDims()[0];
	
	    Util.each(groups,function(sub,key){
	      var totalFrame = totalGroup ? totalGroup[key] : frame;
	      var tmp = self.transform(sub,dim,totalFrame);
	      rst.push(tmp);
	    });
	    return Frame.merge.apply(null,rst);
	  }
	};


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The range of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var RangeStat = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.max(frame,name) - Frame.min(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = RangeStat;


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算累加值的比例
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	var Mixin = __webpack_require__(432);
	var STR_PERCENT = '..percent';
	
	var Percent = function(dims){
	  return new Summary(Util.mix({
	    dims : dims,
	    initDims: function(dims){
	      var lastDim = dims[dims.length - 1];
	      //dims.push('..percent');
	      dims.splice(dims.length - 1,0,STR_PERCENT); // 将percent放置到倒数第二个
	      this.percetDim = lastDim;
	    },
	    getStatDims: function(){
	      return [STR_PERCENT];
	    },
	    transform : function(frame,name,totalFrame){
	      name = this.percetDim;
	
	      var sum = Frame.sum(frame,name);
	      var totalSum = Frame.sum(totalFrame,name);
	      var obj = frame.rowObject(0);
	
	      obj['..percent'] = sum / totalSum;
	      // obj[name] = totalSum;
	      obj[name] = sum;
	
	      return new Frame([obj]);
	    }
	  },Mixin));
	};
	
	module.exports = Percent;


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The standard deviation of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var SD = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.standard_deviation(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = SD;


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The mode of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Mode = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.mode(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Mode;


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The sum of statistical data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	
	var Sum = function(dims){
	  return new Summary({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.sum(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Sum;


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 累计统计函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Summary = __webpack_require__(426);
	var Frame = __webpack_require__(270);
	var Util = __webpack_require__(169);
	
	var Cumulative = function (dims) {
	
	  return new Summary({
	    dims : dims,
	    getStatDims: function(){
	      var stat = this.stat;
	      if (stat) {
	        return stat.getStatDims();
	      }
	      var dims = this.getDims();
	      var length = dims.length;
	      var rst = [dims[length - 1]];
	      return rst;
	    },
	    execFrame: function(frame){
	      var statDims = this.getStatDims();
	      var dim = statDims[statDims.length - 1];
	
	      var sortDim = this.getDims()[0];
	      if (sortDim && sortDim !== dim) {
	       frame = Frame.sort(frame,sortDim);
	      }
	      var stat = this.stat;
	      var arr = [];
	      if (stat && stat.type === 'density') {
	        var h = stat.getWindowWidth(frame,sortDim);
	        var tmpArr = frame.colArray(dim);
	        var cum = 0;
	        Util.each(tmpArr,function(val){
	          cum += val * h;
	          arr.push(cum);
	        });
	      }else {
	        arr = Frame.cumulative(frame,dim);
	      }
	      frame.colReplace(dim,arr);
	      return frame;
	    }
	
	  });
	};
	
	module.exports = Cumulative;


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	var Bin = {
	  dot: __webpack_require__(440),
	  rect: __webpack_require__(442),
	  // tri: require('./tri'),
	  hex: __webpack_require__(443),
	  quantile: __webpack_require__(444)
	};
	
	module.exports = Bin;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the method of partitions a space with point
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	
	var Bin = __webpack_require__(441);
	
	var Dot = function(dims,binWidth){
	  return new Bin({
	    dims: dims,
	    binWidth: binWidth
	  });
	};
	
	module.exports = Dot;


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview bin base
	 * @author dxq613@gmail.com
	 */
	"use strict";
	
	var Util = __webpack_require__(169);
	var Stat = __webpack_require__(423);
	var Frame = __webpack_require__(270);
	
	
	/**
	 * @class Stat.Bin
	 * The bin methods partition a space
	 * @extends {Stat}
	 */
	var Bin = function  (cfg) {
	  Bin.superclass.constructor.call(this, cfg);
	  this.colRange = {};
	  if (!this.binWidth) {
	    this.binWidth = 0.03;
	  }
	};
	
	Util.extend(Bin,Stat);
	
	Util.augment(Bin,{
	  type: 'bin',
	
	  binWidth: 0.03,
	  /**
	   * 列的范围的定义
	   * @type {Object}
	   */
	  colRange: {},
	
	  /**
	   * 可以设定参与bin的字段，如果未设置，则直接对所有字段进行
	   * @type {Array}
	   */
	  binDims: null,
	
	  /**
	   * 设置字段的范围
	   * @param {String} dim  字段
	   * @param {Array} range 最小值、最大值
	   */
	  setRange: function(dim,range){
	    this.colRange[dim] = range;
	  },
	  // override
	  getStatDims: function(){
	    return this.getDims();
	  },
	  getBinDims: function(){
	    var dims = this.binDims || this.getDims();
	    var rst = [];
	    Util.each(dims, function(dim) { // 统计生成的变量，不在参加bin统计
	      if (dim.indexOf('..') === -1) {
	        rst.push(dim);
	      }
	    });
	    return rst;
	  },
	  /**
	   * get the bin width of the stat
	   * @return {Number} bin width
	   */
	  getBinWidth: function(){
	    return this.binWidth || 0.03;
	  },
	  // 获取在一个binWidth 范围内的中心点
	  getCenterValue: function(value,max,min){
	    var binWidth = this.getBinWidth();
	    var percent = (value - min) / (max - min);
	    var rst;
	    if (percent === 1){ // 临界值处理,保证最大值落在0-1之间
	      percent = percent - binWidth/4;
	    }
	    rst = (max - min) * (Math.floor(percent / binWidth) * binWidth + binWidth/2) + min;
	    return rst;
	  },
	  // parse to bin
	  toBin: function(obj){
	    var self = this;
	    var dims = self.getBinDims();
	    for (var i = 0; i < dims.length; i++) {
	      var dim = dims[i];
	      var value = obj[dim];
	      var range = self.getDimRange(dim);
	      obj[dim] = self.getCenterValue(value,range.max,range.min);
	    }
	  },
	  // get dim range,max and min
	  getDimRange: function(dim){
	    var self = this;
	    var cacheRange = self.cacheRange;
	    return cacheRange[dim] || {min:0,max:0};
	  },
	  // override, to calculate the range of dims
	  preExecute: function(frames){
	    var self = this;
	    var mergeFrame = Frame.merge.apply(null,frames);
	    var dims = self.getStatDims();
	    var colRange = self.colRange;
	    var cacheRange = {};
	
	    Util.each(dims,function(dim){
	      if (colRange[dim]){
	        cacheRange[dim] = colRange[dim];
	      }else{
	        var range = Frame.range(mergeFrame,dim);
	        cacheRange[dim] = {
	          min: range[0],
	          max: range[1]
	        };
	      }
	    });
	    self.cacheRange = cacheRange;
	  },
	  execFrame: function(frame){
	    var self = this;
	    var data = frame.toJSON();
	    //var names = self.getDims();
	    Util.each(data,function(obj){
	      self.toBin(obj);
	    });
	    //var newFrame = new Frame(data);
	    //return Frame.group(newFrame,names);
	    return new Frame(data);
	  },
	
	  /**
	   * @protected
	   * get the region in the scale,the percent of the dimension
	   * @return {Object} get the region of bin
	   */
	  getRegion: function(){
	    return [{
	      x: 0,
	      y: 0
	    }];
	  }
	});
	
	module.exports = Bin;


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The rect binning method partitions a space with equally spaced cutpoints
	 * @author dxq613@gmail.com
	 * 4-3
	 * | |
	 * 1-2
	 */
	
	"use strict";
	
	var Bin = __webpack_require__(441);
	
	var Rect = function(dims, binWidth) {
	  return new Bin({
	    dims: dims,
	    binWidth: binWidth,
	    // parse to bin
	    toBin: function(obj) {
	      var self = this;
	      var dims = self.getBinDims();
	      //var binWidth = self.getBinWidth();
	      if (dims.length < 1) { // 仅支持1，2维
	        throw 'the bin.rect method support for minimum one dimension!';
	      }
	      if (dims.length === 1) { // 只处理一维的情况
	        var dim = dims[0];
	        obj[dim] = self._getValueRange(dim, obj[dim]);
	      } else {
	        var dimX = dims[0];
	        var dimY = dims[1]; // 为了便于理解，所以使用x,y
	        var xValueRange = self._getValueRange(dimX, obj[dimX]);
	        var yValueRange = self._getValueRange(dimY, obj[dimY]);
	        obj[dimX] = [xValueRange[0], xValueRange[0], xValueRange[1], xValueRange[1]];
	        obj[dimY] = [yValueRange[0], yValueRange[1], yValueRange[1], yValueRange[0]];
	      }
	    },
	    _getValueRange: function(dim, value) {
	      var self = this;
	      var binWidth = self.binWidth;
	      var range = self.getDimRange(dim);
	      var spread = range.max - range.min;
	      var center = self.getCenterValue(value, range.max, range.min);
	      return [center - spread * binWidth * 1 / 2, center + spread * binWidth * 1 / 2];
	    }
	  });
	};
	
	module.exports = Rect;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The hex binning method partitions a space with equally spaced cutpoints
	 *  __
	 * /  \
	 * \  /
	 *  --
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	
	"use strict";
	
	var Bin = __webpack_require__(441);
	var Util = __webpack_require__(169);
	//
	function getXOffset(arr, binWidth, ratio) {
	  var rst = [];
	  Util.each(arr, function(value) {
	    rst.push(value * binWidth * ratio / 2);
	  });
	  return rst;
	}
	
	function getYOffset(arr, binWidth) {
	  var rst = [];
	  Util.each(arr, function(value) {
	    rst.push(value * binWidth / 2);
	  });
	  return rst;
	}
	
	var Hex = function(dims, binWidth, ratio) {
	
	  return new Bin({
	    /**
	     * the ratio of width and height,change this parameter to make a regular hexagon
	     * @type {Number}
	     */
	    ratio: ratio || 0.5,
	
	    dims: dims,
	
	    binWidth: binWidth || 0.03,
	
	    _getDimVaues: function(value, dim, offsetArr) {
	      var self = this;
	      var range = self.getDimRange(dim);
	      var spread = range.max - range.min;
	      var rst = [];
	      Util.each(offsetArr, function(offset) {
	        rst.push(value + spread * offset);
	      });
	      return rst;
	    },
	    /**
	     * find the center point of a hexagon which contain the input point
	     * @param  {Object} obj the coordinate of input point
	     */
	    toBin: function(obj) {
	      var self = this;
	      var dims = self.getBinDims();
	      if (dims < 2) {
	        throw 'the bin.rect method only support 2 dimenssion!';
	      }
	      var xDim = dims[0];
	      var yDim = dims[1];
	      var binWidth = self.binWidth;
	      var ratio = self.ratio;
	      var centerPoint = self._center([obj[xDim], obj[yDim]]);
	      var xOffsetArray = getXOffset([-0.5, -1.5, -0.5, 0.5, 1.5, 0.5], binWidth, ratio);
	      var yOffsetArray = getYOffset([-1, 0, 1, 1, 0, -1],binWidth);
	      obj[xDim] = self._getDimVaues(centerPoint[0], xDim, xOffsetArray);
	      obj[yDim] = self._getDimVaues(centerPoint[1], yDim, yOffsetArray);
	    },
	    // 根据点和单位，求中心点
	    _center: function(point) {
	      var self = this;
	      var binWidth = self.binWidth;
	      var dims = self.getBinDims();
	      var xDim = dims[0];
	      var xRange = self.getDimRange(xDim);
	      var xUnit = binWidth * (xRange.max - xRange.min) / 2;
	      var yDim = dims[1];
	      var yRange = self.getDimRange(yDim);
	      var yUnit = binWidth * (yRange.max - yRange.min) / 2;
	      var ratio = self.ratio;
	
	      var _center;
	      var _point;
	      var _tempCenter;
	      // 根据倍数处理坐标，对unit的数字和字符串类型做容错
	      _point = [point[0] / (xUnit * ratio), point[1] / yUnit];
	      _tempCenter = self._centerForBasis(_point);
	      _center = [_tempCenter[0] * xUnit, _tempCenter[1] * yUnit];
	
	      return _center;
	    },
	    // 返回奇数
	    _chkOdd: function(num) {
	      var _num = parseInt(num);
	      return _num ? _num % 2 ? true : false : "0";
	    },
	
	    // 计算点相邻的X轴范围
	    _aroundX: function(num) {
	      var self = this;
	      var scope;
	      var pointX1, pointX2;
	      // 边界处理
	      num = num < 1 ? 1 : num;
	
	      if (self._chkOdd(num)) {
	        // 如果入参是奇数,可以直接确认中心点横坐标
	        pointX1 = pointX2 = parseInt(num) + 0.5;
	      } else if (num % 2 === 0) {
	        // 如果入参是偶数正整数,可以直接确认中心点横坐标
	        pointX1 = pointX2 = parseInt(num) - 0.5;
	      } else {
	        // 如果是偶数，返回中心店横坐标范围
	        pointX1 = parseInt(num) - 0.5;
	        pointX2 = pointX1 + 2;
	      }
	      scope = [pointX1, pointX2];
	      return scope;
	    },
	
	    // 计算点相邻的Y轴范围
	    _aroundY: function(num) {
	      var scope;
	      var pointY1, pointY2;
	      // 边界处理
	      num = num < 1 ? 1 : num;
	      pointY1 = parseInt(num);
	      pointY2 = pointY1 + 1;
	      scope = [pointY1, pointY2];
	      return scope;
	    },
	
	    _shortPoint: function(xScope, yScope, point) {
	      var self = this;
	      var center1, center2;
	      var position = ((xScope[1] - 0.5) % 4);
	      if (position === 1) {
	        if (self._chkOdd(yScope[1])) {
	          center1 = [xScope[0], yScope[0]];
	          center2 = [xScope[1], yScope[1]];
	        } else {
	          center1 = [xScope[1], yScope[0]];
	          center2 = [xScope[0], yScope[1]];
	        }
	      } else {
	        if (self._chkOdd(yScope[0])) {
	          center1 = [xScope[0], yScope[0]];
	          center2 = [xScope[1], yScope[1]];
	        } else {
	          center1 = [xScope[1], yScope[0]];
	          center2 = [xScope[0], yScope[1]];
	        }
	      }
	
	      var n1 = Math.abs(point[0] - center1[0]) + Math.abs(point[1] - center1[1]);
	      var n2 = Math.abs(point[0] - center2[0]) + Math.abs(point[1] - center2[1]);
	
	      // 如果目标点到两中心点距离相等，取X轴小的为中心点,否则取离目标点近的点为中心
	      if (n1 === n2) {
	        if (center1[0] < center2[0]) {
	          return center1;
	        } else {
	          return center2;
	        }
	      } else if (n1 < n2) {
	        return center1;
	      } else {
	        return center2;
	      }
	
	    },
	
	    _centerForBasis: function(point) {
	      var self = this;
	      // 输入点坐标，返回所在六边形中心点和六个顶点
	      var center;
	      var yScope;
	      var xScope = self._aroundX(point[0]);
	      var x, y;
	      var ratio = self.ratio;
	
	      if (xScope[0] === xScope[1]) {
	        // 如果中心点X轴已经可以确认，开始计算Y轴所属范围
	        x = xScope[0];
	        if (x > 2 && self._chkOdd(x / 2)) {
	          // 如果x在3,7,11……数列范围里
	          // 边界处理
	          point[1] = point[1] < 1 ? 1 : point[1];
	
	          if (self._chkOdd(parseInt(point[1]))) {
	            y = parseInt(point[1]) + 1;
	          } else {
	            y = parseInt(point[1]);
	          }
	        } else {
	          // 如果x在1，5，9……数列范围里
	          point[1] = point[1] < 1 ? 1 : point[1];
	          if (self._chkOdd(parseInt(point[1]))) {
	            y = parseInt(point[1]);
	          } else {
	            y = parseInt(point[1]) - 1;
	          }
	        }
	        center = [x, y];
	      } else {
	        // 如果中心点X轴不能确认，开始计算范围
	        // 边界处理
	        point[1] = point[1] < 1 ? 1 : point[1];
	
	        // 计算Y轴的范围
	        yScope = self._aroundY(point[1]);
	        // 根据目标点到周围2个中点的距离求出最短坐标，同等情况下，取XY轴小的点
	        center = self._shortPoint(xScope, yScope, point);
	
	      }
	      center[0] = center[0] * ratio;
	      return center;
	    }
	  });
	};
	
	module.exports = Hex;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	
	var quantile = __webpack_require__(445);
	
	quantile.letter = __webpack_require__(446);
	
	module.exports = quantile;

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分位值计算
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Bin = __webpack_require__(441);
	var Frame = __webpack_require__(270);
	
	/**
	 * @class Stat.Bin.Quantile
	 * 分位数
	 */
	var Quantile = function (cfg) {
	  Quantile.superclass.constructor.call(this,cfg);
	};
	
	Util.extend(Quantile,Bin);
	
	Util.augment(Quantile,{
	  /**
	   * 分位的个数
	   * @type {Number}
	   */
	  fractions: 10,
	  execFrame: function(frame){
	    var self = this;
	    var data = frame.toJSON();
	    //var names = self.getDims();
	    Util.each(data,function(obj){
	      self.toBin(obj);
	    });
	    var nframe = new Frame(data);
	    return self.execQuantile(nframe);
	  },
	  getSplitArray: function(){
	    var self = this;
	    var fractions = self.fractions;
	    var rst = [];
	    var step = 1 / fractions;
	
	    for(var i = 0; i <= 1; i = i + step) {
	      rst.push(i);
	    }
	    return rst;
	  },
	  execQuantile: function(frame){
	    var self = this;
	    var data = [];
	    var dims = self.getDims();
	    var dim = dims[dims.length - 1];
	    var names = dims.slice(0,dims.length - 1); // 取除了第一个之外的字段
	    var groups = Frame.group(frame,names);
	    var splitArray = self.getSplitArray();
	    Util.each(groups,function(sub){
	      var first = sub.rowObject(0);
	      first[dim] = Frame.quantile(sub,dim,splitArray);
	      data.push(first);
	    });
	    return new Frame(data);
	  }
	
	});
	
	module.exports = Quantile;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 四分位
	 * @author dxq613@gmail.com
	 */
	"use strict";
	var Quantile = __webpack_require__(445);
	
	var Letter = function  (dims,binWidth) {
	  return new Quantile({
	    dims: dims,
	    binWidth: binWidth,
	    fractions: 4
	  });
	};
	
	module.exports = Letter;

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Smooth = __webpack_require__(448);
	
	Smooth.mean = __webpack_require__(449);
	Smooth.median = __webpack_require__(451);
	Smooth.linear = __webpack_require__(452);
	Smooth.quadratic = __webpack_require__(457);
	Smooth.cubic = __webpack_require__(458);
	Smooth.log = __webpack_require__(459);
	
	Smooth.pow = __webpack_require__(460);
	Smooth.exp = __webpack_require__(461);
	
	var Loess = __webpack_require__(462);
	
	function getLoess(dims,bandWidth,kernelType) {
		bandWidth = bandWidth || 0.01;
		return new Loess({
			dims: dims,
	    	bandWidth: bandWidth,
	    	kernelType: kernelType
	    });
	}
	
	Smooth.loess = {};
	//use uniform kernel function to local regression
	Smooth.loess.uniform= function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'uniform');
	};
	//use triangular kernel function to local regression
	Smooth.loess.triangular = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'triangular');
	};
	//use epanechnikov kernel function to local regression
	Smooth.loess.epanechnikov = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'epanechnikov');
	};
	//use quartic kernel function to local regression
	Smooth.loess.quartic = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'quartic');
	};
	//use triweight kernel function to local regression
	Smooth.loess.triweight = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'triweight');
	};
	//use tricube kernel function to local regression
	Smooth.loess.tricube = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'tricube');
	};
	//use gaussian kernel function to local regression
	Smooth.loess.gaussian = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'gaussian');
	};
	//use cosine kernel function to local regression
	Smooth.loess.cosine = function  (dims,bandWidth) {
		return getLoess(dims,bandWidth,'cosine');
	};
	
	
	
	module.exports = Smooth;

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 平滑、回归
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Stat = __webpack_require__(423);
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	
	var Smooth = function (cfg) {
	  Smooth.superclass.constructor.call(this,cfg);
	};
	
	Util.extend(Smooth,Stat);
	
	Util.augment(Smooth,{
	  type: 'smooth',
	  /**
	   * 回归线点之间的间距，用于计算出回归曲线后决定x点的
	   * @type {Number}
	   */
	  bandWidth: 0.01,
	
	   /**
	   * 列的范围的定义
	   * @type {Object}
	   */
	  colRange: {},
	
	  /**
	   * 设置字段的范围
	   * @param {String} dim  字段
	   * @param {Array} range 最小值、最大值
	   */
	  setRange: function(dim,range){
	    this.colRange[dim] = range;
	  },
	  getStatDims: function(){
	    var self = this;
	    var dims = self.getDims();
	    var length = dims.length;
	    var rst = [dims[length - 1]];
	    return rst;
	  },
	  execSmooth: function(data){
	    return data;
	  },
	  getXDim: function(){
	    var self = this;
	    var dims = self.getDims();
	    if (dims.length < 2) {
	      throw 'you must support the x,y dimension!!!';
	    }
	    return dims[0];
	  },
	  getYDim: function(){
	    var self = this;
	    var dims = self.getDims();
	    if (dims.length < 2) {
	      throw 'you must support the x,y dimension!!!';
	    }
	    return dims[1];
	  },
	  getZDim:function(){
	    var self = this;
	    var dims = self.getDims();
	    if (dims.length < 3) {
	      throw 'you must support the x,y,z dimension!!!';
	    }
	    return dims[2];
	  },
	  // 获取要进行回归的数据
	  getData: function(frame){
	
	    //var xDim = this.getXDim();
	    //var yDim = this.getYDim();
	    var data = [];
	    var dims = this.dims;
	    frame.each(function(obj){
	      var tmp = [];
	      Util.each(dims,function(dim){
	        tmp.push(obj[dim]);
	      });
	      data.push(tmp);
	    });
	    return data;
	  },
	  getDimRange: function(frame,dim){
	    var self = this;
	    var range = self.colRange[dim];
	    if (!range) {
	      var tmp = Frame.range(frame,dim);
	      range = {
	        min: tmp[0],
	        max: tmp[1]
	      };
	    }
	    return range;
	  },
	  gatStep: function(frame,dim){
	    var self = this;
	    var range = self.getDimRange(frame,dim);
	    var min = range.min;
	    var max = range.max;
	    var bandWidth = self.bandWidth;
	    var step = (max - min) * bandWidth;
	    return step;
	  },
	  /**
	   * @protected
	   * 绘制曲线需要的dim轴上进行差值的数组
	   */
	  getInterArray: function(frame,dim){
	    var self = this;
	    //var xDim = this.getXDim();
	    var step = self.gatStep(frame,dim);
	    var range = self.getDimRange(frame,dim);
	    var min = range.min;
	    var max = range.max;
	    var arr = [];
	    for(var i = min;i <= max; i = i + step ) {
	      arr.push(i);
	    }
	    return arr;
	  },
	  /**
	   * Execute each Frame
	   * @protected
	   * @param  {DataFrame} frame data frame for translate
	   * @return {DataFrame}
	   */
	  execFrame: function (frame) {
	    var self = this;
	    //var dims = self.getDims();
	    var xDim = self.getXDim();
	    var yDim = self.getYDim();
	    frame = Frame.sort(frame,xDim);
	    var data = self.getData(frame);
	    var interArr = self.getInterArray(frame,xDim);
	    var arr = self.execSmooth(data,interArr,frame);
	    var first = frame.rowObject(0);
	    var rst = [];
	    Util.each(arr,function(item){
	      var obj = Util.mix({},first);
	      obj[xDim] = item[0];
	      obj[yDim] = item[1];
	      rst.push(obj);
	    });
	    return new Frame(rst);
	   }
	});
	
	module.exports = Smooth;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 求平均数的平滑函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Regression = __webpack_require__(450);
	
	var Mean = function(dims){
	
	  return new Regression({
	    dims : dims,
	    /**
	     * 获取当前回归函数的字符串 如 ： 12*x + 10
	     * @return {String}
	     */
	    getRegressionString : function(){
	      return 'y = ' + this.curMean;
	    },
	    execSmooth: function(data,interArr,frame){
	      var self = this;
	      var yDim = self.getYDim();
	      var mean = Frame.mean(frame,yDim);
	      self.curMean = mean;
	      var rst = [];
	      Util.each(interArr,function(xValue){
	        rst.push([xValue, mean]);
	      });
	      return rst;
	    }
	  });
	};
	
	module.exports = Mean;


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 使用回归获取平滑曲线
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Smooth = __webpack_require__(448);
	
	var Regression = function  (cfg) {
	  Regression.superclass.constructor.call(this,cfg);
	};
	
	Util.extend(Regression,Smooth);
	
	Util.augment(Regression,{
	  regressionType: 'base',
	  
	  isRegression: true,
	  /**
	   * 获取当前回归函数的字符串 如 ： 12*x + 10
	   * @return {String} 
	   */
	  getRegressionString : function(){
	    return '';
	  },
	  execSmooth: function(data){
	
	    return data;
	  }
	});
	
	module.exports = Regression;

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 求平均数的平滑函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Regression = __webpack_require__(450);
	
	var Median = function(dims){
	
	  return new Regression({
	    dims : dims,
	    /**
	     * 获取当前回归函数的字符串 如 ： 12*x + 10
	     * @return {String}
	     */
	    getRegressionString : function(){
	      return 'y = ' + this.curMedian;
	    },
	    execSmooth: function(data,interArr,frame){
	      var self = this;
	      var yDim = self.getYDim();
	      var median = Frame.median(frame,yDim);
	      self.curMedian = median;
	      var rst = [];
	      Util.each(interArr,function(xValue){
	        rst.push([xValue, median]);
	      });
	      return rst;
	    }
	  });
	};
	
	module.exports = Median;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 求平均数的平滑函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	
	var Linear = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    dims : dims,
	    regressionType: 'linear',
	    getRegression: function(data){
	      return RegressionFn('polynomial', data,1);
	    }
	  }));
	};
	
	module.exports = Linear;

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(454);

/***/ }),
/* 454 */
/***/ (function(module, exports) {

	/**
	* @license
	*
	* Regression.JS - Regression functions for javascript
	* http://tom-alexander.github.com/regression-js/
	*
	* copyright(c) 2013 Tom Alexander
	* Licensed under the MIT license.
	*
	**/
	
	'use strict';
	
	var gaussianElimination = function(a, o) {
	       var i = 0, j = 0, k = 0, maxrow = 0, tmp = 0, n = a.length - 1, x = new Array(o);
	       for (i = 0; i < n; i++) {
	          maxrow = i;
	          for (j = i + 1; j < n; j++) {
	             if (Math.abs(a[i][j]) > Math.abs(a[i][maxrow]))
	                maxrow = j;
	          }
	          for (k = i; k < n + 1; k++) {
	             tmp = a[k][i];
	             a[k][i] = a[k][maxrow];
	             a[k][maxrow] = tmp;
	          }
	          for (j = i + 1; j < n; j++) {
	             for (k = n; k >= i; k--) {
	                a[k][j] -= a[k][i] * a[i][j] / a[i][i];
	             }
	          }
	       }
	       for (j = n - 1; j >= 0; j--) {
	          tmp = 0;
	          for (k = j + 1; k < n; k++)
	             tmp += a[k][j] * x[k];
	          x[j] = (a[n][j] - tmp) / a[j][j];
	       }
	       return (x);
	};
	
	    var methods = {
	        linear: function(data) {
	            var sum = [0, 0, 0, 0, 0], n = 0, results = [];
	
	            for (; n < data.length; n++) {
	              if (data[n][1] != null) {
	                sum[0] += data[n][0];
	                sum[1] += data[n][1];
	                sum[2] += data[n][0] * data[n][0];
	                sum[3] += data[n][0] * data[n][1];
	                sum[4] += data[n][1] * data[n][1];
	              }
	            }
	
	            var gradient = (n * sum[3] - sum[0] * sum[1]) / (n * sum[2] - sum[0] * sum[0]);
	            var intercept = (sum[1] / n) - (gradient * sum[0]) / n;
	          //  var correlation = (n * sum[3] - sum[0] * sum[1]) / Math.sqrt((n * sum[2] - sum[0] * sum[0]) * (n * sum[4] - sum[1] * sum[1]));
	
	            for (var i = 0, len = data.length; i < len; i++) {
	                var coordinate = [data[i][0], data[i][0] * gradient + intercept];
	                results.push(coordinate);
	            }
	
	            var string = 'y = ' + Math.round(gradient*100) / 100 + 'x + ' + Math.round(intercept*100) / 100;
	
	            return {equation: [gradient, intercept], points: results, string: string};
	        },
	
	        linearThroughOrigin: function(data) {
	            var sum = [0, 0], n = 0, results = [];
	
	            for (; n < data.length; n++) {
	                if (data[n][1] != null) {
	                    sum[0] += data[n][0] * data[n][0]; //sumSqX
	                    sum[1] += data[n][0] * data[n][1]; //sumXY
	                }
	            }
	
	            var gradient = sum[1] / sum[0];
	
	            for (var i = 0, len = data.length; i < len; i++) {
	                var coordinate = [data[i][0], data[i][0] * gradient];
	                results.push(coordinate);
	            }
	
	            var string = 'y = ' + Math.round(gradient*100) / 100 + 'x';
	
	            return {equation: [gradient], points: results, string: string};
	        },
	
	        exponential: function(data) {
	            var sum = [0, 0, 0, 0, 0, 0], n = 0, results = [];
	
	            for (len = data.length; n < len; n++) {
	              if (data[n][1] != null) {
	                sum[0] += data[n][0];
	                sum[1] += data[n][1];
	                sum[2] += data[n][0] * data[n][0] * data[n][1];
	                sum[3] += data[n][1] * Math.log(data[n][1]);
	                sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);
	                sum[5] += data[n][0] * data[n][1];
	              }
	            }
	
	            var denominator = (sum[1] * sum[2] - sum[5] * sum[5]);
	            var A = Math.pow(Math.E, (sum[2] * sum[3] - sum[5] * sum[4]) / denominator);
	            var B = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;
	
	            for (var i = 0, len = data.length; i < len; i++) {
	                var coordinate = [data[i][0], A * Math.pow(Math.E, B * data[i][0])];
	                results.push(coordinate);
	            }
	
	            var string = 'y = ' + Math.round(A*100) / 100 + 'e^(' + Math.round(B*100) / 100 + 'x)';
	
	            return {equation: [A, B], points: results, string: string};
	        },
	
	        logarithmic: function(data) {
	            var sum = [0, 0, 0, 0], n = 0, results = [];
	
	            for (len = data.length; n < len; n++) {
	              if (data[n][1] != null) {
	                sum[0] += Math.log(data[n][0]);
	                sum[1] += data[n][1] * Math.log(data[n][0]);
	                sum[2] += data[n][1];
	                sum[3] += Math.pow(Math.log(data[n][0]), 2);
	              }
	            }
	
	            var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);
	            var A = (sum[2] - B * sum[0]) / n;
	
	            for (var i = 0, len = data.length; i < len; i++) {
	                var coordinate = [data[i][0], A + B * Math.log(data[i][0])];
	                results.push(coordinate);
	            }
	
	            var string = 'y = ' + Math.round(A*100) / 100 + ' + ' + Math.round(B*100) / 100 + ' ln(x)';
	
	            return {equation: [A, B], points: results, string: string};
	        },
	
	        power: function(data) {
	            var sum = [0, 0, 0, 0], n = 0, results = [];
	
	            for (len = data.length; n < len; n++) {
	              if (data[n][1] != null) {
	                sum[0] += Math.log(data[n][0]);
	                sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);
	                sum[2] += Math.log(data[n][1]);
	                sum[3] += Math.pow(Math.log(data[n][0]), 2);
	              }
	            }
	
	            var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);
	            var A = Math.pow(Math.E, (sum[2] - B * sum[0]) / n);
	
	            for (var i = 0, len = data.length; i < len; i++) {
	                var coordinate = [data[i][0], A * Math.pow(data[i][0] , B)];
	                results.push(coordinate);
	            }
	
	             var string = 'y = ' + Math.round(A*100) / 100 + 'x^' + Math.round(B*100) / 100;
	
	            return {equation: [A, B], points: results, string: string};
	        },
	
	        polynomial: function(data, order) {
	            if(typeof order == 'undefined'){
	                order = 2;
	            }
	             var lhs = [], rhs = [], results = [], a = 0, b = 0, i = 0, k = order + 1;
	
	                    for (; i < k; i++) {
	                       for (var l = 0, len = data.length; l < len; l++) {
	                          if (data[l][1] != null) {
	                           a += Math.pow(data[l][0], i) * data[l][1];
	                          }
	                        }
	                        lhs.push(a), a = 0;
	                        var c = [];
	                        for (var j = 0; j < k; j++) {
	                           for (var l = 0, len = data.length; l < len; l++) {
	                              if (data[l][1] != null) {
	                               b += Math.pow(data[l][0], i + j);
	                              }
	                            }
	                            c.push(b), b = 0;
	                        }
	                        rhs.push(c);
	                    }
	            rhs.push(lhs);
	
	           var equation = gaussianElimination(rhs, k);
	
	                for (var i = 0, len = data.length; i < len; i++) {
	                    var answer = 0;
	                    for (var w = 0; w < equation.length; w++) {
	                        answer += equation[w] * Math.pow(data[i][0], w);
	                    }
	                    results.push([data[i][0], answer]);
	                }
	
	                var string = 'y = ';
	
	                for(var i = equation.length-1; i >= 0; i--){
	                  if(i > 1) string += Math.round(equation[i] * Math.pow(10, i)) / Math.pow(10, i)  + 'x^' + i + ' + ';
	                  else if (i == 1) string += Math.round(equation[i]*100) / 100 + 'x' + ' + ';
	                  else string += Math.round(equation[i]*100) / 100;
	                }
	
	            return {equation: equation, points: results, string: string};
	        },
	
	        lastvalue: function(data) {
	          var results = [];
	          var lastvalue = null;
	          for (var i = 0; i < data.length; i++) {
	            if (data[i][1]) {
	              lastvalue = data[i][1];
	              results.push([data[i][0], data[i][1]]);
	            }
	            else {
	              results.push([data[i][0], lastvalue]);
	            }
	          }
	
	          return {equation: [lastvalue], points: results, string: "" + lastvalue};
	        }
	    };
	
	var regression = (function(method, data, order) {
	
	   if (typeof method == 'string') {
	       return methods[method](data, order);
	   }
	});
	
	module.exports = regression;
	
	


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 回归函数的辅助类
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	//var Frame = require('dataframe');
	var FnUtil = __webpack_require__(456);
	
	var Mixin = {
	  /**
	   * 获取当前回归函数的字符串 如 ： 12*x + 10
	   * @return {String} 
	   */
	  getRegressionString : function(){
	    return this.regressionStr;
	  },
	  getRegression: function(){
	    return {
	      equation: [],
	      string: ''
	    };
	  },
	  execSmooth: function(data,interArr){
	    var self = this;
	    var regression = self.getRegression(data);
	    var equation = regression.equation;
	    this.regressionStr = regression.string;
	    var rst = [];
	    Util.each(interArr,function(item){
	      var x = item;
	      var y = FnUtil.execFnction(self.regressionType,equation,x);
	      rst.push([x, y]);       
	    });
	    return rst;
	  }
	};
	
	module.exports = Mixin;

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 函数生成的帮助类
	 * @author dxq613@gmail.com
	 */
	"use strict";
	
	var Util = __webpack_require__(169);
	
	var POLY_ARR = ['linear','cubic','quadratic'];
	
	function poly (equation,x) {
	  var value = 0;
	
	  for(var i = 0; i < equation.length; i++ ) {
	    var term = equation[i];
	    value += term * Math.pow(x,i);
	  }
	  return value;
	}
	
	var FnUtil = {
	  execFnction: function (type,equation,x) {
	    var value;
	    if (Util.indexOf(POLY_ARR,type) >= 0) {
	      value = FnUtil.poly(equation,x);
	    } else {
	      if (FnUtil[type]) {
	        value = FnUtil[type](equation[0],equation[1],x);
	      } else {
	        value = x;
	      }
	    }
	    return value;
	  },
	  linear: function(a,b,x){
	    var equation = [b,a];
	    return poly(equation,x);
	  },
	  poly: function(equation,x){
	    return poly(equation,x);
	  },
	  log: function(a,b,x){
	    return a + b * Math.log(x);
	  },
	  pow: function(a,b,x){
	    return a * Math.pow(x,b);
	  },
	  exp: function(a,b,x){
	    return a * Math.pow(Math.E,b * x);
	  }
	};
	
	module.exports = FnUtil;

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 求平均数的平滑函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	
	var Quadratic = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    regressionType: 'quadratic',
	    dims : dims,
	    getRegression: function(data){
	      return RegressionFn('polynomial', data,2);
	    }
	  }));
	
	};
	
	module.exports = Quadratic;

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 求平均数的平滑函数
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	
	var Cubic = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    dims : dims,
	    regressionType: 'cubic',
	    getRegression: function(data){
	      return RegressionFn('polynomial', data,3);
	    }
	  }));
	  
	};
	
	module.exports = Cubic;

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview log 回归
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	
	var Log = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    dims : dims,
	    regressionType: 'log',
	    getRegression: function(data){
	      return RegressionFn('logarithmic', data);
	    }
	  }));
	};
	
	module.exports = Log;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview pow 回归
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	var Frame = __webpack_require__(270);
	
	var Pow = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    dims : dims,
	    regressionType: 'pow',
	    /**
	     * @protected
	     * some thing to do before stat exec
	     */
	    preExecute: function(frames){
	      var yDim = this.getYDim();
	      Util.each(frames,function(frame){
	        var min = Frame.min(frame,yDim);
	        if (min < 0) {
	          throw 'the field ' + yDim + ' has value less than 0,you can\'t use this regression!';
	        }
	      });
	    },
	    getRegression: function(data){
	      return RegressionFn('power', data);
	    }
	  }));
	};
	
	module.exports = Pow;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview pow 回归
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Regression = __webpack_require__(450);
	var RegressionFn = __webpack_require__(453);
	var FnMixin = __webpack_require__(455);
	var Frame = __webpack_require__(270);
	
	var Exp = function(dims){
	
	  return new Regression(Util.mix({},FnMixin,{
	    dims : dims,
	    regressionType: 'exp',
	    /**
	     * @protected
	     * some thing to do before stat exec
	     */
	    preExecute: function(frames){
	      var yDim = this.getYDim();
	      Util.each(frames,function(frame){
	        var min = Frame.min(frame,yDim);
	        if (min < 0) {
	          throw 'the field ' + yDim + ' has value less than 0,you can\'t use this regression!';
	        }
	      });
	    },
	    getRegression: function(data){
	      return RegressionFn('exponential', data);
	    }
	  }));
	};
	
	module.exports = Exp;


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview LOESS and LOWESS (locally weighted scatterplot smoothing) are two strongly related non-parametric regression methods that combine multiple regression models in a k-nearest-neighbor-based meta-model.
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	
	 "use strict";
	
	 var Smooth = __webpack_require__(448);
	 var Util = __webpack_require__(169);
	 var Kernel = __webpack_require__(463);
	 var Frame = __webpack_require__(270);
	 var Guass = __webpack_require__(464);
	
	 var Loess = function (cfg) {
	 	Loess.superclass.constructor.call(this,cfg);
	 };
	
	 Util.extend(Loess,Smooth);
	
	 Util.augment(Loess,{
	
		/**
	   * the type of kernrl function
	   * @type {String}
	   */
	   kernelType: '',
	  /**
	   * the number which descide the dynamic bandwidth
	   * @type {Number}
	   */
	   k: 10,
	
	  /**
	   * Execute each Frame
	   * @protected
	   * @param  {DataFrame} frame data frame for translate
	   * @return {DataFrame}
	   */
	   execFrame: function (frame) {
	    var self = this;
	    var dims = self.getDims();
	    var rst = [];
	    if(dims.length === 2){
	      var xDim = self.getXDim();
	      var yDim = self.getYDim();
	      var data = self.getData(frame);
	      var interArr = self.getInterArray(frame,xDim);
	      var arr = self.execSmooth(data,interArr);
	      var first = frame.rowObject(0);
	      Util.each(arr,function(item){
	        var obj = Util.mix({},first);
	        obj[xDim] = item[0];
	        obj[yDim] = item[1];
	        rst.push(obj);
	      });
	    }else{
	      var xDim = self.getXDim();
	      var yDim = self.getYDim();
	      var zDim = self.getZDim();
	      var data = self.getData(frame);
	      var interArr = [];
	      interArr[0] = self.getInterArray(frame,xDim);
	      interArr[1] = self.getInterArray(frame,yDim);
	      var arr = self.execSmoothThreeDim(data,interArr);
	      var first = frame.rowObject(0);
	
	      Util.each(arr,function(item){
	        var obj = Util.mix({},first);
	        obj[xDim] = item[0];
	        obj[yDim] = item[1];
	        obj[zDim] = item[2];
	        rst.push(obj);
	      });
	    }
	
	    return new Frame(rst);
	  },
	  /**
	    * use the kernel function to estimate 2 dims points' local regression
	    * @param  {Array}
	    * @param  {Array}
	    * @return {Array}
	    */
	    execSmooth: function(data,interArr){
	      var self = this;
	      var xCount = interArr.length;
	      var N = data.length;
	      var kernelType = self.kernelType;
	      var kFunc = Kernel[kernelType];
	      var result = [];
	      var m = [];
	      var stepX = interArr[1]-interArr[0];
	
	      for(var i = 0; i < xCount; i++){
	       var a=0,b=0,c=0,d=0,e=0;
	       var u,x,y;
	       var X = interArr[i],Y;
	       var h = self.getWindowWidth([X],data,[stepX])[0];
	
	       for(var j = 0; j < N; j++){
	        x = data[j][0];
	        y = data[j][1];
	        u = kFunc((X-x)/h);
	        if(u!==0){
	          a += u;
	          b += u*x;
	          c += u*x*x;
	          d += u*y;
	          e += u*x*y;
	        }
	      }
	
	      if(((a*c)-(b*b))!==0){
	        m[1] = ((b*d)-(a*e))/((b*b)-(a*c));
	        m[0] = (d/a)-(b/a)*m[1];
	        Y = m[0] + m[1]*X;
	        result.push([X,Y]);
	      }
	
	
	    }
	    return result;
	  },
	
	  /**
	    * use the kernel function to estimate 3 dims points' local regression
	    * @param  {Array}
	    * @param  {Array}
	    * @return {Array}
	    */
	    execSmoothThreeDim: function(data,interArr){
	      var self = this;
	      var xCount = interArr[0].length;
	      var yCount = interArr[1].length;
	      var N = data.length;
	      var kernelType = self.kernelType;
	      var kFunc = Kernel[kernelType];
	      var result = [];
	      var m = [];
	      var stepX = interArr[0][1]-interArr[0][0];
	      var stepY = interArr[1][1]-interArr[1][0];
	
	
	      for(var i = 0; i < xCount; i++){
	        for(var o = 0;o <yCount; o++){
	          var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,l=0;
	          var u,x,y,z;
	          var X = interArr[0][i],Y = interArr[1][o],Z;
	          var hList = self.getWindowWidth([X,Y],data,[stepX,stepY]);
	          var hx = hList[0];
	          var hy = hList[1];
	
	          for(var j = 0; j < N; j++){
	            x = data[j][0];
	            y = data[j][1];
	            z = data[j][2];
	            u = kFunc((X-x)/hx)*kFunc((Y-y)/hy);
	            if(u!==0){
	              a += u;
	              b += u*x;
	              c += u*y;
	              d += u*x*y;
	              e += u*x*x;
	              f += u*y*y;
	              g += u*z;
	              h += u*x*z;
	              l += u*y*z;
	            }
	
	          }
	          var aMatrix = [[a,b,c],[b,e,d],[c,d,f]];
	          var bMatrix = [g,h,l];
	          m = Guass(aMatrix,bMatrix);
	
	          if(m){
	            Z = m[0]+m[1]*X+m[2]*Y;
	            result.push([X,Y,Z]);
	          }
	        }
	
	
	      }
	      return result;
	    },
	  /**
	    * The dynamic bandwidth of the kernel, which is descided by the distance from current point to the kth nearest point
	    * @param  {Array} point    the current point
	    * @param  {Array} data the data source
	    * @param {Array} step the step of Sample values at every dim
	    * @return {Array}        the dynamic bandwidth
	    */
	    getWindowWidth:function(point,data,step){
	      var self = this;
	      var k = self.k;
	      var length = data.length;
	      var h = [];
	      var dimNumber = data[0].length-1;
	      var r = 0;
	      if(length<=k){
	        k = length;
	      }
	      data.sort(function(arr1,arr2){
	        var distance1=0;
	        var distance2=0;
	        for(var i = 0;i<dimNumber;i++){
	          distance1 += (arr1[i]-point[i])*(arr1[i]-point[i])/(step[i]*step[i]);
	          distance2 += (arr2[i]-point[i])*(arr2[i]-point[i])/(step[i]*step[i]);
	        }
	        return distance1-distance2;
	      });
	
	      for(var i = 0;i<dimNumber;i++){
	        while(data[k-1][i] === data[0][i]){
	          k++;
	        }
	        var tmp = (Math.abs(data[k-1][i]-point[i])*1.1)/step[i];
	        r += tmp*tmp;
	      }
	      r = Math.sqrt(r);
	      for(var i = 0;i<dimNumber;i++){
	        h[i] = r*step[i];
	      }
	      return h;
	    }
	
	  });
	
	module.exports = Loess;


/***/ }),
/* 463 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview In Bayesian statistics: In statistics, especially in Bayesian statistics, the kernel of a probability density function (pdf) or probability mass function (pmf) is the form of the pdf or pmf in which any factors that are not functions of any of the variables in the domain are omitted.
	 *	In pattern analysis: The kernel of a reproducing kernel Hilbert space is used in the suite of techniques known as kernel methods to perform tasks such as statistical classification, regression analysis, and cluster analysis on data in an implicit space. This usage is particularly common in machine learning.
	 *	In non-parametric statistics: a kernel is a weighting function used in non-parametric estimation techniques.Kernels are used in kernel density estimation to estimate random variables' density functions, or in kernel regression to estimate the conditional expectation of a random variable. Kernels are also used in time-series, in the use of the periodogram to estimate the spectral density where they are known as window functions. An additional use is in the estimation of a time-varying intensity for a point process where window functions (kernels) are convolved with time-series data.
	 *  @author minnuo 
	 * 
	 */
	
	/**
	 * @class Kernel
	 * kernel functions in common use
	 */
	var gKernel = {
		/**
		 * all data receive equal weights
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		uniform:function(u){
			return Math.abs(u)<1?1/2:0;
		},
		/**
		 * Data near the current point receive higher weights than extreme data receive, decreased linearly.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		triangular:function(u){
			return Math.abs(u)<1?(1-Math.abs(u)):0;
		},
		/**
		 * This function weights extreme points more than the triweight, biweight, and tricube kernels but less than the Gaussian kernels.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		epanechnikov:function(u){
			return Math.abs(u)<1?(3/4)*(1-u*u):0;
		},
		/**
		 * Data far from the current point receive more weight than the triweight kernel allows but less weight than the Epanechnikov kernel permits.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		quartic:function(u){
			return Math.abs(u)<1?(15/16)*Math.pow((1-u*u),2):0;
		},
		/**
		 * Data close to the current point receive higher weights than any other kernel allows. Extreme cases get very little weight.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		triweight:function(u){
			return Math.abs(u)<1?(35/32)*Math.pow((1-u*u),3):0;
		},
		/**
		 * Data close to the current point receive higher weights than both the Epanechnikov and biweight kernels allow.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		tricube:function(u){
			return Math.abs(u)<1?(70/81)*Math.pow((1-Math.pow(Math.abs(u),3)),3):0;
		},
		/**
		 * Weights follow a normal distribution, resulting in higher weighting of extreme cases than the Epanechnikov, biweight, tricube, and triweight kernels.
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		gaussian:function(u){
			return Math.abs(u)<3?(1/Math.sqrt(2*Math.PI))*Math.exp((-1/2)*u*u):0;
		},
		/**
		 * near the epanechnikov kernel except that data close to the current point receive higher weights
		 * @param  {Number} u 
		 * @return {Number} k(u)
		 */
		cosine:function(u){
			return Math.abs(u)<1?(Math.PI/4)*Math.cos((Math.PI/2)*u):0;
		}
	};
	
	module.exports = gKernel;


/***/ }),
/* 464 */
/***/ (function(module, exports) {

	/**
	 * @fileOverview In linear algebra, Gaussian elimination (also known as row reduction) is an algorithm for solving systems of linear equations.
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	
	/**
	 * Convert the matrix  to a upper triangular matrix
	 * @param  {Array} a The left part of the augmented matrix
	 * @param  {Array} b The right part of the augmented matrix
	 * @param  {Number} n Dimension
	 * @return {Boolean}   It indicates that whether this matrix can use Gauss Elimination
	 */
	var guass = function(a,b,n){
		var i,j,k,flag=true;
		var t; 
		for(i=0;i<n-1;i++){
			if(a[i][i]==0){
				flag=false;
				break;
			}else{
				for(j=i+1;j<n;j++){ 
					t=-a[j][i]/a[i][i];
					b[j]=b[j]+t*b[i]; 
					for(k=i;k<n;k++){
						a[j][k]=a[j][k]+t*a[i][k];
					}
				}
			}
		}
		for(i=0;i<n;i++){
			if(a[i][i]==0){
				flag=false;
				break;
			}
		}
		return flag;
	};
	
	/**
	 * Solve the equation by back substitution
	 * @param  {Array} aMatrix The left part of the augmented matrix
	 * @param  {[Array} bMatrix The right part of the augmented matrix
	 * @return {Array}         The solution of equations
	 */
	var gGuass = function(aMatrix,bMatrix){
		var x = [];
		var a = aMatrix;
		var b = bMatrix;
		var n = b.length;
		var flag = guass(a,b,n);
		
		if(flag){
			x[n-1]=b[n-1]/a[n-1][n-1];
			for(var i=n-2;i>=0;i--){
				x[i]=b[i];
				for(var j=i+1;j<n;j++){
					x[i]=x[i]-a[i][j]*x[j];
				}
				x[i]=x[i]/a[i][i];
			}
			
		}else{
			x = false;
		}
		
		return x;
	}
	
	
	module.exports = gGuass;


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview In statistics, kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. 
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	"use strict";
	
	
	var Kernel = __webpack_require__(466);
	var Normal = __webpack_require__(468);
	
	var Density = {};
	
	
	Density.kernel = {};
	//use uniform kernel function to estimate the probablity density function
	Density.kernel.uniform = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'uniform');
	};
	//use triangular kernel function to estimate the probablity density function
	Density.kernel.triangular = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'triangular');
	};
	//use epanechnikov kernel function to estimate the probablity density function
	Density.kernel.epanechnikov = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'epanechnikov');
	};
	//use quartic kernel function to estimate the probablity density function
	Density.kernel.quartic = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'quartic');
	};
	//use triweight kernel function to estimate the probablity density function
	Density.kernel.triweight = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'triweight');
	};
	//use tricube kernel function to estimate the probablity density function
	Density.kernel.tricube = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'tricube');
	};
	//use gaussian kernel function to estimate the probablity density function
	Density.kernel.gaussian = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'gaussian');
	};
	//use cosine kernel function to estimate the probablity density function
	Density.kernel.cosine = function  (dims,bandWidth) {
		return getDensity(dims,bandWidth,'cosine');
	};
	
	function getDensity(dims,bandWidth,kernelType) {
		bandWidth = bandWidth || 0.01;
		return new Kernel({
	    	dims : dims,
	    	bandWidth: bandWidth,
	    	kernelType: kernelType
	    });
	}
	
	Density.normal = function(dims,bandWidth){
		bandWidth = bandWidth || 0.01;
		return new Normal({
	    	dims : dims,
	    	bandWidth: bandWidth
	    });
	};
	
	module.exports = Density;

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	* @fileOverview kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable.
	* @author minnuo <audrey.tm@alipay.com>
	*/
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var gKernel = __webpack_require__(463);
	var Density = __webpack_require__(467);
	var DIM_DENSITY = '..density';
	/**
	* @class Stat.Density
	* The Base Class of statist density
	*/
	var Kernel = function  (cfg) {
	  Kernel.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Kernel,Density);
	
	Util.augment(Kernel,{
	  /**
	  * the type of kernrl function
	  * @type {String}
	  */
	  kernelType: '',
	
	  /**
	  * use kernel function to estimate the density function
	  * @protected
	  * @param  {DataFrame} frame data frame for translate
	  * @return {DataFrame} the density of frame data
	  */
	  execFrame: function (frame/*,frames*/) {
	    var self = this;
	
	    var kernelType = self.kernelType;
	    if (!kernelType) {
	      return frame;
	    }
	
	    var kFunc = gKernel[kernelType];
	    var dims = self.getDims();
	    var tmp = [];
	    if(dims.length === 2){
	      tmp = self._getOneDimDensity(frame,kFunc,dims);
	    }else if(dims.length === 3){
	      tmp = self._getTwoDimDensity(frame,kFunc,dims);
	    }/*else{
	
	    }*/
	
	    return new Frame(tmp);
	  },
	  _getOneDimDensity: function(frame,kFunc,dims){
	    var dim = dims[dims.length - 2];
	    var data = frame.colArray(dim);
	    var h = this.getWindowWidth(frame,dim);
	    var xCoordinate = this.getCoordinate(frame,dim,h);
	    var xCount = xCoordinate.length;
	    var N = data.length;
	    var first = frame.rowObject(0);
	    var tmp = [];
	    for(var i = 0; i < xCount; i++){
	      var sum = 0;
	      var x = xCoordinate[i];
	      for(var j = 0; j < N; j++){
	        sum += kFunc((x-data[j])/h);
	      }
	      var y = (1/(N*h)) * (sum);
	      var obj = Util.mix({},first);
	      obj[dim] = x;
	      obj[DIM_DENSITY] = y;
	      tmp[i] = obj;
	    }
	    return tmp;
	  },
	  _getTwoDimDensity: function(frame,kFunc,dims){
	    var xDim = dims[dims.length - 3];
	    var yDim = dims[dims.length - 2];
	    var hx = this.getWindowWidth(frame,xDim);
	    var hy = this.getWindowWidth(frame,yDim);
	    var xCoordinate = this.getCoordinate(frame,xDim,hx);
	    var xCount = xCoordinate.length;
	    var yCoordinate = this.getCoordinate(frame,yDim,hy);
	    var yCount = yCoordinate.length;
	    var N = frame.rowCount();
	    var first = frame.rowObject(0);
	    var tmp = [];
	    for(var i = 0; i < xCount; i++){
	      for(var j = 0; j < yCount; j++){
	        var sum = 0;
	        var x = xCoordinate[i];
	        var y = yCoordinate[j];
	        for(var k = 0; k < N; k++){
	          sum += kFunc((x-frame.data[k][xDim])/hx)*kFunc((y-frame.data[k][yDim])/hy);
	        }
	        var z = (1/(N*hx*hy)) * (sum);
	        var obj = Util.mix({},first);
	        obj[xDim] = x;
	        obj[yDim] = y;
	        obj[DIM_DENSITY] = z;
	        tmp.push(obj);
	      }
	    }
	    return tmp;
	  }
	});
	
	module.exports = Kernel;


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable.
	 * @author minnuo <audrey.tm@alipay.com>
	 */
	
	"use strict";
	
	var Stat = __webpack_require__(423);
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var DIM_DENSITY = '..density';
	/**
	 * @class Stat.Density
	 * The Base Class of statist density
	 */
	var Density = function  (cfg) {
	  Density.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Density,Stat);
	
	Util.augment(Density,{
	  type: 'density',
	
	  /**
	   * the percentage to get bandwidth according to the source data range
	   * @type {Number}
	   */
	  bandWidth: 0.01,
	   /**
	   * 列的范围的定义
	   * @type {Object}
	   */
	  colRange: {},
	
	  initDims: function(dims){
	    dims.push(DIM_DENSITY);
	  },
	  /**
	   * use kernel function to estimate the density function
	   * @protected
	   * @param  {DataFrame} frame data frame for translate
	   * @return {DataFrame} the density of frame data
	   */
	  execFrame: function (frame/*,frames*/) {
	    return frame;
	  },
	  /**
	   * The bandwidth of the kernel is a free parameter which exhibits a strong influence on the resulting estimate.
	   * @param  {DataFrame}
	   * @param  {dim}
	   * @return {Number}
	   */
	  getWindowWidth: function(frame,dim){
	  	var max = Frame.max(frame,dim);
	  	var min = Frame.min(frame,dim);
	  	var h = (max-min)*this.bandWidth;
	  	return h;
	  },
	  /**
	   * the X coordinate of the density
	   * @param  {DataFrame}
	   * @param  {dim}
	   * @param  {Number}
	   * @return {Array}
	   */
	  getCoordinate: function(frame,dim,h){
	    var self = this;
	  	var range = self.getDimRange(frame,dim);
	    var max = range.max;
	  	var min = range.min;
	  	var Coordinate = [];
	  	for(var i=min; i<=max; i+=h){
	  		Coordinate.push(i);
	  	}
	  	return Coordinate;
	  },
	  getDimRange: function(frame,dim){
	    var self = this;
	    var range = self.colRange[dim];
	    if (!range) {
	      var tmp = Frame.range(frame,dim);
	      range = {
	        min: tmp[0],
	        max: tmp[1]
	      };
	    }
	    return range;
	  },
	  /**
	   * 设置字段的范围
	   * @param {String} dim  字段
	   * @param {Array} range 最小值、最大值
	   */
	  setRange: function(dim,range){
	    this.colRange[dim] = range;
	  }
	});
	
	module.exports = Density;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	* @fileOverview kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable.
	* @author minnuo <audrey.tm@alipay.com>
	*/
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Density = __webpack_require__(467);
	var DIM_DENSITY = '..density';
	/**
	* @class Stat.Density
	* The Base Class of statist density
	*/
	var Normal = function  (cfg) {
	  Normal.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Normal,Density);
	
	Util.augment(Normal,{
	
	/**
	* use kernel function to estimate the density function
	* @protected
	* @param  {DataFrame} frame data frame for translate
	* @return {DataFrame} the density of frame data
	*/
	execFrame: function (frame/*,frames*/) {
	  var self = this;
	  var first = frame.rowObject(0);
	  var dims = self.getDims();
	  var dim = dims[dims.length - 2];
	  var h = this.getWindowWidth(frame,dim);
	  var xCoordinate = this.getCoordinate(frame,dim,h);
	  var xCount = xCoordinate.length;
	  var mean = Frame.mean(frame,dim);
	  var standard_deviation = Frame.standard_deviation(frame,dim);
	  var tmp = [];
	
	  for(var i = 0; i < xCount; i++){
	    var x = xCoordinate[i];
	    var y = self.getNormal(x,mean,standard_deviation);
	    var obj = Util.mix({},first);
	    obj[dim] = x;
	    obj[DIM_DENSITY] = y;
	    tmp.push(obj);
	  }
	
	  return new Frame(tmp);
	},
	
	 getNormal: function(x,mean,standard_deviation){
	  var y = (1/(Math.sqrt(2*Math.PI)*standard_deviation))*(Math.exp(-(x-mean)*(x-mean)/(2*standard_deviation*standard_deviation)));
	  return y;
	 }
	
	});
	
	module.exports = Normal;


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Region = {
	  spread: {
	    range: __webpack_require__(470),
	    sd: __webpack_require__(472),
	    se: __webpack_require__(473)
	  },
	  confi: {
	
	  }
	};
	
	module.exports = Region;

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview spread range of data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Region = __webpack_require__(471);
	var Frame = __webpack_require__(270);
	
	var Range = function(dims){
	
	  return new Region({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      record[name] = Frame.range(frame,name);
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Range;


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview region of data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Summary = __webpack_require__(426);
	
	var Region = function  (cfg) {
	  Region.superclass.constructor.call(this,cfg);
	};
	
	Util.extend(Region,Summary);
	
	Util.augment(Region,{
	  type: 'region'
	});
	
	module.exports = Region;

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview spread standard deviation of data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Region = __webpack_require__(471);
	var Frame = __webpack_require__(270);
	
	var Sd = function(dims){
	
	  return new Region({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      var mean = Frame.mean(frame,name);
	      var sd = Frame.sd(frame,name);
	      record[name] = [mean - sd, mean + sd];
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Sd;


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview standard error of data
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Region = __webpack_require__(471);
	var Frame = __webpack_require__(270);
	
	var Se = function(dims){
	  return new Region({
	    dims : dims,
	    transform : function(frame,name){
	      var record = frame.rowObject(0);
	      var mean = Frame.mean(frame,name);
	      var se = Frame.se(frame,name);
	      record[name] = [mean - se, mean + se];
	      return new Frame([record]);
	    }
	  });
	};
	
	module.exports = Se;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Map
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	
	"use strict";
	
	var MapStatBase = __webpack_require__(475);
	
	var MapStat = {
	  region: __webpack_require__(476),
	  center: __webpack_require__(477),
	  name: __webpack_require__(478),
	  location: __webpack_require__(479)
	};
	
	module.exports = MapStat;


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The base class of map data statistics function.
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	'use strict';
	
	var Stat = __webpack_require__(422);
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	
	var MapStat = function(cfg) {
	  MapStat.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(MapStat, Stat);
	
	Util.augment(MapStat, {
	  type: 'map',
	  mapData: {},
	  initDims: function(dims){
	    var first = dims[0];
	    var rest = dims.slice(1);
	    dims = rest.concat([first]);
	    dims.unshift('..lant'); // 纬度
	    dims.unshift('..long'); // 经度
	    this.dims = dims;
	  },
	  getStatDims: function() {
	    var dims = this.getDims();
	    var rst = dims.filter(function(dim) {
	      return dim.indexOf('..') > -1;
	    });
	    return rst;
	  },
	  // override
	  execFrame: function(frame) {
	    var self = this;
	    var statDims = self.getStatDims();
	
	    var resultArr = [];
	    frame = frame.toJSON();
	    Util.each(frame, function(sub) {
	      resultArr.push(self.addGeoInfo(sub, statDims));
	    });
	
	    return new Frame(resultArr);
	  },
	  /**
	   * @protected
	   * add geo location into frame
	   * @param  {DataFrame} frame data frame
	   * @param  {String} dim  column name of the frame
	   * @return {DataFrame} frame
	   */
	  addGeoInfo: function (frame/*,statDims*/) {
	    return frame;
	  }
	});
	
	module.exports = MapStat;


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算对应地名的坐标区域
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var MapStat = __webpack_require__(475);
	
	var Region = function(dims, mapData) {
	  return new MapStat({
	    dims: dims,
	    mapData: mapData,
	    /**
	     * [addGeoInfo description]
	     * @param  {[type]} name [description]
	     * @param  {[type]} json [description]
	     * @return {[type]}      [description]
	     */
	    addGeoInfo: function(frame, statDims) {
	      var self = this;
	      var dims = self.getDims();
	      var dim = dims[dims.length - 1];
	      var dimValue = frame[dim];
	      //dimValue = this.names ? this.names[dimValue] : dimValue;
	      var mapData = self.mapData;
	
	      var features = mapData.features;
	      var longitude = statDims[0];
	      var lantitude = statDims[1];
	      frame[longitude] = [];
	      frame[lantitude] = [];
	
	      if (features) {
	        Util.each(features, function(feature) {
	          var geoName = feature.properties ? feature.properties.name : '';
	          if (geoName === dimValue) {
	            // find the geo infomation by name
	            var geometry = feature.geometry;
	            var coordinates = geometry.coordinates;
	            if (geometry.type === 'Polygon') {
	              coordinates.forEach(function(coordinate) {
	                self._getCoordinates(coordinate, frame[longitude], frame[lantitude]);
	              });
	            } else if (geometry.type === 'MultiPolygon') {
	              coordinates.forEach(function(polygon) {
	                polygon.forEach(function(coordinate) {
	                  self._getCoordinates(coordinate, frame[longitude], frame[lantitude]);
	                });
	              });
	            } else if (geometry.type === 'MultiLineString') {
	              coordinates.forEach(function(coordinate) {
	                  self._getCoordinates(coordinate, frame[longitude], frame[lantitude], 'line');
	              });
	            }
	            return false;
	          }
	        });
	      }
	
	      return frame;
	    },
	    _getCoordinates: function(coordinate, longitudes, lantitudes, type) {
	      Util.each(coordinate, function(coord) {
	        longitudes.push(coord[0]);
	        lantitudes.push(coord[1]);
	      });
	
	      if (type && type === 'line') { // 使线闭合
	        longitudes.push(coordinate[0][0]);
	        lantitudes.push(coordinate[0][1]);
	      }
	      return false;
	    }
	  });
	};
	
	module.exports = Region;


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 返回名字对应区域的中心点的坐标
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var MapStat = __webpack_require__(475);
	
	function min(arr) {
	  return Math.min.apply(null, arr);
	}
	
	function max(arr) {
	  return Math.max.apply(null, arr);
	}
	
	var Center = function(dims, mapData) {
	  return new MapStat({
	    dims: dims,
	    mapData: mapData,
	    /**
	     * [addGeoInfo description]
	     * @param  {[type]} name [description]
	     * @param  {[type]} json [description]
	     * @return {[type]}      [description]
	     */
	    addGeoInfo: function(frame, statDims) {
	      var self = this;
	      var dims = self.getDims();
	      var dim = dims[dims.length - 1];
	      var dimValue = frame[dim];
	      //var dimValue = this.names ? this.names[dimValue] : dimValue;
	
	      var features = self.mapData.features;
	      var longitude = statDims[0];
	      var lantitude = statDims[1];
	      frame[longitude] = null;
	      frame[lantitude] = null;
	
	      if (features) {
	        Util.each(features, function(feature) {
	          var geoName = feature.properties ? feature.properties.name : '';
	          if (geoName === dimValue) {
	            var center = feature.properties.cp;
	            if (!center) {
	              // 求多边形的中心点
	              var geometry = feature.geometry;
	              var coordinates = geometry.coordinates;
	              var bbox = self._getBBox(coordinates);
	              center = [
	                bbox[0] + (bbox[2] - bbox[0]) / 2,
	                bbox[1] + (bbox[3] - bbox[1]) / 2
	              ];
	            }
	            frame[longitude] = center[0];
	            frame[lantitude] = center[1];
	            return false;
	          }
	        });
	      }
	      return frame;
	    },
	
	    _getBBox: function(coordinates) {
	      var self = this;
	      var xArray = [];
	      var yArray = [];
	      var points = self._getPoints(coordinates);
	      Util.each(points, function(point) {
	        xArray.push(point[0]);
	        yArray.push(point[1]);
	      });
	
	      return [
	        min(xArray),
	        min(yArray),
	        max(xArray),
	        max(yArray)
	      ];
	    },
	
	    _getPoints: function(coordinates) {
	      var self = this;
	      var points = [];
	      if (Util.isArray(coordinates[0])) {
	        Util.each(coordinates, function(subCoords) {
	          var subPoints = self._getPoints(subCoords);
	          points = points.concat(subPoints);
	        });
	      } else {
	        points.push(coordinates);
	      }
	      return points;
	    }
	  });
	};
	
	module.exports = Center;


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 返回经纬度坐标所处的区域名字
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	'use strict';
	
	var Util = __webpack_require__(169);
	var MapStat = __webpack_require__(475);
	
	var Name = function(dims, mapData) {
	  return new MapStat({
	    dims: dims,
	    mapData: mapData,
	    initDims: function(dims) {
	      dims.push('..name');
	    },
	    /**
	     * [addGeoInfo description]
	     * @param  {[type]} name [description]
	     * @param  {[type]} json [description]
	     * @return {[type]}      [description]
	     */
	    addGeoInfo: function(frame, statDims) {
	      var self = this;
	      var dims = self.getDims();
	      var longitude = dims[0];
	      var lantitude = dims[1];
	      var point = [frame[longitude], frame[lantitude]]; // 获取坐标点
	
	      var inside = false;
	      var features = self.mapData.features;
	      frame[statDims] = '';
	      if (features) {
	        Util.each(features, function(feature) {
	          var coordinates = feature.geometry.coordinates;
	          if (feature.geometry.type === 'Polygon') {
	            Util.each(coordinates, function(coordinate) {
	              inside = self._isInside(point, coordinate);
	              if (inside) {
	                return false;
	              }
	            });
	          } else if(feature.geometry.type === 'MultiPolygon') {
	            Util.each(coordinates, function(polygon) {
	              if (inside) {
	                return false;
	              }
	              Util.each(polygon, function(coordinate) {
	                inside = self._isInside(point, coordinate);
	                if (inside) {
	                  return false;
	                }
	              });
	            });
	          }
	          if (inside) {
	            var tempName = feature.properties ? feature.properties.name : '';
	            frame[statDims] = self.names ? self.names.indexOf(tempName) : tempName;
	            return false;
	          }
	        });
	      }
	
	      return frame;
	    },
	    _isInside: function(point, polygon) {
	      // From: https://github.com/substack/point-in-polygon.git
	      // Using Ray casting algorithm
	      var x = point[0], y = point[1];
	      var inside = false;
	      for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
	        var xi = polygon[i][0], yi = polygon[i][1];
	        var xj = polygon[j][0], yj = polygon[j][1];
	
	        var intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
	        if (intersect) {
	          inside = !inside;
	        }
	      }
	
	      return inside;
	    }
	  });
	};
	
	module.exports = Name;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 根据传入的 x y 地理坐标点将点定位到相应的位置。
	 * @author zaifei.zwx <sima.zhang1990@gmail.com>
	 */
	'use strict';
	
	var MapStat = __webpack_require__(475);
	
	var Location = function(dims) {
	  return new MapStat({
	    dims: dims,
	    initDims: function(dims){
	      var prefix = dims.slice(0, 2);
	      var rest = dims.slice(2);
	      dims = rest.concat(prefix);
	      dims.unshift('..lant'); // 纬度
	      dims.unshift('..long'); // 经度
	      this.dims = dims;
	    },
	    addGeoInfo: function(frame, statDims) {
	      var self = this;
	      var longitude = statDims[0];
	      var lantitude = statDims[1];
	      var dims = self.getDims();
	      var dimLen = dims.length;
	      frame[longitude] = frame[dims[dimLen - 2]];
	      frame[lantitude] = frame[dims[dimLen - 1]];
	
	      return frame;
	    }
	  });
	};
	
	module.exports = Location;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview tree statitics
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Stat = __webpack_require__(422);
	var Tree = {
	  dot: __webpack_require__(481),
	  rect: __webpack_require__(483)
	};
	
	Stat.tree = Tree;
	
	module.exports = Tree;

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview tree dot
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var TreeBase = __webpack_require__(482);
	
	var Dot = function(dims) {
	  return new TreeBase({
	    dims: dims
	  });
	};
	
	module.exports = Dot;

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview tree statistics base
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Stat = __webpack_require__(422);
	var Frame = __webpack_require__(270);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	var FIELD_VLALUE = '_value';
	var FIELD_LEVEL = '_level';
	
	var TreeStat = function(cfg) {
	  TreeStat.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(TreeStat, Stat);
	
	Util.augment(TreeStat, {
	  type: 'tree',
	  levels: 0,
	  totalValue: 0,
	  initDims: function(dims) {
	    dims.unshift(DIM_Y);
	    dims.unshift(DIM_X);
	  },
	  getValueField: function() {
	    var dims = this.getDims();
	    return dims[3] || FIELD_VLALUE;
	  },
	  // 获取children对应的字段
	  getChildrenField: function() {
	    var dims = this.getDims();
	    return dims[2];
	  },
	  // 执行统计
	  exec: function(frames) { // tree 的统计函数对分组无意义
	    var self = this;
	    var rst = [];
	    var totalFrame = Frame.merge.apply(null, frames);
	    rst.push(self.execFrame(totalFrame));
	    return rst;
	  },
	  // 设置node的信息
	  _traverseNodes: function(nodes, parent) {
	    var self = this;
	    var level;
	    if (parent) {
	      level = parent[FIELD_LEVEL] + 1;
	    } else {
	      level = 0;
	    }
	    var childrenField = self.getChildrenField();
	    var valueField = self.getValueField();
	    Util.each(nodes, function(node) {
	      node[FIELD_LEVEL] = level;
	      node.parent = parent;
	      var children = node[childrenField];
	      if (children) {
	        self._traverseNodes(node[childrenField], node);
	        if (valueField === FIELD_VLALUE) {
	          node[valueField] = self.getTotalValue(children);
	        }
	      } else {
	        if (valueField === FIELD_VLALUE) {
	          node[valueField] = 1;
	        }
	        if ((level + 1) > self.levels) {
	          self.levels = level + 1;
	        }
	      }
	    });
	  },
	  // 获取node对应的值信息，如果不存在值字段，则返回1
	  getNodeValue: function(node) {
	    var self = this;
	    var valueField = self.getValueField();
	    return node[valueField];
	  },
	  // 获取节点的位置信息
	  getNodeRange: function(node, siblings, parentRange) {
	    var self = this;
	    var level = node[FIELD_LEVEL];
	    var levels = self.levels;
	    var index = siblings.indexOf(node);
	    var parent = node.parent;
	    var preTotal = 0;
	    var totalValue;
	    var rangeX = 1;
	    var appendX = 0;
	    if (parent) {
	      totalValue = self.getNodeValue(parent);
	      rangeX = parentRange.end.x - parentRange.start.x;
	      appendX = parentRange.start.x;
	    } else {
	      totalValue = self.getTotalValue(siblings);
	    }
	    if (index > 0) {
	      var preNodes = siblings.slice(0, index);
	      preTotal = self.getTotalValue(preNodes);
	    }
	    var value = self.getNodeValue(node);
	    var range = {
	      start: {
	        x: preTotal / totalValue * rangeX + appendX,
	        y: level / levels
	      },
	      end: {
	        x: (preTotal + value) / totalValue * rangeX + appendX,
	        y: (level + 1) / levels
	      }
	    };
	
	    //x: (preTotal + value / 2) / totalValue,
	    //y: (level + 0.5) / levels
	    return range;
	  },
	  // 获取汇总值
	  getTotalValue: function(nodes) {
	    var self = this;
	    var valueField = self.getValueField();
	    var totalValue = 0;
	    Util.each(nodes, function(node) {
	      totalValue += node[valueField];
	    });
	    return totalValue;
	  },
	  /**
	   * @protected
	   * 获取统计的对象
	   * @param  {Object} obj 节点
	   * @param  {Object} range 位置信息
	   * @param {Number} totalValue 当前层级的汇总值
	   * @return {Object}  统计对象
	   */
	  getStatObject: function(obj, range /*, totalValue*/ ) {
	    var rst = Util.mix({}, obj);
	    rst[DIM_X] = (range.end.x + range.start.x) / 2;
	    rst[DIM_Y] = (range.end.y + range.start.y) / 2;
	    return rst;
	  },
	  _extractData: function(nodes, data, parentRange) {
	    var self = this;
	    var childrenField = self.getChildrenField();
	    Util.each(nodes, function(node) {
	      var range = self.getNodeRange(node, nodes, parentRange);
	      var obj = self.getStatObject(node, range);
	      data.push(obj);
	      if (node[childrenField]) {
	        self._extractData(node[childrenField], data, range);
	      }
	    });
	  },
	  execFrame: function(frame) {
	    var self = this;
	    var nodes = frame.toJSON();
	    var data = [];
	    self._traverseNodes(nodes);
	    self._extractData(nodes, data, 0);
	    var frame = new Frame(data);
	    return frame;
	  }
	});
	
	module.exports = TreeStat;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview tree rect
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var TreeBase = __webpack_require__(482);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	
	var Rect = function(dims) {
	  return new TreeBase({
	    dims: dims,
	    getStatObject: function(node, range) {
	      var rst = Util.mix({}, node);
	      rst[DIM_X] = [range.start.x, range.start.x, range.end.x, range.end.x];
	      rst[DIM_Y] = [range.start.y, range.end.y, range.end.y, range.start.y];
	      return rst;
	    }
	  });
	};
	
	module.exports = Rect;

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var TreeMap = __webpack_require__(485);
	
	function getStatFn(dims,ratio,mode) {
	  ratio = ratio || 1;
	  return new TreeMap({
	    dims: dims,
	    ratio: ratio,
	    mode: mode
	  });
	}
	
	var StatTreemap = function (dims,ratio) {
	  return getStatFn(dims,ratio,'squarify');
	};
	
	StatTreemap.squarify = function (dims,ratio) {
	  return getStatFn(dims,ratio,'squarify');
	};
	
	StatTreemap.sliceDice = function (dims,ratio) {
	  return getStatFn(dims,ratio,'slice-dice');
	};
	
	module.exports = StatTreemap;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Statistical function is used to generate a treemap
	 * @author dxq613@gmail.com
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var Stat = __webpack_require__(422);
	var Treemap = __webpack_require__(486);
	var Frame = __webpack_require__(270);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	var FIELD_VLALUE = '_value';
	
	function reflect (value) {
	  return 1 - value;
	}
	
	var TreemapStat = function(cfg){
	  TreemapStat.superclass.constructor.call(this,cfg);
	};
	
	Util.extend(TreemapStat,Stat);
	
	Util.augment(TreemapStat,{
	  type: 'treemap',
	  mode: 'squarify',
	  ratio: 1,
	  // 获取value 对应的字段
	  getValueField: function() {
	    var dims = this.getDims();
	    return dims[3] || FIELD_VLALUE;
	  },
	  // 获取children对应的字段
	  getChildrenField: function() {
	    var dims = this.getDims();
	    return dims[2];
	  },
	  initDims: function(dims){
	    dims.unshift(DIM_Y);
	    dims.unshift(DIM_X);
	  },
	  _copyObject: function(obj){
	    var rst = Util.mix({},obj);
	    /*var dims = this.getDims();
	    Util.each(dims,function(dim){
	      rst[dim] = obj[dim];
	    });*/
	    return rst;
	  },
	  // 提取数据
	  _extractData: function(nodes,arr){
	    var self = this;
	    for(var i = nodes.length -1; i >= 0; i--) {
	      var subNode = nodes[i];
	      //if (!subNode.children || !subNode.children.length) { // 只提取叶子节点
	        var obj = self._copyObject(subNode);
	        obj[DIM_X] = [];
	        obj[DIM_Y] = [];
	
	        // 点的顺序为左下角顺时针
	        obj[DIM_X].push(subNode.x); // 左下角
	        obj[DIM_Y].push(reflect(subNode.y + subNode.dy));
	
	        obj[DIM_X].push(subNode.x); // 左上角
	        obj[DIM_Y].push(reflect(subNode.y));
	
	        obj[DIM_X].push(subNode.x + subNode.dx); // 右上角
	        obj[DIM_Y].push(reflect(subNode.y));
	
	        obj[DIM_X].push(subNode.x + subNode.dx); //右下角
	        obj[DIM_Y].push(reflect(subNode.y + subNode.dy));
	
	        arr.push(obj);
	      //} else {
	        var childrenField = self.getChildrenField();
	        if (Util.isArray(subNode[childrenField])) {
	          self._extractData(subNode[childrenField],arr);
	        }
	      //}
	    }
	  },
	  // 执行统计
	  exec: function(frames){// tree map 的统计函数对分组无意义
	    var self = this;
	    var rst = [];
	    var totalFrame = Frame.merge.apply(null,frames);
	    rst.push(self.execFrame(totalFrame));
	    return rst;
	  },
	  execFrame: function (frame) {
	    var self = this;
	    var data = frame.toJSON();
	    var dims = self.getDims();
	    var treemap = new Treemap.Squarify({
	      nodes: data,
	      mode: self.mode,
	      childrenField: self.getChildrenField(),
	      valueField: self.getValueField(),// 第三个变量代表value的字段
	      ratio: self.ratio
	    });
	    var nodes = treemap.getNodes();
	    var data = [];
	    self._extractData(nodes,data);
	    var frame = new Frame(data);
	    return frame;
	  }
	});
	
	module.exports = TreemapStat;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	var Treemap = __webpack_require__(487);
	
	Treemap.Squarify = __webpack_require__(488);
	
	module.exports = Treemap;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	// Squarified Treemaps by Mark Bruls, Kees Huizing, and Jarke J. van Wijk
	// Modified to support a target aspect ratio by Jeff Heer
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var round = function(value){
	  return value;
	}; //Math.round;
	
	function sort(nodes,valueField) {
	  nodes.sort(function(obj1,obj2){
	    return obj1[valueField] - obj2[valueField];
	  });
	}
	
	function sum(nodes,valueField) {
	  var sum = 0;
	  Util.each(nodes,function(subNode){
	    sum += subNode[valueField];
	  });
	  return sum;
	}
	
	var TreeMap = function(cfg){
	  Util.mix(this,cfg);
	  this.rect = this.rect || {x: 0, y: 0, dx: 1, dy: 1};
	  this.init();
	};
	
	Util.augment(TreeMap,{
	  // 节点集合
	  nodes: null,
	  // 绘制区域
	  rect: null,
	  // 值对应的字段
	  valueField: 'value',
	  // 子元素对应的字段
	  childrenField: 'children',
	  // 初始化
	  init: function(){
	    var self = this;
	    var nodes = self.nodes;
	    var rect = self.rect;
	    var valueField = self.valueField;
	
	    sort(nodes,valueField);
	    Util.each(nodes, function (node) {
	      self._traverse(node); // 遍历，处理节点
	    });
	    var sumValue = sum(nodes,valueField);
	    self.processNodes(nodes,rect,sumValue);
	  },
	  _traverse: function (node,depth) {
	    var self = this;
	    depth = depth || 0;
	    node.depth = depth;
	    var childrenField = self.childrenField;
	    if (!node.parent) {
	      node.parent = null;
	    }
	    var children = node[childrenField];
	    if (Util.isArray(children)) {
	      sort(children,self.valueField);
	      Util.each(children,function(subNode){
	        subNode.parent = node;
	        self._traverse(subNode,depth + 1);
	      });
	    }
	  },
	  /**
	   * 获取treemap的节点，处理后的节点
	   * @return {Array} 节点集合
	   */
	  getNodes: function(){
	    return this.nodes;
	  },
	  /**
	   * 更改节点
	   * @param  {Array} nodes 节点集合
	   */
	  changeNodes: function(nodes){
	    this.nodes = nodes;
	    this.init();
	    return this;
	  },
	  /**
	   * 处理节点
	   * @protected
	   */
	  processNodes: function(/*node,rect,sumValue*/){
	
	  },
	  pad: function (node) {
	    var rect = {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	    return rect;
	  },
	  // Positions the specified row of nodes. Modifies `rect`.
	  position: function(row, u, rect, flush) {
	    var i = -1,
	        n = row.length,
	        x = rect.x,
	        y = rect.y,
	        v = u ? round(row.area / u) : 0,
	        o;
	    if (u === rect.dx) { // horizontal subdivision
	      if (flush || v > rect.dy) {
	        v = rect.dy; // over+underflow
	      } 
	
	      while (++i < n) {
	        o = row[i];
	        o.x = x;
	        o.y = y;
	        o.dy = v;
	        x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	      }
	      o.z = true;
	      o.dx += rect.x + rect.dx - x; // rounding error
	      rect.y += v;
	      rect.dy -= v;
	    } else { // vertical subdivision
	      if (flush || v > rect.dx){ 
	        v = rect.dx; // over+underflow
	      }
	      while (++i < n) {
	        o = row[i];
	        o.x = x;
	        o.y = y;
	        o.dx = v;
	        y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	      }
	      o.z = false;
	      o.dy += rect.y + rect.dy - y; // rounding error
	      rect.x += v;
	      rect.dx -= v;
	    }
	  },
	  scale: function (children, k) {
	    var i = -1,
	        n = children.length,
	        child,
	        area;
	    var valueField = this.valueField;
	    while (++i < n) {
	      area = (child = children[i])[valueField] * (k < 0 ? 0 : k);
	      child.area = isNaN(area) || area <= 0 ? 0 : area;
	    }
	  }
	});
	
	
	module.exports = TreeMap;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Squarified treemap
	 * reference https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	 */
	
	"use strict";
	
	var Util = __webpack_require__(169);
	var TreeMap = __webpack_require__(487);
	
	var Squarify = function (cfg) {
	  Squarify.superclass.constructor.call(this,cfg);
	};
	
	
	Util.extend(Squarify,TreeMap);
	
	Util.augment(Squarify, {
	  mode: 'squarify',
	  ratio: 0.5 * (1 + Math.sqrt(5)),
	  
	  processNodes: function(children,rect,sumValue){
	    var self = this;
	    if (Util.isArray(children) && children.length) {
	      //rect = rect,
	        var row = [];
	        var first = children[0];
	        var mode = self.mode;
	        var valueField = self.valueField;
	        var childrenField = self.childrenField;
	        var remaining = children.slice(); // copy-on-write
	        var child;
	        var best = Infinity; // the best row score so far
	        var score; // the current row score
	        var u = mode === "slice" ? rect.dx
	            : mode === "dice" ? rect.dy
	            : mode === "slice-dice" ? first.depth % 2 ? rect.dy : rect.dx
	            : Math.min(rect.dx, rect.dy); // initial orientation
	        var n;
	      self.scale(remaining, rect.dx * rect.dy / sumValue);
	      row.area = 0;
	      while ((n = remaining.length) > 0) {
	        row.push(child = remaining[n - 1]);
	        row.area += child.area;
	        if (mode !== "squarify" || (score = self.worst(row, u)) <= best) { // continue with this orientation
	          remaining.pop();
	          best = score;
	        } else { // abort, and try a different orientation
	          row.area -= row.pop().area;
	          self.position(row, u, rect, false);
	          u = Math.min(rect.dx, rect.dy);
	          row.length = row.area = 0;
	          best = Infinity;
	        }
	      }
	      if (row.length) {
	        self.position(row, u, rect, true);
	        row.length = row.area = 0;
	      }
	      children.forEach(function(subNode){
	        self.processNodes(subNode[childrenField],self.pad(subNode),subNode[valueField]);
	      });
	    }
	  },
	  worst: function (row, u) {
	    var self = this;
	    var s = row.area,
	        r,
	        rmax = 0,
	        rmin = Infinity,
	        i = -1,
	        n = row.length;
	  
	    while (++i < n) {
	      if (!(r = row[i].area)){
	        continue;
	      }
	      if (r < rmin) {
	        rmin = r;
	      } 
	      if (r > rmax) {
	        rmax = r;
	      }
	    }
	    s *= s;
	    u *= u;
	    return s
	        ? Math.max((u * rmax * self.ratio) / s, s / (u * rmin * self.ratio))
	        : Infinity;
	  }
	});
	
	module.exports = Squarify;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	var Stat = __webpack_require__(422);
	var Link = __webpack_require__(490);
	Link.Weight = __webpack_require__(491);
	Link.Sankey = __webpack_require__(492);
	
	Stat.link = function (dims, nodes) {
	  return new Link({
	    dims: dims,
	    nodes: nodes
	  });
	};
	Stat.link.weight = function (dims, nodes) {
	  return new Link.Weight( {
	    dims: dims,
	    nodes: nodes
	  });
	};
	Stat.link.sankey = function (dims, nodes) {
	  return new Link.Sankey( {
	    dims: dims,
	    nodes: nodes
	  });
	};
	
	module.exports = Stat;

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 节点和连接转换成画布上识别的数据格式
	 * @author dxq613@gmail.com
	 */
	
	var Util = __webpack_require__(169);
	var Stat = __webpack_require__(422);
	var Frame = __webpack_require__(270);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	
	var Link = function(cfg) {
	  Link.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Link, Stat);
	
	Util.augment(Link, {
	  type: 'link',
	  nodes: null,
	  // 获取from 对应的字段
	  _getFromField: function() {
	    var dims = this.getDims();
	    return dims[2];
	  },
	  // 获取children对应的字段
	  _getToField: function() {
	    var dims = this.getDims();
	    return dims[3];
	  },
	  initDims: function(dims) {
	    dims.unshift(DIM_Y);
	    dims.unshift(DIM_X);
	  },
	  execFrame: function(frame) {
	    var self = this;
	    var fromField = self._getFromField();
	    var toField = self._getToField();
	    var data = [];
	    frame.each(function(obj) {
	      var from = obj[fromField];
	      var to = obj[toField];
	      if (Util.isArray(from) && Util.isArray(to)) {
	        obj[DIM_X] = [from[0], to[0]];
	        obj[DIM_Y] = [from[1], to[1]];
	        data.push(obj);
	      } else {
	        var fromObj = self._findObj(from);
	        var toObj = self._findObj(to);
	        if (fromObj && toObj) { // 如果某个端点不存在，则不显示
	          obj[DIM_X] = [fromObj.x, toObj.x];
	          obj[DIM_Y] = [fromObj.y, toObj.y];
	          data.push(obj);
	        }
	      }
	    });
	    return new Frame(data);
	  },
	  // 初始化映射
	  _initNodeMap: function(nodes) {
	    var self = this;
	    if (Util.isObject(nodes)) {
	      return nodes;
	    }
	    var map = {};
	    Util.each(nodes, function(node) {
	      map[node.id] = node; // 实现成映射
	    });
	    self.nodesMap = map;
	    return map;
	  },
	  // 查找节点
	  _findObj: function(id) {
	    var self = this;
	    var nodes = self.nodes;
	    var nodesMap = self.nodesMap;
	    if (!nodesMap) {
	      nodesMap = self._initNodeMap(nodes);
	    }
	    return nodesMap[id];
	  }
	});
	
	module.exports = Link;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 带权重的连接线转换成画布上识别的数据格式
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 */
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Link = __webpack_require__(490);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	
	var Weight = function(cfg) {
	  Weight.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Weight, Link);
	
	Util.augment(Weight, {
	  type: 'weight',
	  detachment: false,
	  PRECISION: 0.001,
	  _getFromWeightField: function() {
	    var dims = this.getDims();
	    return dims[4];
	  },
	  _getToWeightField: function() {
	    var dims = this.getDims();
	    return dims[5];
	  },
	  initDims: function(dims) {
	    dims.unshift(DIM_Y);
	    dims.unshift(DIM_X);
	    this.fromWeightField = this._getFromWeightField();
	    this.toWeightField = this._getToWeightField() ? this._getToWeightField() : this.fromWeightField;
	  },
	  execFrame: function(frame) {
	    var self = this;
	    var fromField = self._getFromField();
	    var toField = self._getToField();
	    var detachment = self.detachment;
	    var inputStart = detachment ? 'inputStart' : 'start';
	    var outputStart = detachment ? 'outputStart' : 'start';
	    var data = [];
	    var fromWeight;
	    var toWeight;
	    frame.each(function(obj) {
	      var from = obj[fromField];
	      var to = obj[toField];
	      if (Util.isArray(from) && Util.isArray(to)) {
	        fromWeight = obj[self.fromWeightField];
	        toWeight = obj[self.toWeightField];
	        obj[DIM_X] = [from[0], from[0] + fromWeight, to[0], to[0] + toWeight];
	        obj[DIM_Y] = [from[1], from[1], to[1], to[1]];
	        data.push(obj);
	      } else {
	        var fromObj = self._findObj(from);
	        var toObj = self._findObj(to);
	        if (fromObj && toObj) { // 如果某个端点不存在，则不显示
	          var fromStart = fromObj[inputStart] ? fromObj[inputStart] : fromObj.x - 0.5 * fromObj.width;
	          var toStart = toObj[outputStart] ? toObj[outputStart] : toObj.x - 0.5 * toObj.width;
	
	          fromWeight = obj[self.fromWeightField] * fromObj.width / fromObj.value;
	          toWeight = obj[self.toWeightField] * toObj.width / toObj.value;
	
	          var fromEnd = fromStart + fromWeight;
	          var toEnd = toStart + toWeight;
	          if (((fromEnd - (fromObj.x + 0.5 * fromObj.width)) < self.PRECISION) && ((toEnd - (toObj.x + 0.5 * toObj.width)) < self.PRECISION)) {
	            obj[DIM_X] = [fromStart, fromEnd, toStart, toEnd];
	            obj[DIM_Y] = [fromObj.y, fromObj.y, toObj.y, toObj.y];
	            data.push(obj);
	          }
	          fromObj[inputStart] = fromEnd;
	          toObj[outputStart] = toEnd;
	        }
	      }
	    });
	    self.resetNodes();
	    return new Frame(data);
	  },
	  resetNodes: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var detachment = self.detachment;
	    var inputStart = detachment ? 'inputStart' : 'start';
	    var outputStart = detachment ? 'outputStart' : 'start';
	    nodes.map(function(node) {
	      delete node[inputStart];
	      delete node[outputStart];
	    });
	  }
	});
	
	module.exports = Weight;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 桑基图带权重的连接线转换成画布上识别的数据格式
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 */
	
	var Util = __webpack_require__(169);
	var Frame = __webpack_require__(270);
	var Weight = __webpack_require__(491);
	var DIM_X = '..x';
	var DIM_Y = '..y';
	
	var Sankey = function(cfg) {
	  Weight.superclass.constructor.call(this, cfg);
	};
	
	Util.extend(Sankey, Weight);
	
	Util.augment(Sankey, {
	  type: 'sankey',
	  detachment: true,
	  _getValueField: function() {
	    var dims = this.getDims();
	    return dims[4];
	  },
	  initDims: function(dims) {
	    dims.unshift(DIM_Y);
	    dims.unshift(DIM_X);
	    this.valueField = this._getValueField();
	  },
	  edgeLayout: function(type, widthPerValue, data) {
	    var self = this;
	    var nodes = self.nodes;
	    var sortFun = type === 'in' ? self.edgesSortByFromNodes : self.edgesSortByToNodes;
	    var edges = type + 'Edges';
	    var valueField = self.valueField;
	    nodes.forEach(function (node) {
	      if (node[edges].length > 0) {
	        node[edges].sort(sortFun.bind(self));
	        var start = node.x - 0.5 * node.width;
	        node[edges].forEach(function(edge) {
	          var edgeWidth = edge[valueField] * widthPerValue;
	          var end = start + edgeWidth;
	          if ((end - (node.x + 0.5 * node.width)) < self.PRECISION) {
	            if (Util.isNull(edge[DIM_X])) {
	              edge[DIM_X] = [];
	            }
	            if (Util.isNull(edge[DIM_Y])) {
	              edge[DIM_Y] = [];
	            }
	            edge[DIM_X] .push(start);
	            edge[DIM_X] .push(end);
	            edge[DIM_Y] .push(node.y);
	            edge[DIM_Y] .push(node.y);
	            data.push(edge);
	          }
	          start = end;
	        });
	      }
	    });
	  },
	  exec: function() {
	    var nodes = this.nodes;
	    var valueField = this.valueField;
	    var widthPerValue = nodes[0].width / nodes[0][valueField];
	    var data = [];
	    this.edgeLayout('out', widthPerValue, data);
	    this.edgeLayout('in', widthPerValue, data);
	    return [new Frame(data)];
	  },
	  edgesSortByToNodes: function(a, b) {
	    var toField = this._getToField();
	    var aToNode = this._findObj(a[toField]);
	    var bToNode = this._findObj(b[toField]);
	    return aToNode.x - bToNode.x;
	  },
	  edgesSortByFromNodes: function(a, b) {
	    var fromField = this._getFromField();
	    var aFromNode = this._findObj(a[fromField]);
	    var bFromNode = this._findObj(b[fromField]);
	    return aFromNode.x - bFromNode.x;
	  }
	});
	
	module.exports = Sankey;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	var Layout = {};
	Layout.Tree = __webpack_require__(494);
	Layout.Linear = __webpack_require__(496);
	Layout.Sankey = __webpack_require__(497);
	
	module.exports = Layout;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 树节点布局
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	var FIELD_LEVEL = 'level';
	var TreeNode = __webpack_require__(495);
	
	function snapHalf (count) {
	  return (count) / 2;// + 1;
	}
	
	var Tree = function(cfg) {
	  Util.mix(this, cfg);
	  this._init();
	};
	
	Util.augment(Tree, {
	  nodes: null,
	  childrenField: 'children',
	  collapsedField: 'collapsed',
	  width: 1,
	  height: 1,
	  _levels: 1,
	  idField: null, // 如果使用其他字段作为id
	  /**
	   * 附加到边的数据，树仅需要节点就可以构建树，但是有时候边需要信息，所以存储到子节点上
	   * @type {Array}
	   */
	  edgeFields: null,
	  _preX: {},
	  dx: 0,
	  dy: 0,
	  nodeAlign: 'start',
	  _totalLeafCount: 0,
	  _init: function() {
	    var self = this;
	    var nodes = self.nodes.slice(0);
	    self._traverseNodes(nodes); // 遍历所有节点，计算最大深度
	    self.originDx = self.dx;
	    self.originDy = self.dy;
	    self.nodes = nodes;
	    self._initDxDy();
	  },
	  _initDxDy: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var levels = self._levels;
	    self._preX = {};
	    var leafs = self._getAlignCount(nodes);
	    self._totalLeafCount = leafs;
	    if (!self.originDx) {
	      self.dx = self.width / (leafs + 0.5); // 宽度按照子节点的总数划分
	    }
	    if (!self.originDy) {
	      self.dy = self.height / (levels); // 高度按照层级划分
	    }
	  },
	  reset: function() {
	    this._initDxDy();
	  },
	  _traverseNodes: function(nodes, parent) {
	    var self = this;
	    var level;
	    var parentId;
	    if (parent) {
	      level = parent[FIELD_LEVEL] + 1;
	      parentId = parent.id;
	    } else {
	      level = 0;
	      parentId = '';
	    }
	    var childrenField = self.childrenField;
	    var idField = self.idField;
	    Util.each(nodes, function(node, index) {
	      node[FIELD_LEVEL] = level;
	      node.parent = parent;
	      if (idField) {
	        node.id = node[idField];
	      }
	      if (!node.id) {
	        node.id = parentId ? parentId + '-' + index : index.toString();
	      }
	      var children = node[childrenField];
	      if (children && children.length) {
	        self._traverseNodes(node[childrenField], node);
	      } else {
	        if ((level + 1) > self._levels) {
	          self._levels = level + 1;
	        }
	      }
	    });
	  },
	  // 获取排布在画布y轴方向上不遮挡的节点的个数
	  _getAlignCount: function(nodes) {
	    var self = this;
	    var total = 0;
	    var step = 0;
	    var preChildCount = 0;
	    var childrenField = self.childrenField;
	    var nodeCount = nodes.length;
	    var collapsedField = self.collapsedField;
	    Util.each(nodes, function(node, index) {
	      var children = node[childrenField];
	      if (!children || !children.length || node[collapsedField]) { // 如果不存在子节点，则累加间隔
	        step += 1;
	        if (index === nodeCount - 1 && nodeCount !== 1) {
	          step += 0.5;
	        }
	      } else {
	        var halfPre = preChildCount / 2;
	        total += halfPre;
	        if (halfPre > 1 && halfPre < step) {
	          step -= halfPre;
	        }
	        var childCount = self._getAlignCount(children);
	        var half = snapHalf(childCount);
	        step += 1;
	        total += Math.max(half, step);
	        step = 0;
	        preChildCount = childCount;
	        node._alignCount = childCount;
	      }
	    });
	    // step = step - snapHalf(preChildCount);
	    step = Math.max(step, snapHalf(preChildCount));
	    total += Math.abs(step);
	    return total;
	  },
	  _getMaxPreXParent: function(node) {
	    if (!node) {
	      return null;
	    }
	    var self = this;
	    var preXMap = self._preX;
	    var level = node.level;
	    var curX = preXMap[level] || 0;
	    var max = curX;
	    var curLevel = level;
	    var parent = node.parent;
	    var rst = node;
	    // var childrenField = self.childrenField;
	    // var slibings = parent[childrenField];
	    if ((parent && parent.children[0] === node) || curX === 0) {
	      while (curLevel > 0 && parent) {
	        var preLevel = curLevel - 1;
	        var preX = preXMap[preLevel] || 0;
	        if (preX > max) {
	          max = preX;
	          rst = parent;
	        }
	        curLevel = preLevel;
	        if (parent.parent && parent.parent.children[0] !== parent) {
	          break;
	        }
	        parent = parent.parent;
	      }
	    }
	    return rst;
	  },
	  _layoutNodes: function(nodes, arr) {
	    var self = this;
	    var childrenField = self.childrenField;
	    var collapsedField = self.collapsedField;
	    var nodeCount = nodes.length;
	    Util.each(nodes, function(node, index) {
	      var children = node[childrenField];
	      var level = node[FIELD_LEVEL];
	      var dx = self.dx;
	      var dy = self.dy;
	      var treeNode = new TreeNode(node);
	      arr.push(treeNode); // 前序遍历，保证节点的父子顺序
	      treeNode.y = (level) * dy;  // 层级位置
	      if (self.nodeAlign === 'middle') {
	        treeNode.y += 1 / 2 * dy;
	      } else if (self.nodeAlign === 'end') {
	        treeNode.y += dy;
	      }
	      var preX = self._preX[level] || 0;
	      if (children && children.length && !node[collapsedField]) {
	        self._layoutNodes(children, arr);
	        var first = children[0];
	        var last = children[children.length - 1];
	        var middle = (first.x + last.x) / 2;
	        treeNode.x = Math.max(middle, preX + dx);// middle; // */
	        self._preX[level] = treeNode.x;
	      } else {
	        if (node.parent && index === 0) {
	          var parent = self._getMaxPreXParent(node.parent);
	          var parentPreX = self._preX[level - 1] || 0;
	          if (parent) {
	            parentPreX = self._preX[parent.level] || 0;
	            if (parent === node.parent && node.parent.children.length === 1) {
	              // parentPreX += dx / 2;
	            } else {
	              var childCount = parent._alignCount;
	              if (parentPreX < dx) {
	                parentPreX -= ((childCount) * dx) / 2 - dx / 2;
	              } else {
	                parentPreX -= ((childCount) * dx) / 2 - dx;
	              }
	            }
	          }
	          // parentPreX += dx;
	          preX = Math.max(preX, parentPreX);
	        }
	        /* if (index === 0 && nodeCount > 1) {// 第一个增加间距
	          preX += dx * 0.2;
	        } */
	        treeNode.x = preX + dx;
	        self._preX[level] = treeNode.x;
	        if (index === nodeCount - 1 && nodeCount > 1) { // 最后一个增加间距
	          self._preX[level] += dx * 0.5;
	        }
	      }
	      node.x = treeNode.x;
	      node.y = treeNode.y;
	    });
	  },
	  // 获取连接线
	  _getEdges: function(nodes, parent) {
	    var self = this;
	    var edges = [];
	    var childrenField = self.childrenField;
	    var collapsedField = self.collapsedField;
	    var edgeFields = self.edgeFields;
	    if (parent && parent[collapsedField]) { // 收缩节点的边不展示
	      return edges;
	    }
	    Util.each(nodes, function(node) {
	      if (parent) {
	        var edge = {
	          source: parent.id,
	          target: node.id
	        };
	        if (edgeFields) {
	          Util.each(edgeFields, function(field) {
	            edge[field] = node[field];
	          });
	        }
	        edges.push(edge);
	      }
	      if (node[childrenField]) {
	        edges = edges.concat(self._getEdges(node[childrenField], node));
	      }
	    });
	    return edges;
	  },
	  /**
	   * 布局完成的节点
	   * @return {Array} 节点集合
	   */
	  getNodes: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var rst = [];
	    self._layoutNodes(nodes, rst);
	    self._fixedRange(rst);
	    return rst;
	  },
	  // 保证所有的节点都在范围内
	  _fixedRange: function(nodes) {
	    var maxX = 0;
	    var width = this.width;
	    if (this._totalLeafCount > 3) {
	      Util.each(this._preX, function(v) {
	        if (maxX < v) {
	          maxX = v;
	        }
	      });
	      var ratio = (width - this.dx / 2) / maxX;
	      Util.each(nodes, function(node) {
	        node.x = node.x * ratio;
	      });
	    }
	  },
	  /**
	   * 获取节点之间的连接线
	   * @return {Array} 连接线集合
	   */
	  getEdges: function() {
	    var self = this;
	    var nodes = self.nodes;
	    return self._getEdges(nodes);
	  },
	  _findBy: function(nodes, callback) {
	    var self = this;
	    var rst = null;
	    var childrenField = self.childrenField;
	    Util.each(nodes, function(node) {
	      var children = node[childrenField];
	      if (callback(node)) {
	        rst = node;
	      } else if (children && children.length) {
	        rst = self._findBy(children, callback);
	      }
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  },
	  /**
	   * 根据id查找节点
	   * @param  {String} id 节点id
	   * @return {Object} 节点，如果没有则返回null
	   */
	  findNode: function(id) {
	    return this._findBy(this.nodes, function(node) {
	      return node.id.toString() === id.toString();
	    });
	  }
	});
	
	module.exports = Tree;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 封装树节点，不破坏树的结构
	 * @author dxq613@gmail.com
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	var TreeNode = function(cfg) {
	  Util.mix(this, cfg);
	};
	
	Util.augment(TreeNode, {
	  /**
	   * 父节点
	   * @type {TreeNode}
	   */
	  parent: null,
	
	  /**
	   * 层级
	   * @type {Number}
	   */
	  level: 0,
	
	  /**
	   * 子节点
	   * @type {Array}
	   */
	  children: null,
	
	  /**
	   * 位置x
	   * @type {Number}
	   */
	  x: 0,
	
	  /**
	   * 位置y
	   * @type {Number}
	   */
	  y: 0
	
	});
	
	module.exports = TreeNode;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 线性节点布局
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	
	var Linear = function(cfg) {
	  Util.mix(this, cfg);
	  this._init();
	};
	
	Util.augment(Linear, {
	  // 节点数据
	  nodes: null,
	  // 边数据
	  edges: null,
	  // 生成的节点的y坐标
	  y: 0,
	  // 是否按照节点权重布局
	  hasWeight: false,
	  // 唯一区分的字段名，当节点数据没有id字段时使用的字段
	  idField: 'name',
	  // 节点权重字段
	  valueField: 'value',
	  // 源节点字段名
	  sourceField: 'source',
	  // 目标节点字段名
	  targetField: 'target',
	  // 边的起始权值
	  sourceWeightField: 'sourceWeight',
	  // 边的结束权值
	  targetWeightField: 'targetWeight',
	  // 权重之和的最大值
	  maxValue: null,
	  // 生成节点的高度
	  thickness: 0.05,
	  // 生成节点的边距
	  margin: 0.01,
	  // 节点的输入边和输出边是否分开计算
	  detachment: false,
	  _init: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var valueField = self.valueField;
	    var targetWeightField = self.targetWeightField;
	    if (Util.isNull(nodes)) {
	      var edges = self.edges.slice(0);
	      self.edges = edges;
	      if (Util.isNull(edges[0][targetWeightField])) {
	        self.targetWeightField = self.sourceWeightField;
	      }
	      nodes = self._createNodes(); // 创建节点
	    } else {
	      nodes = nodes.slice(0);
	      self.nodes = nodes;
	    }
	    if (self.hasWeight && Util.isNull(nodes[0][valueField])) {
	      self._initNodeMap(); // 节点映射
	      self._calculateValue(); // 自动计算节点权重value
	    }
	    self._setMarginWidth(nodes);
	  },
	  // 节点创建函数
	  _createNodes: function() {
	    var self = this;
	    var edges = self.edges;
	    var sourceField = self.sourceField;
	    var targetField = self.targetField;
	    var nodes = [];
	    var map = {};
	    edges.forEach(function(edge) {
	      var sId = edge[sourceField];
	      var tId = edge[targetField];
	      self._creatNode(sId, map, nodes);
	      self._creatNode(tId, map, nodes);
	    });
	    self.nodes = nodes;
	    return nodes;
	  },
	  _creatNode: function(id, map, nodes) {
	    if (Util.isNull(map[id])) {
	      var node = { id: id };
	      nodes.push(node);
	      map[id] = node;
	    }
	  },
	  // 初始化节点映射函数
	  _initNodeMap: function() {
	    var self = this;
	    var idField = self.idField;
	    var targetField = self.targetField;
	    var sourceField = self.sourceField;
	    var nodes = self.nodes;
	    if (Util.isObject(nodes)) {
	      return nodes;
	    }
	    var map = {};
	    Util.each(nodes, function(node) {
	      if (Util.isNull(node.id)) {
	        node.id = node[idField];
	      }
	      if (!Util.isNull(node.y)) {
	        delete node.y;
	      }
	      node.inEdges = self._getEdgeOfCurNode(node, targetField);
	      node.outEdges = self._getEdgeOfCurNode(node, sourceField);
	      map[node.id] = node;
	    });
	    self.nodesMap = map;
	    self.nodes = nodes;
	    return map;
	  },
	  // 获取当前节点的边,type是边的类型，$sourceField代表输出边$targetField输入边
	  _getEdgeOfCurNode: function(node, type) {
	    var edges = this.edges;
	    var curEdge = edges.filter(function(edge) {
	      return edge[type] === node.id;
	    });
	    return curEdge;
	  },
	  _calculateValue: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var valueField = self.valueField;
	    nodes.forEach(function(node) {
	      if (Util.isNull(node[valueField])) {
	        self._getValueFromEdges(node);
	      }
	    });
	  },
	    // 获取节点的权重
	  _getValueFromEdges: function(node) {
	    var valueField = this.valueField;
	    var sourceField = this.sourceField;
	    var targetField = this.targetField;
	    var sourceWeightField = this.sourceWeightField;
	    var targetWeightField = this.targetWeightField;
	    var value = 0;
	    var detachment = this.detachment;
	    if (detachment) {
	      var inValue = 0;
	      var outValue = 0;
	      node.outEdges.forEach(function(edge) {
	        outValue += edge[sourceWeightField];
	      });
	      node.inEdges.forEach(function(edge) {
	        inValue += edge[targetWeightField];
	      });
	      value = Math.max(inValue, outValue);
	    } else {
	      node.outEdges.forEach(function(edge) {
	        value += edge[sourceWeightField];
	      });
	      node.inEdges.forEach(function(edge) {
	        if (edge[sourceField] !== edge[targetField]) {
	          value += edge[targetWeightField];
	        }
	      });
	    }
	    node[valueField] = value;
	    return value;
	  },
	  // 配置margin的总宽度
	  _setMarginWidth: function(nodes) {
	    var margin = this.margin;
	    var length = nodes.length;
	    var marginWidth = 2 * length * margin;
	    this.marginWidth = marginWidth;
	  },
	  /**
	   * 布局完成的节点
	   * @return {Array} 节点集合
	   */
	  getNodes: function() {
	    var self = this;
	    var nodes = self.nodes;
	    if (self.hasWeight) {
	      self._layoutByWeight(nodes);
	    } else {
	      self._layout(nodes);
	    }
	    return nodes;
	  },
	  _layout: function(nodes) {
	    var length = nodes.length;
	    var deltX = 1 / (length);
	    var y = this.y;
	    nodes.map(function(node, index) {
	      node.x = (index + 0.5) * deltX;
	      node.y = y;
	    });
	  },
	   // 权重布局
	  _layoutByWeight: function(nodes) {
	    var y = this.y;
	    var marginWidth = this.marginWidth;
	    var thickness = this.thickness;
	    var valueField = this.valueField;
	    var totalValue = 0;
	    nodes.forEach(function(node) {
	      totalValue += node[valueField];
	    });
	    var maxValue = this.maxValue || totalValue;
	
	    nodes.map(function(node) {
	      node.weight = node[valueField] / maxValue;
	      node.width = node.weight * (1 - marginWidth);
	      node.height = thickness;
	      node.y = y;
	    });
	    this._layoutX(nodes);
	  },
	  _layoutX: function(nodes) {
	    var margin = this.margin;
	    nodes.map(function(node, index) {
	      var deltX = 0;
	      for (var i = index - 1; i >= 0; i--) {
	        deltX += nodes[i].width + 2 * margin;
	      }
	      node.x = margin + 0.5 * node.width + deltX;
	    });
	  },
	  reset: function() {
	    this._init();
	  }
	});
	
	module.exports = Linear;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 线性节点布局
	 * @author minnuo <audrey.tm@alibaba-inc.com>
	 */
	
	'use strict';
	
	var Util = __webpack_require__(169);
	__webpack_require__(498);
	var Linear = __webpack_require__(496);
	
	var Sankey = function(cfg) {
	  Util.mix(this, cfg);
	  this._init();
	};
	
	Util.extend(Sankey, Linear);
	
	Util.augment(Sankey, {
	  hasWeight: true,
	  // 级数的字段名
	  stepField: 'step',
	  // 总级数
	  totalStep: 0,
	  // 重复布局计算的次数
	  calculationTimes: 2,
	  _init: function() {
	    var edges = this.edges.slice(0);
	    this.edges = edges;
	    this._initNode();
	  },
	  // 节点数据处理
	  _initNode: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var stepField = self.stepField;
	    var valueField = self.valueField;
	
	    if (Util.isNull(nodes)) {
	      nodes = self._createNodes(); // 创建节点
	    } else {
	      nodes = nodes.slice(0);
	      self.nodes = nodes;
	    }
	    self._initNodeMap(); // 节点映射
	    if (Util.isNull(nodes[0][stepField])) {
	      self._calculateStep(); // 自动计算节点级数step
	    }
	    if (Util.isNull(nodes[0][valueField])) {
	      self._calculateValue(); // 自动计算节点权重value
	    }
	  },
	  _calculateStep: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var stepField = self.stepField;
	    nodes.forEach(function(node) {
	      if (Util.isNull(node[stepField])) {
	        self._getStepFromEdges(node);
	      }
	    });
	    // 获取所有叶子节点
	    var lastStepNodes = nodes.filter(function(node) {
	      return node.outEdges.length === 0;
	    });
	    // 叶子节点统一放在最后一级
	    lastStepNodes.map(function(node) {
	      node.step = self.totalStep - 1;
	    });
	  },
	  // 获取节点的权重
	  _getValueFromEdges: function(node) {
	    var valueField = this.valueField;
	    var value = 0;
	    var step = node.step;
	    if (step === 0) {
	      node.outEdges.forEach(function(edge) {
	        value += edge[valueField];
	      });
	    } else {
	      node.inEdges.forEach(function(edge) {
	        value += edge[valueField];
	      });
	    }
	    node.value = value;
	    return value;
	  },
	  // 获取节点的级数
	  _getStepFromEdges: function(node) {
	    var self = this;
	    var sourceField = self.sourceField;
	    var step = 0;
	    if (node.inEdges.length > 0) {
	      node.inEdges.forEach(function(edge) {
	        var preNode = self._findObj(edge[sourceField]);
	        var preStep;
	        if (Util.isNull(preNode.step)) {
	          preStep = self._getStepFromEdges(preNode); // 获取上一级节点级数
	        } else {
	          preStep = preNode.step;
	        }
	        step = Math.max(preStep + 1, step); // 取上一级节点级数的最大值加1
	      });
	    }
	    node.step = step;
	    self.totalStep = Math.max(self.totalStep, step + 1);
	    return step;
	  },
	  // 查找节点
	  _findObj: function(id) {
	    var nodesMap = this.nodesMap;
	    return nodesMap[id];
	  },
	  /**
	   * 节点分级布局
	   * @return {Array} 节点集合
	   */
	  getNodes: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var sourceField = self.sourceField;
	    var targetField = self.targetField;
	    var stepField = self.stepField;
	    var valueField = self.valueField;
	    var maxValues = [];
	    var nodeArray = [];
	    var result = [];
	    // 将节点按照分级进行分组
	    nodes.forEach(function(node) {
	      var step = node[stepField];
	      if (nodeArray[step] === undefined) {
	        nodeArray[step] = [];
	      }
	      nodeArray[step].push(node);
	      if (Util.isNull(maxValues[step])) {
	        maxValues[step] = node[valueField];
	      } else {
	        maxValues[step] += node[valueField];
	      }
	    });
	
	    self.maxValue = Math.max.apply(null, maxValues);
	
	    self.totalStep = nodeArray.length;
	    // 第一级设置全局margin宽度
	    self._setMarginWidth(nodeArray[0]);
	    // 第一级按照权重布局
	    self._layoutByWeight(nodeArray[0]);
	    // 第一次正向布局
	    self._layoutNodes(nodeArray, sourceField);
	    // 重复$calculationTimes次正反布局
	    for (var i = self.calculationTimes; i > 0; i--) {
	      self._layoutNodes(nodeArray.reverse(), targetField);
	      self._layoutNodes(nodeArray.reverse(), sourceField);
	    }
	     // 串联结果数据
	    nodeArray.forEach(function(nodeList) {
	      result = result.concat(nodeList);
	    });
	
	    self.normalization(result);
	
	    return result;
	  },
	  normalization: function(data) {
	    var max = 1;
	    data.forEach(function(node){
	      if (node.x > max) {
	        max = node.x;
	      }
	    });
	    if(max > 1){
	      data.map(function(node){
	        node.x = node.x / max;
	        node.width = node.width / max;
	      });
	    }
	    return;
	  },
	  /**
	   * 节点布局函数
	   * @param nodeArray {Array} 分级节点数据集
	   * @param type {String} 布局类型，$sourceField代表正向布局，$targetField代表反向布局
	   * @return result {Array} 完成布局的结果集
	   **/
	  _layoutNodes: function(nodeArray, type) {
	    var self = this;
	    // 第二级之后按照前面的布局调整位置
	    if (nodeArray.length >= 2) {
	      var i;
	      for (i = 1; i < nodeArray.length; i++) {
	        self.y = i / (self.totalStep - 1);
	        self._layoutHighStep(nodeArray[i], type);
	        nodeArray[i].sort(function(a, b) {
	          return a.x - b.x;
	        });
	        // 冲突处理
	        self._handleConflict(nodeArray[i]);
	      }
	      // 最后一级调整位置完成并排序后按权重布局
	      self._layoutX(nodeArray[i - 1]);
	    }
	  },
	  // 冲突节点处理
	  _handleConflict: function(nodes) {
	    var margin = this.margin;
	    nodes.map(function(node, index) {
	      if (index > 0) {
	        if (node.x - 0.5 * node.width <= nodes[index - 1].x + 0.5 * nodes[index - 1].width + 2 * margin) {
	          node.x = nodes[index - 1].x + 0.5 * nodes[index - 1].width + 2 * margin + 0.5 * node.width;
	        }
	      }
	    });
	  },
	  /**
	   * 第二级和第二级以后的节点布局
	   * @param curNodes {Array} 某级节点数据
	   * @param preNodes {Array} 已完成布局的节点数据
	   * @param type {String} 布局类型，$sourceField代表正向布局，$targetFied代表反向布局,$sourceField代表输出边$targetField输入边
	   **/
	  _layoutHighStep: function(curNodes, type) {
	    var self = this;
	    var valueField = self.valueField;
	    var maxValue = self.maxValue;
	    var thickness = self.thickness;
	    var marginWidth = self.marginWidth;
	    var y = self.y;
	    var edgeType = type === self.sourceField ? self.targetField : self.sourceField; // 正向布局获取输入边，反向布局获取输出边
	    curNodes.map(function(node) {
	      var curEdges = self._getEdgeOfCurNode(node, edgeType);
	      var x = 0;
	      var linkNode;
	      curEdges.forEach(function(edge) {
	        linkNode = self._findObj(edge[type]);
	        var value = edge[valueField];
	        x += linkNode.x * value / node[valueField];
	      });
	      node.x = x;
	      node.weight = node[valueField] / maxValue;
	      node.width = node.weight * (1 - marginWidth);
	      node.height = thickness;
	      node.y = node.y === undefined ? y : node.y;
	    });
	  },
	  /**
	   *  边处理函数
	   *  @return {Array} 边集合
	   **/
	  getEdges: function() {
	    for (var i = this.calculationTimes; i > 0; i--) {
	      this._layoutEdges();
	    }
	    return this.edges;
	  },
	  // 边布局函数
	  _layoutEdges: function() {
	    var self = this;
	    var nodes = self.nodes;
	    var stepField = self.stepField;
	    var targetField = self.targetField;
	    var sourceField = self.sourceField;
	    var totalStep = self.totalStep;
	    // 节点的输入边排序
	    nodes.forEach(function(node) {
	      if (node[stepField] !== 0) {
	        self._edgeSort(node.inEdges, sourceField);
	      }
	    });
	    // 节点的输出边排序
	    nodes.forEach(function(node) {
	      if (node[stepField] !== totalStep) {
	        self._edgeSort(node.outEdges, targetField);
	      }
	    });
	  },
	  /** 边排序函数
	   * @param curEdges {Array} 连接到同一节点的边的集合
	   * @param type {String} 排序类型，$sourceField代表输入边排序，$targetField代表输出边排序
	   **/
	  _edgeSort: function(curEdges, type) {
	    var self = this;
	    var edges = self.edges;
	    curEdges.sort(function(a, b) {
	      return self._findObj(a[type]).x - self._findObj(b[type]).x;
	    });
	    curEdges.forEach(function(edge, index) {
	      for (var i = 0; i < index; i++) {
	        var preIndex = self._findIndex(edges, curEdges[i]);
	        var curIndex = self._findIndex(edges, edge);
	        if (self._findObj(curEdges[i][type]).x > self._findObj(edge[type]).x) {
	          Util.insertBefore(edges, curIndex, preIndex);
	        } else {
	          Util.insertAfter(edges, curIndex, preIndex);
	        }
	      }
	    });
	  },
	  // 从数组中找到元素的索引值
	  _findIndex: function(arr, item) {
	    var sourceField = this.sourceField;
	    var targetField = this.targetField;
	    var index = arr.findIndex(function(element) {
	      return (element[sourceField] === item[sourceField]) && (element[targetField] === item[targetField]);
	    });
	    return index;
	  }
	});
	
	module.exports = Sankey;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(169);
	
	Util.mix(Util, {
	  // 将index1处元素移动到index2前
	  insertBefore: function(arr, index1, index2) {
	    if (index1 <= index2) {
	      return;
	    }
	    var item = arr.splice(index1, 1)[0];
	    arr.splice(index2 - 1, 0, item);
	  },
	  // 将index1处元素移动到index2后
	  insertAfter: function(arr, index1, index2) {
	    if (index1 >= index2) {
	      return;
	    }
	    var item = arr.splice(index1, 1)[0];
	    arr.splice(index2, 0, item);
	  }
	});
	module.exports = Util;


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// const win = window;
	// const doc = win.document;
	var SERVER_URL = 'https://kcart.alipay.com/web/bi.do';
	var Util = __webpack_require__(169);
	
	var Monitor = function () {
	  function Monitor(opt) {
	    _classCallCheck(this, Monitor);
	
	    var _self = this;
	    var config = opt || {};
	    var image = new Image();
	
	    Util.mix(_self, {
	      image: image,
	      // cnaServer: 'https://log.mmstat.com/5.gif?url=https://kcart.alipay.com/web/1.do?',
	      server: SERVER_URL
	    }, config);
	
	    // if (!/\bcna=/.test(doc.cookie)) {
	    //   _self._ing = true;
	    //   image.src = _self.cnaServer;
	    // }
	  }
	  /**
	   * 发送请求
	   * @param {object} opt 埋点记录参数
	   *   opt.pg：访问的页面url
	   */
	
	
	  _createClass(Monitor, [{
	    key: 'log',
	    value: function log(opt) {
	      var _self = this;
	      var config = opt || {};
	
	      var newObj = Util.mix({
	        pg: document.URL,
	        r: new Date().getTime()
	      }, config);
	
	      var d = encodeURIComponent(JSON.stringify([newObj]));
	
	      _self.image.src = _self.server + '?BIProfile=merge&d=' + d;
	    }
	  }]);
	
	  return Monitor;
	}();
	
	exports.default = Monitor;
	module.exports = exports['default'];

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview track g2
	 * @author dxq613@gmail.com
	 */
	
	var Monitor = __webpack_require__(499);
	// 延迟发送请求
	setTimeout(function () {
	  if (Monitor.tracking) {
	    var m = new Monitor();
	    m.log({
	      g2: true,
	      version: '2.3.1',
	      page_type: 'page'
	    });
	  }
	}, 3000);


/***/ }),
/* 501 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.default = prefixCls;
	function prefixCls(prefix) {
	  var ident = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
	
	  var hasOwn = {}.hasOwnProperty;
	
	  return function className() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var classes = [];
	
	    if (!args || args.length === 0 || Object.keys(args).length === 0) {
	      return prefix;
	    }
	
	    for (var i = 0; i < args.length; i++) {
	      var arg = args[i];
	      var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
	
	      if (argType === 'string' || argType === 'number') {
	        if (!arg) {
	          classes.push(prefix);
	        } else {
	          classes.push('' + prefix + ident + args[i]);
	        }
	      } else if (Array.isArray(arg)) {
	        classes.push(className.apply(null, arg));
	      } else if (argType === 'object') {
	        for (var key in arg) {
	          if (hasOwn.call(arg, key) && arg[key]) {
	            classes.push('' + prefix + ident + key);
	          }
	        }
	      } else if (argType === 'function') {
	        classes.push(arg());
	      }
	    }
	
	    return classes.join(' ');
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 502 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var defaultColorSet = exports.defaultColorSet = {
	  primary: '#6F6E6F',
	  secondary: '#9B9B9B',
	  highlightText: '#4990E2',
	  border: '#4990E2',
	  background: '#FFF',
	  text: {
	    key: '#9B9B9B',
	    value: '#417505'
	  },
	  meta: {
	    title: '#c5c5c5',
	    value: '#417505'
	  }
	};

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _g = __webpack_require__(167);
	
	var _g2 = _interopRequireDefault(_g);
	
	__webpack_require__(166);
	
	var _Interval = __webpack_require__(504);
	
	var _Interval2 = _interopRequireDefault(_Interval);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  Interval: _Interval2.default
	};
	module.exports = exports['default'];

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _g = __webpack_require__(167);
	
	var _g2 = _interopRequireDefault(_g);
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _light = __webpack_require__(505);
	
	var _light2 = _interopRequireDefault(_light);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// G2.Global.setTheme(theme);
	console.log('>> G2', _g2.default.version);
	var defaultIntervalConfig = {
	  size: 10,
	  xAxis: false,
	  yAxis: false,
	  range: [0.1, 0.9]
	};
	
	var IntervalConfigs = {
	  small: { size: 10 },
	  'very-small': { size: 7 },
	  mini: { size: 6, range: [0.1, 0.9] },
	  quarter: { size: 14, xAxis: true, yAxis: true },
	  third: { size: 17 },
	  half: { size: 17 },
	  large: { size: 17 },
	  full: { size: 17, range: [0.05, 0.95] }
	};
	
	var Interval = function (_Component) {
	  _inherits(Interval, _Component);
	
	  function Interval() {
	    _classCallCheck(this, Interval);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this));
	
	    _this.renderChat = function () {
	      var _chart$source;
	
	      if (_this._chart_inst) {
	        _this._chart_inst.off('plotmove');
	        _this._chart_inst.destroy();
	        _this._chart_inst = null;
	      }
	      var _this$props = _this.props,
	          data = _this$props.data,
	          xAxis = _this$props.xAxis,
	          yAxis = _this$props.yAxis,
	          grid = _this$props.grid;
	      var _this$context = _this.context,
	          size = _this$context.size,
	          colorSet = _this$context.colorSet;
	
	      var config = _extends({}, defaultIntervalConfig, IntervalConfigs[size]);
	      var currentTheme = _light2.default[size] || _light2.default;
	      var isTinyMode = ['small', 'very-small', 'mini', 'quarter'].indexOf(size) !== -1;
	      var tooltipEnable = ['third', 'half'].indexOf(size) !== -1;
	      var chart = new _g2.default.Chart(_extends({}, currentTheme(xAxis, yAxis, grid, colorSet), {
	        id: _this.state.chatId
	      }));
	
	      _this._chart_inst = chart;
	      chart.source(data, (_chart$source = {}, _defineProperty(_chart$source, '' + xAxis, {
	        range: config.range
	      }), _defineProperty(_chart$source, '' + yAxis, {
	        type: 'linear',
	        tickInterval: 10
	      }), _defineProperty(_chart$source, 'type', {
	        type: 'cat',
	        values: ['1', '0']
	      }), _chart$source));
	
	      if (isTinyMode) {
	        if (size === 'quarter') {
	          chart.guide().line([-1, 0], [data.length, 0], {
	            stroke: colorSet.guide || '#9B9B9B', // 线的颜色
	            lineDash: [0, 1, 1], // 虚线的设置
	            lineWidth: 0.5 // 线的
	          });
	        } else {
	          chart.guide().line([-100, 0], [10000, 0], {
	            stroke: colorSet.guide || '#9B9B9B', // 线的颜色
	            lineDash: [0, 1, 1], // 虚线的设置
	            lineWidth: 0.5 // 线的
	          });
	        }
	
	        if (!grid) {
	          chart.on('plotmove', function (ev) {
	            var shape = ev.shape;
	            var point = {
	              x: ev.x,
	              y: ev.y
	            };
	
	            if (shape) {
	              _this.setState({
	                hoverValues: shape.__cfg.origin
	              });
	              if (_this.interval) {
	                clearTimeout(_this.interval);
	                _this.interval = null;
	              }
	              _this.interval = setTimeout(function () {
	                _this.setState({
	                  hoverValues: null
	                });
	              }, 1000);
	            } else {
	              _this.setState({
	                hoverValues: null
	              });
	            }
	          });
	        }
	      }
	
	      if (!tooltipEnable) {
	        chart.tooltip({
	          custom: true,
	          html: '<div class="ac-tooltip" style="display: none;"/>'
	        });
	      }
	
	      chart.interval().shape('radiusInterval').position(xAxis + '*' + yAxis).color('' + yAxis, function () {
	        return [colorSet.primary, colorSet.secondary, colorSet.border];
	      }).size(config.size || 10);
	      chart.render();
	
	      var frontCanvas = chart.get('frontCanvas');
	      var activeGroup = frontCanvas.addGroup();
	    };
	
	    _this.renderHoverValues = function () {
	      var hoverValues = _this.state.hoverValues;
	      var colorSet = _this.context.colorSet;
	
	      return ['upper', 'lower'].map(function (i, idx) {
	        return _react2.default.createElement(
	          'span',
	          {
	            className: 'hover-value hover-value-' + i,
	            key: i,
	            style: { left: hoverValues.x, top: hoverValues.y[idx], color: colorSet.text.key }
	          },
	          hoverValues._origin.y[idx]
	        );
	      });
	    };
	
	    _this.state = {
	      chatId: 'interval-chart-' + Math.random(),
	      hoverValues: null
	    };
	    _this._chart_inst = null;
	    return _this;
	  }
	
	  Interval.prototype.componentDidMount = function componentDidMount() {
	    this.renderChat();
	  };
	
	  Interval.prototype.componentDidUpdate = function componentDidUpdate(nextProps, nextState, nextContext) {
	    if (nextContext !== this.context) {
	      this.renderChat();
	    }
	  };
	
	  Interval.prototype.render = function render() {
	    var _state = this.state,
	        chatId = _state.chatId,
	        hoverValues = _state.hoverValues;
	    var _props = this.props,
	        xAxis = _props.xAxis,
	        yAxis = _props.yAxis;
	    var _context = this.context,
	        title = _context.title,
	        size = _context.size,
	        colorSet = _context.colorSet;
	
	    var dynamicTitle = size === 'very-small' || size === 'mini';
	    return _react2.default.createElement(
	      'div',
	      { className: 'interval-wrapper' },
	      _react2.default.createElement('div', { id: chatId }),
	      _react2.default.createElement(
	        'div',
	        { className: 'interval-header' },
	        hoverValues ? this.renderHoverValues() : null,
	        hoverValues ? _react2.default.createElement(
	          'span',
	          { className: 'hover-active-value', style: { color: colorSet.text.value } },
	          hoverValues._origin[xAxis]
	        ) : null,
	        hoverValues ? _react2.default.createElement(
	          'span',
	          { className: 'hover-active-key', style: { color: colorSet.text.key } },
	          hoverValues._origin[yAxis].join(',')
	        ) : null,
	        dynamicTitle ? _react2.default.createElement(
	          'span',
	          {
	            className: 'dynamic-title ' + (!hoverValues ? 'show' : 'hide'),
	            style: { background: colorSet.background, color: colorSet.text.value }
	          },
	          title
	        ) : null
	      )
	    );
	  };
	
	  return Interval;
	}(_react.Component);
	
	Interval.contextTypes = {
	  size: _react2.default.PropTypes.string,
	  title: _react2.default.PropTypes.any,
	  colorSet: _react2.default.PropTypes.object
	};
	exports.default = Interval;
	module.exports = exports['default'];

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _g = __webpack_require__(167);
	
	var _g2 = _interopRequireDefault(_g);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var defaulTheme = function defaulTheme(xAxis, yAxis, grid, colorSet) {
	  return _extends({}, _g2.default.Theme, {
	    plotCfg: {
	      margin: [20, 80, 60, 80]
	    },
	    shapes: {
	      interval: ['radiusInterval']
	    },
	    options: {
	      axis: _defineProperty({}, '' + xAxis, {
	        labels: { label: { fill: '#ccc' }, autoRotate: false }
	      })
	    }
	  });
	};
	
	var smallTheme = function smallTheme(xAxis, yAxis, grid, colorSet) {
	  var _axes;
	
	  return _extends({}, _g2.default.Theme, {
	    plotCfg: {
	      margin: [0, 10, 22, 10]
	    },
	    forceFit: true,
	    height: 140,
	    shapes: {
	      interval: ['radiusInterval']
	    },
	    options: {
	      axes: (_axes = {}, _defineProperty(_axes, '' + xAxis, {
	        labels: null,
	        line: null,
	        tickLine: null
	      }), _defineProperty(_axes, '' + yAxis, {
	        line: null,
	        tickLine: null,
	        grid: null
	      }), _axes)
	    }
	  });
	};
	
	var mediumTheme = function mediumTheme(xAxis, yAxis) {
	  var grid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var _axes2;
	
	  var colorSet = arguments[3];
	  var fontSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;
	
	  var gridConfig = {};
	  if (!grid) {
	    gridConfig.grid = null;
	  }
	  if ((typeof grid === 'undefined' ? 'undefined' : _typeof(grid)) === 'object') {
	    gridConfig.grid = grid;
	  } else if (typeof grid === 'string') {
	    gridConfig = {
	      grid: {
	        line: {
	          stroke: grid,
	          lineDash: [4, 4]
	        }
	      }
	    };
	  }
	  console.log('> grid', grid, gridConfig);
	  return _extends({}, _g2.default.Theme, {
	    plotCfg: {
	      margin: [5, 10, 24, 50]
	    },
	    forceFit: true,
	    height: 140,
	    shapes: {
	      interval: ['radiusInterval']
	    },
	    options: {
	      legends: { visible: false },
	      axes: (_axes2 = {}, _defineProperty(_axes2, '' + xAxis, {
	        title: false,
	        labels: { label: { fill: colorSet.xAxis || '#9B9B9B', fontSize: fontSize }, autoRotate: true },
	        tickLine: null,
	        formatter: function formatter(value) {
	          return value.substring(0, 5);
	        },
	
	        line: {
	          stroke: colorSet.guide,
	          lineDash: [4, 4]
	        },
	        labelOffset: 20
	      }), _defineProperty(_axes2, '' + yAxis, _extends({}, gridConfig, {
	        title: false,
	        labels: { label: { fill: colorSet.yAxis || '#9B9B9B', fontSize: fontSize }, autoRotate: false },
	        line: null,
	        tickLine: null
	      })), _axes2)
	    }
	  });
	};
	
	exports.default = _extends({}, defaulTheme, {
	  large: function large() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _extends({}, mediumTheme.apply(undefined, args.concat([12])), { height: 230, plotCfg: { margin: [20, 44, 40, 74] } });
	  },
	  full: function full() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    return _extends({}, mediumTheme.apply(undefined, args.concat([12])), { height: 230, plotCfg: { margin: [20, 44, 40, 74] } });
	  },
	  quarter: mediumTheme,
	  third: function third() {
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }
	
	    return _extends({}, mediumTheme.apply(undefined, args.concat([12])), { height: 230, plotCfg: { margin: [20, 44, 40, 74] } });
	  },
	  half: function half() {
	    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }
	
	    return _extends({}, mediumTheme.apply(undefined, args.concat([12])), { height: 230, plotCfg: { margin: [20, 44, 40, 74] } });
	  },
	  small: smallTheme,
	  'very-small': function verySmall() {
	    return _extends({}, smallTheme.apply(undefined, arguments), { height: 65, plotCfg: { margin: [15, 10, 5, 10] } });
	  },
	  'mini': function mini() {
	    return _extends({}, smallTheme.apply(undefined, arguments), { height: 50, plotCfg: { margin: [0, 10, 5, 10] } });
	  }
	});
	
	// [ P:2:1, C:3:1, O:3 ]
	
	module.exports = exports['default'];

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.Item = Item;
	exports.default = Meta;
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _constants = __webpack_require__(502);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Item(_ref, _ref2) {
	  var title = _ref.title,
	      children = _ref.children,
	      center = _ref.center,
	      _ref$type = _ref.type,
	      type = _ref$type === undefined ? 'normal' : _ref$type;
	  var _ref2$colorSet = _ref2.colorSet,
	      colorSet = _ref2$colorSet === undefined ? _constants.defaultColorSet : _ref2$colorSet;
	
	  return _react2.default.createElement(
	    'span',
	    {
	      className: 'meta-item meta-item-' + type + ' ' + (center ? 'center' : ''),
	      style: { borderColor: colorSet.guide }
	    },
	    title ? _react2.default.createElement(
	      'span',
	      { className: 'meta-title', style: { color: colorSet.meta.title } },
	      title
	    ) : null,
	    _react2.default.createElement(
	      'span',
	      { className: 'meta-content', style: { color: colorSet.meta.value } },
	      children
	    )
	  );
	}
	
	Item.contextTypes = {
	  colorSet: _react2.default.PropTypes.object
	};
	
	function Meta(_ref3, _ref4) {
	  var children = _ref3.children,
	      style = _ref3.style,
	      vertical = _ref3.vertical,
	      _ref3$type = _ref3.type,
	      type = _ref3$type === undefined ? 'normal' : _ref3$type;
	  var _ref4$colorSet = _ref4.colorSet,
	      colorSet = _ref4$colorSet === undefined ? _constants.defaultColorSet : _ref4$colorSet;
	
	  return _react2.default.createElement(
	    'span',
	    { className: 'meta meta-' + type, style: _extends({}, style, { color: colorSet.meta.value }) },
	    children
	  );
	}
	
	Meta.contextTypes = {
	  colorSet: _react2.default.PropTypes.object
	};
	
	Meta.Item = Item;

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (_ref) {
	  var children = _ref.children;
	  return _react2.default.createElement(
	    "div",
	    { className: "title" },
	    children
	  );
	};
	
	module.exports = exports['default'];

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (_ref) {
	  var children = _ref.children;
	  return _react2.default.createElement(
	    "div",
	    { className: "footer" },
	    children
	  );
	};
	
	module.exports = exports['default'];

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(4);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Percent = function Percent(_ref) {
	    var title = _ref.title,
	        value = _ref.value,
	        _ref$type = _ref.type,
	        type = _ref$type === undefined ? 'normal' : _ref$type;
	    return _react2.default.createElement(
	        'span',
	        { className: 'percent-wrapper percent-wrapper-' + type },
	        title ? _react2.default.createElement(
	            'span',
	            { className: 'percent-title' },
	            title
	        ) : null,
	        _react2.default.createElement(
	            'span',
	            { className: 'percent-container' },
	            _react2.default.createElement('span', { className: 'percent-content', style: { width: value } })
	        ),
	        type === 'large' ? _react2.default.createElement(
	            'span',
	            { className: 'percent-value' },
	            value
	        ) : null
	    );
	};
	
	exports.default = Percent;
	module.exports = exports['default'];

/***/ }),
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */
/***/ (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var ColorCal = __webpack_require__(__webpack_module_template_argument_0__);
	
	ColorCal.Util = __webpack_require__(__webpack_module_template_argument_1__);
	
	module.exports = ColorCal;


/***/ })
/******/ ])));
//# sourceMappingURL=common.js.map